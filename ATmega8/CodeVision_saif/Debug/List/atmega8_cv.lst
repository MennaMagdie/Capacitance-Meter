
AVRASM ver. 2.1.30  E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm Fri Apr 18 14:15:45 2025

E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1086): warning: Register r5 already defined by the .DEF directive
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1087): warning: Register r4 already defined by the .DEF directive
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1088): warning: Register r7 already defined by the .DEF directive
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1089): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rangemode=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c0a5      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c0e5      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 c0c1      	RJMP _ana_comp_isr
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1126): warning: .cseg .db misalignment - padding zero byte
00001c 0004      	.DB  0x4
                 
                 _0x3:
00001d 6e70
00001e 6d75
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1129): warning: .cseg .db misalignment - padding zero byte
00001f 0020      	.DB  0x70,0x6E,0x75,0x6D,0x20
                 _0x4:
000020 ca00
000021 3b9a
000022 e100
000023 05f5      	.DB  0x0,0xCA,0x9A,0x3B,0x0,0xE1,0xF5,0x5
000024 9680
000025 0098
000026 4240
000027 000f      	.DB  0x80,0x96,0x98,0x0,0x40,0x42,0xF,0x0
000028 86a0
000029 0001
00002a 2710
00002b 0000      	.DB  0xA0,0x86,0x1,0x0,0x10,0x27,0x0,0x0
00002c 03e8
00002d 0000
00002e 0064
00002f 0000      	.DB  0xE8,0x3,0x0,0x0,0x64,0x0,0x0,0x0
000030 000a
000031 0000
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1135): warning: .cseg .db misalignment - padding zero byte
000032 0001      	.DB  0xA,0x0,0x0,0x0,0x1
                 _0x6:
000033 0160
000034 016c
000035 0178
000036 0184      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+12),HIGH(_0x5+12),LOW(_0x5+24),HIGH(_0x5+24),LOW(_0x5+36),HIGH(_0x5+36)
000037 0194
000038 01a4      	.DB  LOW(_0x5+52),HIGH(_0x5+52),LOW(_0x5+68),HIGH(_0x5+68)
                 _0x7:
000039 53b6
00003a 245c
00003b 4bdf
00003c 20f5      	.DB  0xB6,0x53,0x5C,0x24,0xDF,0x4B,0xF5,0x20
                 _0x0:
00003d 6152
00003e 676e
00003f 3a65
000040 4120      	.DB  0x52,0x61,0x6E,0x67,0x65,0x3A,0x20,0x41
000041 7475
000042 006f
000043 6152
000044 676e      	.DB  0x75,0x74,0x6F,0x0,0x52,0x61,0x6E,0x67
000045 3a65
000046 4c20
000047 776f
000048 0020      	.DB  0x65,0x3A,0x20,0x4C,0x6F,0x77,0x20,0x0
000049 6152
00004a 676e
00004b 3a65
00004c 4820      	.DB  0x52,0x61,0x6E,0x67,0x65,0x3A,0x20,0x48
00004d 6769
00004e 0068
00004f 6143
000050 696c      	.DB  0x69,0x67,0x68,0x0,0x43,0x61,0x6C,0x69
000051 7262
000052 7461
000053 3a65
000054 5a20      	.DB  0x62,0x72,0x61,0x74,0x65,0x3A,0x20,0x5A
000055 7265
000056 006f
000057 6143
000058 696c      	.DB  0x65,0x72,0x6F,0x0,0x43,0x61,0x6C,0x69
000059 7262
00005a 7461
00005b 3a65
00005c 3120      	.DB  0x62,0x72,0x61,0x74,0x65,0x3A,0x20,0x31
00005d 7520
00005e 0046
00005f 6153
000060 6576      	.DB  0x20,0x75,0x46,0x0,0x53,0x61,0x76,0x65
000061 6320
000062 6c61
000063 6269
000064 6172      	.DB  0x20,0x63,0x61,0x6C,0x69,0x62,0x72,0x61
000065 6974
000066 6e6f
000067 4100
000068 7475      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x41,0x75,0x74
000069 206f
00006a 4600
00006b 726f
00006c 6563      	.DB  0x6F,0x20,0x0,0x46,0x6F,0x72,0x63,0x65
00006d 2000
00006e 6968
00006f 6867
000070 2000      	.DB  0x0,0x20,0x68,0x69,0x67,0x68,0x0,0x20
000071 6f6c
000072 2077
E:\Term_8\Embedded\Lab\Capacitance-Meter\ATmega8\CodeVision_saif\Debug\List\atmega8_cv.asm(1155): warning: .cseg .db misalignment - padding zero byte
000073 0000      	.DB  0x6C,0x6F,0x77,0x20,0x0
                 _0x2000003:
000074 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000075 0001      	.DW  0x01
000076 0005      	.DW  0x05
000077 0038      	.DW  __REG_VARS*2
                 
000078 0005      	.DW  0x05
000079 01cd      	.DW  _decades
00007a 003a      	.DW  _0x3*2
                 
00007b 0025      	.DW  0x25
00007c 01d2      	.DW  _tenths_tab
00007d 0040      	.DW  _0x4*2
                 
00007e 000c      	.DW  0x0C
00007f 0160      	.DW  _0x5
000080 007a      	.DW  _0x0*2
                 
000081 000c      	.DW  0x0C
000082 016c      	.DW  _0x5+12
000083 0086      	.DW  _0x0*2+12
                 
000084 000c      	.DW  0x0C
000085 0178      	.DW  _0x5+24
000086 0092      	.DW  _0x0*2+24
                 
000087 0010      	.DW  0x10
000088 0184      	.DW  _0x5+36
000089 009e      	.DW  _0x0*2+36
                 
00008a 0010      	.DW  0x10
00008b 0194      	.DW  _0x5+52
00008c 00ae      	.DW  _0x0*2+52
                 
00008d 0011      	.DW  0x11
00008e 01a4      	.DW  _0x5+68
00008f 00be      	.DW  _0x0*2+68
                 
000090 000c      	.DW  0x0C
000091 021e      	.DW  _menu_item
000092 0066      	.DW  _0x6*2
                 
000093 0008      	.DW  0x08
000094 022a      	.DW  _calib
000095 0072      	.DW  _0x7*2
                 
000096 0006      	.DW  0x06
000097 01b5      	.DW  _0x43
000098 00cf      	.DW  _0x0*2+85
                 
000099 0006      	.DW  0x06
00009a 01bb      	.DW  _0x43+6
00009b 00d5      	.DW  _0x0*2+91
                 
00009c 0006      	.DW  0x06
00009d 01c1      	.DW  _0x43+12
00009e 00db      	.DW  _0x0*2+97
                 
00009f 0006      	.DW  0x06
0000a0 01c7      	.DW  _0x43+18
0000a1 00e1      	.DW  _0x0*2+103
                 
0000a2 0002      	.DW  0x02
0000a3 0242      	.DW  __base_y_G100
0000a4 00e8      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000a5 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a6 94f8      	CLI
0000a7 27ee      	CLR  R30
0000a8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a9 e0f1      	LDI  R31,1
0000aa bffb      	OUT  GICR,R31
0000ab bfeb      	OUT  GICR,R30
0000ac bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000ad e08d      	LDI  R24,(14-2)+1
0000ae e0a2      	LDI  R26,2
0000af 27bb      	CLR  R27
                 __CLEAR_REG:
0000b0 93ed      	ST   X+,R30
0000b1 958a      	DEC  R24
0000b2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b4 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000b6 93ed      	ST   X+,R30
0000b7 9701      	SBIW R24,1
0000b8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b9 eeea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ba e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000bb 9185      	LPM  R24,Z+
0000bc 9195      	LPM  R25,Z+
0000bd 9700      	SBIW R24,0
0000be f061      	BREQ __GLOBAL_INI_END
0000bf 91a5      	LPM  R26,Z+
0000c0 91b5      	LPM  R27,Z+
0000c1 9005      	LPM  R0,Z+
0000c2 9015      	LPM  R1,Z+
0000c3 01bf      	MOVW R22,R30
0000c4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c5 9005      	LPM  R0,Z+
0000c6 920d      	ST   X+,R0
0000c7 9701      	SBIW R24,1
0000c8 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c9 01fb      	MOVW R30,R22
0000ca cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000cb e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000cc bfed      	OUT  SPL,R30
0000cd e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000ce bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cf e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000d0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000d1 c25a      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 17/04/2025
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>  // if you're using delay_ms()
                 ;#include <eeprom.h> // for EEPROM access
                 ;#include <stdio.h>
                 ;// Declare your global variables here
                 ;#include <spi.h>
                 ;
                 ;#define DISCHARGE_ON DDRD |= (1 << 6)
                 ;#define DISCHARGE_OFF DDRD &= ~(1 << 6)
                 ;
                 ;/* Range control */
                 ;#define HIGH_RANGE   \
                 ;  PORTD |= (1 << 5); \
                 ;  DDRD |= (1 << 5)
                 ;#define LOW_RANGE    \
                 ;  DDRD &= ~(1 << 5); \
                 ;  PORTD &= ~(1 << 5)
                 ;#define PULLDOWN_RANGE \
                 ;  PORTD &= ~(1 << 5);  \
                 ;  DDRD |= (1 << 5)
                 ;
                 ;/* Threshold selection */
                 ;#define ADMUX_LOW 1
                 ;#define ADMUX_MEDIUM 2
                 ;#define ADMUX_HIGH 3
                 ;
                 ;/* Timer abstraction */
                 ;#define TIMER_VALUE TCNT1
                 ;#define TIMER_START TCCR1B = (1 << CS10)
                 ;#define TIMER_STOP TCCR1B = 0
                 ;
                 ;/* Led abstraction */
                 ;#define LED_ON PORTD &= ~(1 << 4)
                 ;#define LED_OFF PORTD |= (1 << 4)
                 ;
                 ;/* Button abstraction */
                 ;#define BUTTON_PUSHED (!(PIND & (1 << 2)))
                 ;
                 ;char decades[5] = {'p', 'n', 'u', 'm', ' '};
                 
                 	.DSEG
                 ;unsigned long tenths_tab[10] = {1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};
                 ;char lcdbuffer[32];
                 ;
                 ;unsigned short volatile timer_highword;
                 ;
                 ;/* Program states: */
                 ;#define STATE_IDLE 0
                 ;#define STATE_LOW_THRESH 1
                 ;#define STATE_HIGH_THRESH 2
                 ;#define STATE_DONE 3
                 ;// #define STATE_BUTTONDOWN 4
                 ;
                 ;unsigned char volatile measure_state;
                 ;
                 ;/* The following is the value the analog compare interrupt will set ADMUX: */
                 ;unsigned char volatile set_admux;
                 ;
                 ;/* The rangemode defines the measurement operation */
                 ;#define RANGE_HIGH_THRESH 1 /* If missing: threshold low */
                 ;#define RANGE_HIGH 2        /* If missing: range low */
                 ;#define RANGE_AUTO 4
                 ;#define RANGE_OVERFLOW 8 /* If set: cap was out of range */
                 ;unsigned char rangemode = RANGE_AUTO;
                 ;
                 ;/* Constants defining measuring operation: */
                 ;#define EXTRA_DISCHARGE_MS 100   /* Extra discharging that is done even after a threshold is crossed */
                 ;#define LOW_RANGE_TIMEOUT 500    /* At autorange, when to go to high range */
                 ;#define HIGH_RANGE_TIMEOUT 10000 /* When to give up completely */
                 ;
                 ;/* Menu system */
                 ;#define MENU_SPEED 800 /* ms each menu item is shown */
                 ;
                 ;#define MENU_ITEMS 6
                 ;char *menu_item[MENU_ITEMS] = {"Range: Auto", "Range: Low ", "Range: High", "Calibrate: Zero", "Calibrate: 1 uF", "Save  ...
                 _0x5:
000160           	.BYTE 0x55
                 ;
                 ;#define CALIB_LOW 256000000 /* for 1uF reference prescale: >> 8 */
                 ;#define CALIB_HIGH 65536000 /* for 1uF reference */
                 ;
                 ;/* Calibration values are stored in eeprom in the following format:
                 ;
                 ;   Starting from byte 1:  (not 0)
                 ;   'C' 'D'
                 ;   <data>
                 ;
                 ;*/
                 ;#define EEPROM_HEADER 1
                 ;#define EEPROM_DATA 3
                 ;
                 ;unsigned short calib[4] = {21430, 9308, 19423, 8437};
                 ;// unsigned short calib[4] = {53575, 46540, 19423, 8437};
                 ;//char buf[16];
                 ;unsigned long calib_offset[4] = {0, 0, 0, 0};
                 ;
                 ;#define SIZE_OF_CALIB 8
                 ;#define SIZE_OF_CALIBOFFSET 16
                 ;
                 ;/* This macro fractionally multiplies 16.16 bit with 0.16 bit both unsigned,
                 ;   shifting the result two bytes right and returning 16.16 bit.
                 ;
                 ; Result is 16.16 bit unsigned */
                 ;
                 ;/* Interrupt implementation */
                 ;interrupt[ANA_COMP] void ana_comp_isr(void)
                 ; 0000 0081 {
                 
                 	.CSEG
                 _ana_comp_isr:
                 ; .FSTART _ana_comp_isr
0000d2 93aa      	ST   -Y,R26
0000d3 93ea      	ST   -Y,R30
0000d4 b7ef      	IN   R30,SREG
0000d5 93ea      	ST   -Y,R30
                 ; 0000 0082   if (measure_state == STATE_LOW_THRESH)
0000d6 d354      	RCALL SUBOPT_0x0
0000d7 30a1      	CPI  R26,LOW(0x1)
0000d8 f439      	BRNE _0x8
                 ; 0000 0083   {
                 ; 0000 0084     /* We just got low threshold interrupt, start timer and set high threshold */
                 ; 0000 0085     TIMER_START;
0000d9 e0e1      	LDI  R30,LOW(1)
0000da bdee      	OUT  0x2E,R30
                 ; 0000 0086     ADMUX = set_admux;
0000db 91e0 021d 	LDS  R30,_set_admux
0000dd b9e7      	OUT  0x7,R30
                 ; 0000 0087     measure_state = STATE_HIGH_THRESH;
0000de e0e2      	LDI  R30,LOW(2)
0000df c007      	RJMP _0x66
                 ; 0000 0088   }
                 ; 0000 0089   else if (measure_state == STATE_HIGH_THRESH)
                 _0x8:
0000e0 d34a      	RCALL SUBOPT_0x0
0000e1 30a2      	CPI  R26,LOW(0x2)
0000e2 f431      	BRNE _0xA
                 ; 0000 008A   {
                 ; 0000 008B     /* High threshold interrupt, verify it, then stop timer */
                 ; 0000 008C     if (ACSR & (1 << ACO))
0000e3 9b45      	SBIS 0x8,5
0000e4 c004      	RJMP _0xB
                 ; 0000 008D     {
                 ; 0000 008E       TIMER_STOP;
0000e5 d348      	RCALL SUBOPT_0x1
                 ; 0000 008F       measure_state = STATE_DONE;
0000e6 e0e3      	LDI  R30,LOW(3)
                 _0x66:
0000e7 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0090     }
                 ; 0000 0091   }
                 _0xB:
                 ; 0000 0092 }
                 _0xA:
0000e9 91e9      	LD   R30,Y+
0000ea bfef      	OUT  SREG,R30
0000eb 91e9      	LD   R30,Y+
0000ec 91a9      	LD   R26,Y+
0000ed 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0095 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000ee 93aa      	ST   -Y,R26
0000ef 93ba      	ST   -Y,R27
0000f0 93ea      	ST   -Y,R30
0000f1 93fa      	ST   -Y,R31
0000f2 b7ef      	IN   R30,SREG
0000f3 93ea      	ST   -Y,R30
                 ; 0000 0096   /* Timer 1 counts the low 16 bits, this interrupt updates the high 16 bits */
                 ; 0000 0097   timer_highword++;
0000f4 e1aa      	LDI  R26,LOW(_timer_highword)
0000f5 e0b2      	LDI  R27,HIGH(_timer_highword)
0000f6 91ed      	LD   R30,X+
0000f7 91fd      	LD   R31,X+
0000f8 9631      	ADIW R30,1
0000f9 93fe      	ST   -X,R31
0000fa 93ee      	ST   -X,R30
                 ; 0000 0098 }
0000fb 91e9      	LD   R30,Y+
0000fc bfef      	OUT  SREG,R30
0000fd 91f9      	LD   R31,Y+
0000fe 91e9      	LD   R30,Y+
0000ff 91b9      	LD   R27,Y+
000100 91a9      	LD   R26,Y+
000101 9518      	RETI
                 ; .FEND
                 ;
                 ;// SIGNAL(SIG_INTERRUPT0)
                 ;// {
                 ;//   /* Hardware interrupt 0 is a buttonpush */
                 ;//   measure_state = STATE_BUTTONDOWN;
                 ;// }
                 ;
                 ;/*
                 ;   The measure function does the cyclus of a capacitance measurement
                 ;   Returned is the number of clocks measured
                 ;
                 ;   The function relies on flags in the global rangemode value
                 ;   Input flags:
                 ;     RANGE_AUTO
                 ;     RANGE_HIGH
                 ;     RANGE_HIGH_THRESH
                 ;
                 ;   Output flags:
                 ;     RANGE_HIGH     (if RANGE_AUTO)
                 ;     RANGE_OVERFLOW
                 ;
                 ;*/
                 ;
                 ;#include <stdint.h>
                 ;void MUL_LONG_SHORT_S2(uint32_t x, uint16_t y, uint32_t *result)
                 ; 0000 00B2 {
                 _MUL_LONG_SHORT_S2:
                 ; .FSTART _MUL_LONG_SHORT_S2
                 ; 0000 00B3   // int16_t x_high = x >> 16;              // Integer part (signed)
                 ; 0000 00B4   // uint16_t x_low = x & 0xFFFF;           // Fractional part (unsigned)
                 ; 0000 00B5 
                 ; 0000 00B6   // int32_t part1 = (int32_t)x_high * y;   // Signed mult: integer part
                 ; 0000 00B7   // int32_t part2 = ((int32_t)x_low * y + 0x8000) >> 16; // Rounded fractional part
                 ; 0000 00B8 
                 ; 0000 00B9   // int32_t combined = part1 + part2;
                 ; 0000 00BA 
                 ; 0000 00BB   //*result = (uint32_t)combined;          // Cast final signed result to unsigned
                 ; 0000 00BC   uint16_t x_frac = x & 0xFFFF;
                 ; 0000 00BD   uint16_t x_int = x >> 16;
                 ; 0000 00BE 
                 ; 0000 00BF   uint32_t part1 = ((uint32_t)x_frac * y) >> 16;
                 ; 0000 00C0   uint32_t part2 = (uint32_t)x_int * y;
                 ; 0000 00C1   *result = (part2) + part1;
000102 d32e      	RCALL SUBOPT_0x2
000103 9728      	SBIW R28,8
000104 d4cc      	RCALL __SAVELOCR4
                 ;	x -> Y+16
                 ;	y -> Y+14
                 ;	*result -> Y+12
                 ;	x_frac -> R16,R17
                 ;	x_int -> R18,R19
                 ;	part1 -> Y+8
                 ;	part2 -> Y+4
000105 89e8      	LDD  R30,Y+16
000106 89f9      	LDD  R31,Y+16+1
000107 018f      	MOVW R16,R30
                +
000108 89e8     +LDD R30 , Y + 16
000109 89f9     +LDD R31 , Y + 16 + 1
00010a 896a     +LDD R22 , Y + 16 + 2
00010b 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
00010c d41c      	RCALL __LSRD16
00010d 019f      	MOVW R18,R30
00010e 01d8      	MOVW R26,R16
00010f d324      	RCALL SUBOPT_0x3
000110 d418      	RCALL __LSRD16
                +
000111 87e8     +STD Y + 8 , R30
000112 87f9     +STD Y + 8 + 1 , R31
000113 876a     +STD Y + 8 + 2 , R22
000114 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000115 01d9      	MOVW R26,R18
000116 d31d      	RCALL SUBOPT_0x3
                +
000117 83ec     +STD Y + 4 , R30
000118 83fd     +STD Y + 4 + 1 , R31
000119 836e     +STD Y + 4 + 2 , R22
00011a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                +
00011b 85e8     +LDD R30 , Y + 8
00011c 85f9     +LDD R31 , Y + 8 + 1
00011d 856a     +LDD R22 , Y + 8 + 2
00011e 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00011f d31c      	RCALL SUBOPT_0x4
000120 d3e4      	RCALL __ADDD12
000121 85ac      	LDD  R26,Y+12
000122 85bd      	LDD  R27,Y+12+1
000123 d468      	RCALL __PUTDP1
                 ; 0000 00C2   // return result;
                 ; 0000 00C3 }
000124 d4b1      	RCALL __LOADLOCR4
000125 9664      	ADIW R28,20
000126 9508      	RET
                 ; .FEND
                 ;// Multiply 16.16 fixed-point (x) by 0.16 fixed-point (y), return 16.16 fixed-point
                 ;/*uint32_t MUL_LONG_SHORT_S2(uint32_t x, uint16_t y) {
                 ;    uint16_t x_frac = x & 0xFFFF;
                 ;    uint16_t x_int = x >> 16;
                 ;    uint32_t part1 = ((uint32_t)x_frac * y) >> 16;
                 ;    uint32_t part2 = (uint32_t)x_int * y;
                 ;    uint32_t result = (part2) + part1;
                 ;    return result;
                 ;}  */
                 ;void eeprom_read(void)
                 ; 0000 00CE {
                 _eeprom_read:
                 ; .FSTART _eeprom_read
                 ; 0000 00CF   if (eeprom_read_byte((void *)EEPROM_HEADER) != 'C')
000127 e0a1      	LDI  R26,LOW(1)
000128 e0b0      	LDI  R27,HIGH(1)
000129 d480      	RCALL __EEPROMRDB
00012a 34e3      	CPI  R30,LOW(0x43)
00012b f009      	BREQ _0xC
                 ; 0000 00D0     return;
00012c 9508      	RET
                 ; 0000 00D1 
                 ; 0000 00D2   if (eeprom_read_byte((void *)(EEPROM_HEADER + 1)) != 'D')
                 _0xC:
00012d e0a2      	LDI  R26,LOW(2)
00012e e0b0      	LDI  R27,HIGH(2)
00012f d47a      	RCALL __EEPROMRDB
000130 34e4      	CPI  R30,LOW(0x44)
000131 f009      	BREQ _0xD
                 ; 0000 00D3     return;
000132 9508      	RET
                 ; 0000 00D4 
                 ; 0000 00D5   eeprom_read_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
                 _0xD:
000133 d30d      	RCALL SUBOPT_0x5
000134 d2d2      	RCALL _eeprom_read_block
                 ; 0000 00D6   eeprom_read_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFFSET), SIZE_OF_CALIB);
000135 d316      	RCALL SUBOPT_0x6
000136 d2d0      	RCALL _eeprom_read_block
                 ; 0000 00D7 }
000137 9508      	RET
                 ; .FEND
                 ;
                 ;void eeprom_write(void)
                 ; 0000 00DA {
                 _eeprom_write:
                 ; .FSTART _eeprom_write
                 ; 0000 00DB   eeprom_write_byte((void *)EEPROM_HEADER, 'C');
000138 e0a1      	LDI  R26,LOW(1)
000139 e0b0      	LDI  R27,HIGH(1)
00013a e4e3      	LDI  R30,LOW(67)
00013b d47a      	RCALL __EEPROMWRB
                 ; 0000 00DC   eeprom_write_byte((void *)(EEPROM_HEADER + 1), 'D');
00013c e0a2      	LDI  R26,LOW(2)
00013d e0b0      	LDI  R27,HIGH(2)
00013e e4e4      	LDI  R30,LOW(68)
00013f d476      	RCALL __EEPROMWRB
                 ; 0000 00DD 
                 ; 0000 00DE   eeprom_write_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
000140 d300      	RCALL SUBOPT_0x5
000141 d2d6      	RCALL _eeprom_write_block
                 ; 0000 00DF   eeprom_write_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFFSET), SIZE_OF_CALIB);
000142 d309      	RCALL SUBOPT_0x6
000143 d2d4      	RCALL _eeprom_write_block
                 ; 0000 00E0 }
000144 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_string(const char *str, unsigned char pos)
                 ; 0000 00E3 {
                 _lcd_string:
                 ; .FSTART _lcd_string
                 ; 0000 00E4   unsigned char row = (pos >= 16) ? 1 : 0;
                 ; 0000 00E5   unsigned char col = (pos % 16);
                 ; 0000 00E6   lcd_gotoxy(col, row);
000145 93aa      	ST   -Y,R26
000146 d48c      	RCALL __SAVELOCR2
                 ;	*str -> Y+3
                 ;	pos -> Y+2
                 ;	row -> R17
                 ;	col -> R16
000147 81aa      	LDD  R26,Y+2
000148 31a0      	CPI  R26,LOW(0x10)
000149 f010      	BRLO _0xE
00014a e0e1      	LDI  R30,LOW(1)
00014b c001      	RJMP _0xF
                 _0xE:
00014c e0e0      	LDI  R30,LOW(0)
                 _0xF:
00014d 2f1e      	MOV  R17,R30
00014e 81ea      	LDD  R30,Y+2
00014f e0f0      	LDI  R31,0
000150 e0af      	LDI  R26,LOW(15)
000151 e0b0      	LDI  R27,HIGH(15)
000152 d425      	RCALL __MANDW12
000153 2f0e      	MOV  R16,R30
000154 930a      	ST   -Y,R16
000155 2fa1      	MOV  R26,R17
000156 d248      	RCALL _lcd_gotoxy
                 ; 0000 00E7   lcd_puts(str);
000157 81ab      	LDD  R26,Y+3
000158 81bc      	LDD  R27,Y+3+1
000159 d274      	RCALL _lcd_puts
                 ; 0000 00E8 }
00015a d47d      	RCALL __LOADLOCR2
00015b c197      	RJMP _0x20C0004
                 ; .FEND
                 ;
                 ;/*unsigned char long2ascii(char *buf, unsigned long val)
                 ;{
                 ;  // Converts val to a 5-digit ASCII right-aligned string, returns # of digits
                 ;  sprintf(buf, "%05lu", val); // e.g., 00042
                 ;  return 5;
                 ;}   */
                 ;char long2ascii(char *target, unsigned long value)
                 ; 0000 00F1 {
                 _long2ascii:
                 ; .FSTART _long2ascii
                 ; 0000 00F2   unsigned char p, pos=0;
                 ; 0000 00F3   unsigned char numbernow=0;
                 ; 0000 00F4   char ret=0;
                 ; 0000 00F5 
                 ; 0000 00F6   for (p=0;(p<10) && (pos<5);p++) {
00015c d448      	RCALL __PUTPARD2
00015d d473      	RCALL __SAVELOCR4
                 ;	*target -> Y+8
                 ;	value -> Y+4
                 ;	p -> R17
                 ;	pos -> R16
                 ;	numbernow -> R19
                 ;	ret -> R18
00015e e000      	LDI  R16,0
00015f e030      	LDI  R19,0
000160 e020      	LDI  R18,0
000161 e010      	LDI  R17,LOW(0)
                 _0x12:
000162 301a      	CPI  R17,10
000163 f410      	BRSH _0x14
000164 3005      	CPI  R16,5
000165 f008      	BRLO _0x15
                 _0x14:
000166 c045      	RJMP _0x13
                 _0x15:
                 ; 0000 00F7 
                 ; 0000 00F8     if (numbernow) {
000167 3030      	CPI  R19,0
000168 f0b9      	BREQ _0x16
                 ; 0000 00F9       /* Eventually place dot */
                 ; 0000 00FA       /* Notice the nice fallthrough construction. */
                 ; 0000 00FB       switch(p) {
000169 2fe1      	MOV  R30,R17
00016a e0f0      	LDI  R31,0
                 ; 0000 00FC       case 1:
00016b 30e1      	CPI  R30,LOW(0x1)
00016c e0a0      	LDI  R26,HIGH(0x1)
00016d 07fa      	CPC  R31,R26
00016e f411      	BRNE _0x1A
                 ; 0000 00FD         ret++;
00016f 5f2f      	SUBI R18,-1
                 ; 0000 00FE       case 4:
000170 c004      	RJMP _0x1B
                 _0x1A:
000171 30e4      	CPI  R30,LOW(0x4)
000172 e0a0      	LDI  R26,HIGH(0x4)
000173 07fa      	CPC  R31,R26
000174 f411      	BRNE _0x1C
                 _0x1B:
                 ; 0000 00FF         ret++;
000175 5f2f      	SUBI R18,-1
                 ; 0000 0100       case 7:
000176 c004      	RJMP _0x1D
                 _0x1C:
000177 30e7      	CPI  R30,LOW(0x7)
000178 e0a0      	LDI  R26,HIGH(0x7)
000179 07fa      	CPC  R31,R26
00017a f429      	BRNE _0x19
                 _0x1D:
                 ; 0000 0101         ret++;
00017b 5f2f      	SUBI R18,-1
                 ; 0000 0102         target[pos] = '.';
00017c d2da      	RCALL SUBOPT_0x7
00017d e2ee      	LDI  R30,LOW(46)
00017e 93ec      	ST   X,R30
                 ; 0000 0103         pos++;
00017f 5f0f      	SUBI R16,-1
                 ; 0000 0104       }
                 _0x19:
                 ; 0000 0105     }
                 ; 0000 0106 
                 ; 0000 0107     if (value < tenths_tab[p]) {
                 _0x16:
000180 d2dc      	RCALL SUBOPT_0x8
000181 f490      	BRSH _0x1F
                 ; 0000 0108       if (numbernow) {
000182 3030      	CPI  R19,0
000183 f019      	BREQ _0x20
                 ; 0000 0109         /* Inside number, put a zero */
                 ; 0000 010A         target[pos] = '0';
000184 d2d2      	RCALL SUBOPT_0x7
000185 e3e0      	LDI  R30,LOW(48)
000186 c00a      	RJMP _0x67
                 ; 0000 010B         pos++;
                 ; 0000 010C       }
                 ; 0000 010D       else {
                 _0x20:
                 ; 0000 010E         /* Check if we need to pad with spaces */
                 ; 0000 010F         if (p>=6) {
000187 3016      	CPI  R17,6
000188 f020      	BRLO _0x22
                 ; 0000 0110           target[pos] = ' ';
000189 d2cd      	RCALL SUBOPT_0x7
00018a e2e0      	LDI  R30,LOW(32)
00018b 93ec      	ST   X,R30
                 ; 0000 0111           pos++;
00018c 5f0f      	SUBI R16,-1
                 ; 0000 0112         }
                 ; 0000 0113 
                 ; 0000 0114         if (p==6) {
                 _0x22:
00018d 3016      	CPI  R17,6
00018e f421      	BRNE _0x23
                 ; 0000 0115           /* We also need to place a space instead of . */
                 ; 0000 0116           target[pos] = ' ';
00018f d2c7      	RCALL SUBOPT_0x7
000190 e2e0      	LDI  R30,LOW(32)
                 _0x67:
000191 93ec      	ST   X,R30
                 ; 0000 0117           pos++;
000192 5f0f      	SUBI R16,-1
                 ; 0000 0118         }
                 ; 0000 0119       }
                 _0x23:
                 ; 0000 011A     }
                 ; 0000 011B     else {
000193 c016      	RJMP _0x24
                 _0x1F:
                 ; 0000 011C       target[pos] = '0';
000194 d2c2      	RCALL SUBOPT_0x7
000195 e3e0      	LDI  R30,LOW(48)
000196 93ec      	ST   X,R30
                 ; 0000 011D       while (value >= tenths_tab[p]) {
                 _0x25:
000197 d2c5      	RCALL SUBOPT_0x8
000198 f078      	BRLO _0x27
                 ; 0000 011E         target[pos]++;
000199 d2bd      	RCALL SUBOPT_0x7
00019a 91ec      	LD   R30,X
00019b 5fef      	SUBI R30,-LOW(1)
00019c 93ec      	ST   X,R30
                 ; 0000 011F         value -= tenths_tab[p];
00019d 2fe1      	MOV  R30,R17
00019e eda2      	LDI  R26,LOW(_tenths_tab)
00019f e0b1      	LDI  R27,HIGH(_tenths_tab)
0001a0 d2c7      	RCALL SUBOPT_0x9
0001a1 d29a      	RCALL SUBOPT_0x4
0001a2 d36c      	RCALL __SUBD21
                +
0001a3 83ac     +STD Y + 4 , R26
0001a4 83bd     +STD Y + 4 + 1 , R27
0001a5 838e     +STD Y + 4 + 2 , R24
0001a6 839f     +STD Y + 4 + 3 , R25
                 	__PUTD2S 4
                 ; 0000 0120       }
0001a7 cfef      	RJMP _0x25
                 _0x27:
                 ; 0000 0121       pos++;
0001a8 5f0f      	SUBI R16,-1
                 ; 0000 0122       numbernow = 1;
0001a9 e031      	LDI  R19,LOW(1)
                 ; 0000 0123     }
                 _0x24:
                 ; 0000 0124   }
0001aa 5f1f      	SUBI R17,-1
0001ab cfb6      	RJMP _0x12
                 _0x13:
                 ; 0000 0125 
                 ; 0000 0126   return ret;
0001ac 2fe2      	MOV  R30,R18
0001ad c27a      	RJMP _0x20C0001
                 ; 0000 0127 }
                 ; .FEND
                 ;
                 ;long measure(void)
                 ; 0000 012A {
                 _measure:
                 ; .FSTART _measure
                 ; 0000 012B   unsigned short i;
                 ; 0000 012C 
                 ; 0000 012D   measure_state = STATE_IDLE;
0001ae d424      	RCALL __SAVELOCR2
                 ;	i -> R16,R17
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93e0 021c 	STS  _measure_state,R30
                 ; 0000 012E 
                 ; 0000 012F   /* Discharge cap until below low threshold + some extra */
                 ; 0000 0130   ADMUX = ADMUX_LOW;
0001b2 e0e1      	LDI  R30,LOW(1)
0001b3 b9e7      	OUT  0x7,R30
                 ; 0000 0131   PULLDOWN_RANGE; /* Use range signal as pull down */
0001b4 9895      	CBI  0x12,5
0001b5 9a8d      	SBI  0x11,5
                 ; 0000 0132 
                 ; 0000 0133   while (1)
                 _0x28:
                 ; 0000 0134   {
                 ; 0000 0135     /* Enable comperator and check value */
                 ; 0000 0136     DISCHARGE_OFF;
0001b6 988e      	CBI  0x11,6
                 ; 0000 0137     delay_ms(1);
0001b7 d2b6      	RCALL SUBOPT_0xA
                 ; 0000 0138 
                 ; 0000 0139     /* This value must be checked in every loop */
                 ; 0000 013A     if (BUTTON_PUSHED)
0001b8 9982      	SBIC 0x10,2
0001b9 c002      	RJMP _0x2B
                 ; 0000 013B       return 0;
0001ba d2b6      	RCALL SUBOPT_0xB
0001bb c079      	RJMP _0x20C0005
                 ; 0000 013C 
                 ; 0000 013D     if (!(ACSR & (1 << ACO)))
                 _0x2B:
0001bc 9b45      	SBIS 0x8,5
                 ; 0000 013E       break;
0001bd c004      	RJMP _0x2A
                 ; 0000 013F 
                 ; 0000 0140     /* Discharge for a while */
                 ; 0000 0141     DISCHARGE_ON;
0001be 9a8e      	SBI  0x11,6
                 ; 0000 0142     delay_ms(10);
0001bf e0aa      	LDI  R26,LOW(10)
0001c0 d2b5      	RCALL SUBOPT_0xC
                 ; 0000 0143   }
0001c1 cff4      	RJMP _0x28
                 _0x2A:
                 ; 0000 0144 
                 ; 0000 0145   DISCHARGE_ON;
0001c2 9a8e      	SBI  0x11,6
                 ; 0000 0146   delay_ms(EXTRA_DISCHARGE_MS);
0001c3 e6a4      	LDI  R26,LOW(100)
0001c4 d2b1      	RCALL SUBOPT_0xC
                 ; 0000 0147 
                 ; 0000 0148   /* Prepare: reset timer, low range */
                 ; 0000 0149   TIMER_STOP;
0001c5 d268      	RCALL SUBOPT_0x1
                 ; 0000 014A   TIMER_VALUE = 0;
0001c6 e0e0      	LDI  R30,LOW(0)
0001c7 e0f0      	LDI  R31,HIGH(0)
0001c8 bdfd      	OUT  0x2C+1,R31
0001c9 bdec      	OUT  0x2C,R30
                 ; 0000 014B   timer_highword = 0;
0001ca 93e0 021a 	STS  _timer_highword,R30
0001cc 93e0 021b 	STS  _timer_highword+1,R30
                 ; 0000 014C 
                 ; 0000 014D   LOW_RANGE;
0001ce 988d      	CBI  0x11,5
0001cf 9895      	CBI  0x12,5
                 ; 0000 014E 
                 ; 0000 014F   measure_state = STATE_LOW_THRESH;
0001d0 e0e1      	LDI  R30,LOW(1)
0001d1 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0150 
                 ; 0000 0151   /* High or medium threshold */
                 ; 0000 0152   if (rangemode & RANGE_HIGH_THRESH)
0001d3 fe50      	SBRS R5,0
0001d4 c002      	RJMP _0x2D
                 ; 0000 0153     set_admux = ADMUX_HIGH;
0001d5 e0e3      	LDI  R30,LOW(3)
0001d6 c001      	RJMP _0x68
                 ; 0000 0154   else
                 _0x2D:
                 ; 0000 0155     set_admux = ADMUX_MEDIUM;
0001d7 e0e2      	LDI  R30,LOW(2)
                 _0x68:
0001d8 93e0 021d 	STS  _set_admux,R30
                 ; 0000 0156 
                 ; 0000 0157   /* Apply step */
                 ; 0000 0158   LED_ON;
0001da 9894      	CBI  0x12,4
                 ; 0000 0159   DISCHARGE_OFF;
0001db 988e      	CBI  0x11,6
                 ; 0000 015A 
                 ; 0000 015B   if (rangemode & RANGE_AUTO)
0001dc fe52      	SBRS R5,2
0001dd c023      	RJMP _0x2F
                 ; 0000 015C   {
                 ; 0000 015D 
                 ; 0000 015E     /* Autorange: See if low range produces something before LOW_RANGE_TIMEOUT ms */
                 ; 0000 015F     i = 0;
                +
0001de e000     +LDI R16 , LOW ( 0 )
0001df e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0160     while ((measure_state == STATE_LOW_THRESH) && (++i < LOW_RANGE_TIMEOUT))
                 _0x30:
0001e0 d24a      	RCALL SUBOPT_0x0
0001e1 30a1      	CPI  R26,LOW(0x1)
0001e2 f439      	BRNE _0x33
0001e3 01f8      	MOVW R30,R16
0001e4 9631      	ADIW R30,1
0001e5 018f      	MOVW R16,R30
0001e6 3fe4      	CPI  R30,LOW(0x1F4)
0001e7 e0a1      	LDI  R26,HIGH(0x1F4)
0001e8 07fa      	CPC  R31,R26
0001e9 f008      	BRLO _0x34
                 _0x33:
0001ea c006      	RJMP _0x32
                 _0x34:
                 ; 0000 0161     {
                 ; 0000 0162       delay_ms(1);
0001eb d282      	RCALL SUBOPT_0xA
                 ; 0000 0163 
                 ; 0000 0164       /* This value must be checked in every loop */
                 ; 0000 0165       if (BUTTON_PUSHED)
0001ec 9982      	SBIC 0x10,2
0001ed c002      	RJMP _0x35
                 ; 0000 0166         return 0;
0001ee d282      	RCALL SUBOPT_0xB
0001ef c045      	RJMP _0x20C0005
                 ; 0000 0167     }
                 _0x35:
0001f0 cfef      	RJMP _0x30
                 _0x32:
                 ; 0000 0168 
                 ; 0000 0169     if (i >= LOW_RANGE_TIMEOUT)
                +
0001f1 3f04     +CPI R16 , LOW ( 500 )
0001f2 e0e1     +LDI R30 , HIGH ( 500 )
0001f3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,500
0001f4 f048      	BRLO _0x36
                 ; 0000 016A     {
                 ; 0000 016B       /* low range timeout, go to high range (better discharge a little first) */
                 ; 0000 016C       DISCHARGE_ON;
0001f5 9a8e      	SBI  0x11,6
                 ; 0000 016D       delay_ms(EXTRA_DISCHARGE_MS);
0001f6 e6a4      	LDI  R26,LOW(100)
0001f7 d27e      	RCALL SUBOPT_0xC
                 ; 0000 016E       DISCHARGE_OFF;
0001f8 988e      	CBI  0x11,6
                 ; 0000 016F       HIGH_RANGE;
0001f9 9a95      	SBI  0x12,5
0001fa 9a8d      	SBI  0x11,5
                 ; 0000 0170       rangemode |= RANGE_HIGH;
0001fb e0e2      	LDI  R30,LOW(2)
0001fc 2a5e      	OR   R5,R30
                 ; 0000 0171     }
                 ; 0000 0172     else
0001fd c002      	RJMP _0x37
                 _0x36:
                 ; 0000 0173     {
                 ; 0000 0174       /* low range was ok, set flag accordingly */
                 ; 0000 0175       rangemode &= ~RANGE_HIGH;
0001fe efed      	LDI  R30,LOW(253)
0001ff 225e      	AND  R5,R30
                 ; 0000 0176     }
                 _0x37:
                 ; 0000 0177   }
                 ; 0000 0178   else if (rangemode & RANGE_HIGH)
000200 c004      	RJMP _0x38
                 _0x2F:
000201 fe51      	SBRS R5,1
000202 c002      	RJMP _0x39
                 ; 0000 0179   {
                 ; 0000 017A     HIGH_RANGE;
000203 9a95      	SBI  0x12,5
000204 9a8d      	SBI  0x11,5
                 ; 0000 017B   }
                 ; 0000 017C 
                 ; 0000 017D   /* Wait for completion, timing out after HIGH_RANGE_TIMEOUT */
                 ; 0000 017E   i = 0;
                 _0x39:
                 _0x38:
                +
000205 e000     +LDI R16 , LOW ( 0 )
000206 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 017F   while ((measure_state != STATE_DONE) && (++i < HIGH_RANGE_TIMEOUT))
                 _0x3A:
000207 d223      	RCALL SUBOPT_0x0
000208 30a3      	CPI  R26,LOW(0x3)
000209 f039      	BREQ _0x3D
00020a 01f8      	MOVW R30,R16
00020b 9631      	ADIW R30,1
00020c 018f      	MOVW R16,R30
00020d 31e0      	CPI  R30,LOW(0x2710)
00020e e2a7      	LDI  R26,HIGH(0x2710)
00020f 07fa      	CPC  R31,R26
000210 f008      	BRLO _0x3E
                 _0x3D:
000211 c006      	RJMP _0x3C
                 _0x3E:
                 ; 0000 0180   {
                 ; 0000 0181     delay_ms(1);
000212 d25b      	RCALL SUBOPT_0xA
                 ; 0000 0182 
                 ; 0000 0183     /* This value must be checked in every loop */
                 ; 0000 0184     if (BUTTON_PUSHED)
000213 9982      	SBIC 0x10,2
000214 c002      	RJMP _0x3F
                 ; 0000 0185       return 0;
000215 d25b      	RCALL SUBOPT_0xB
000216 c01e      	RJMP _0x20C0005
                 ; 0000 0186   }
                 _0x3F:
000217 cfef      	RJMP _0x3A
                 _0x3C:
                 ; 0000 0187 
                 ; 0000 0188   /* Done, discharge cap now */
                 ; 0000 0189   LOW_RANGE;
000218 988d      	CBI  0x11,5
000219 9895      	CBI  0x12,5
                 ; 0000 018A   DISCHARGE_ON;
00021a 9a8e      	SBI  0x11,6
                 ; 0000 018B   LED_OFF;
00021b 9a94      	SBI  0x12,4
                 ; 0000 018C 
                 ; 0000 018D   if (measure_state != STATE_DONE)
00021c d20e      	RCALL SUBOPT_0x0
00021d 30a3      	CPI  R26,LOW(0x3)
00021e f019      	BREQ _0x40
                 ; 0000 018E     rangemode |= RANGE_OVERFLOW;
00021f e0e8      	LDI  R30,LOW(8)
000220 2a5e      	OR   R5,R30
                 ; 0000 018F   else
000221 c002      	RJMP _0x41
                 _0x40:
                 ; 0000 0190     rangemode &= ~RANGE_OVERFLOW;
000222 efe7      	LDI  R30,LOW(247)
000223 225e      	AND  R5,R30
                 ; 0000 0191 
                 ; 0000 0192   measure_state = STATE_IDLE;
                 _0x41:
000224 e0e0      	LDI  R30,LOW(0)
000225 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0193 
                 ; 0000 0194   return ((unsigned long)timer_highword << 16) + TIMER_VALUE;
000227 91e0 021a 	LDS  R30,_timer_highword
000229 91f0 021b 	LDS  R31,_timer_highword+1
00022b 2766      	CLR  R22
00022c 2777      	CLR  R23
00022d d300      	RCALL __LSLD16
00022e 01df      	MOVW R26,R30
00022f 01cb      	MOVW R24,R22
000230 b5ec      	IN   R30,0x2C
000231 b5fd      	IN   R31,0x2C+1
000232 2766      	CLR  R22
000233 2777      	CLR  R23
000234 d2d0      	RCALL __ADDD12
                 _0x20C0005:
000235 9109      	LD   R16,Y+
000236 9119      	LD   R17,Y+
000237 9508      	RET
                 ; 0000 0195 }
                 ; .FEND
                 ;
                 ;/*
                 ;   This function deals with value according to the global rangemode flag,
                 ;   and shows the result on LCD.
                 ;
                 ;   LCD should preferably be cleared.
                 ;
                 ;   Routine is rather slow
                 ;*/
                 ;
                 ;void calc_and_show(long value)
                 ; 0000 01A1 {
                 _calc_and_show:
                 ; .FSTART _calc_and_show
                 ; 0000 01A2   unsigned char b;
                 ; 0000 01A3   unsigned long l;
                 ; 0000 01A4 
                 ; 0000 01A5   if (rangemode & RANGE_AUTO)
000238 d36c      	RCALL __PUTPARD2
000239 9724      	SBIW R28,4
00023a 931a      	ST   -Y,R17
                 ;	value -> Y+5
                 ;	b -> R17
                 ;	l -> Y+1
00023b fe52      	SBRS R5,2
00023c c003      	RJMP _0x42
                 ; 0000 01A6     lcd_string("Auto ", 0);
                +
00023d ebe5     +LDI R30 , LOW ( _0x43 + ( 0 ) )
00023e e0f1     +LDI R31 , HIGH ( _0x43 + ( 0 ) )
                 	__POINTW1MN _0x43,0
00023f c002      	RJMP _0x69
                 ; 0000 01A7   else
                 _0x42:
                 ; 0000 01A8     lcd_string("Force", 0);
                +
000240 ebeb     +LDI R30 , LOW ( _0x43 + ( 6 ) )
000241 e0f1     +LDI R31 , HIGH ( _0x43 + ( 6 ) )
                 	__POINTW1MN _0x43,6
                 _0x69:
000242 93fa      	ST   -Y,R31
000243 93ea      	ST   -Y,R30
000244 e0a0      	LDI  R26,LOW(0)
000245 deff      	RCALL _lcd_string
                 ; 0000 01A9 
                 ; 0000 01AA   if (rangemode & RANGE_HIGH)
000246 fe51      	SBRS R5,1
000247 c003      	RJMP _0x45
                 ; 0000 01AB     lcd_string(" high", 16);
                +
000248 ece1     +LDI R30 , LOW ( _0x43 + ( 12 ) )
000249 e0f1     +LDI R31 , HIGH ( _0x43 + ( 12 ) )
                 	__POINTW1MN _0x43,12
00024a c002      	RJMP _0x6A
                 ; 0000 01AC   else
                 _0x45:
                 ; 0000 01AD     lcd_string(" low ", 16);
                +
00024b ece7     +LDI R30 , LOW ( _0x43 + ( 18 ) )
00024c e0f1     +LDI R31 , HIGH ( _0x43 + ( 18 ) )
                 	__POINTW1MN _0x43,18
                 _0x6A:
00024d 93fa      	ST   -Y,R31
00024e 93ea      	ST   -Y,R30
00024f e1a0      	LDI  R26,LOW(16)
000250 def4      	RCALL _lcd_string
                 ; 0000 01AE 
                 ; 0000 01AF   if (rangemode & RANGE_OVERFLOW)
000251 fe53      	SBRS R5,3
000252 c017      	RJMP _0x47
                 ; 0000 01B0   {
                 ; 0000 01B1     /* Todo - this smarter */
                 ; 0000 01B2     lcdbuffer[0] = ' ';
000253 e2e0      	LDI  R30,LOW(32)
000254 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01B3     lcdbuffer[1] = ' ';
                +
000256 93e0 01fb+STS _lcdbuffer + ( 1 ) , R30
                 	__PUTB1MN _lcdbuffer,1
                 ; 0000 01B4     lcdbuffer[2] = ' ';
                +
000258 93e0 01fc+STS _lcdbuffer + ( 2 ) , R30
                 	__PUTB1MN _lcdbuffer,2
                 ; 0000 01B5     lcdbuffer[3] = 'E';
00025a e4e5      	LDI  R30,LOW(69)
                +
00025b 93e0 01fd+STS _lcdbuffer + ( 3 ) , R30
                 	__PUTB1MN _lcdbuffer,3
                 ; 0000 01B6     lcdbuffer[4] = 'r';
00025d e7e2      	LDI  R30,LOW(114)
                +
00025e 93e0 01fe+STS _lcdbuffer + ( 4 ) , R30
                 	__PUTB1MN _lcdbuffer,4
                 ; 0000 01B7     lcdbuffer[5] = 'r';
                +
000260 93e0 01ff+STS _lcdbuffer + ( 5 ) , R30
                 	__PUTB1MN _lcdbuffer,5
                 ; 0000 01B8     lcdbuffer[6] = 'o';
000262 e6ef      	LDI  R30,LOW(111)
                +
000263 93e0 0200+STS _lcdbuffer + ( 6 ) , R30
                 	__PUTB1MN _lcdbuffer,6
                 ; 0000 01B9     lcdbuffer[7] = 'r';
000265 e7e2      	LDI  R30,LOW(114)
                +
000266 93e0 0201+STS _lcdbuffer + ( 7 ) , R30
                 	__PUTB1MN _lcdbuffer,7
                 ; 0000 01BA     lcdbuffer[8] = ' ';
000268 e2e0      	LDI  R30,LOW(32)
000269 c03d      	RJMP _0x6B
                 ; 0000 01BB     lcdbuffer[9] = 0;
                 ; 0000 01BC   }
                 ; 0000 01BD   else
                 _0x47:
                 ; 0000 01BE   {
                 ; 0000 01BF     /* Select calibration value */
                 ; 0000 01C0     b = rangemode & 3;
00026a 2de5      	MOV  R30,R5
00026b 70e3      	ANDI R30,LOW(0x3)
00026c 2f1e      	MOV  R17,R30
                 ; 0000 01C1 
                 ; 0000 01C2     if (calib_offset[b] > value)
00026d d20a      	RCALL SUBOPT_0xD
00026e 01df      	MOVW R26,R30
00026f 01cb      	MOVW R24,R22
000270 d20b      	RCALL SUBOPT_0xE
000271 d355      	RCALL __CPD12
000272 f458      	BRSH _0x49
                 ; 0000 01C3     {
                 ; 0000 01C4       lcdbuffer[0] = '-';
000273 e2ed      	LDI  R30,LOW(45)
000274 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01C5       value = calib_offset[b] - value;
000276 d201      	RCALL SUBOPT_0xD
000277 d209      	RCALL SUBOPT_0xF
000278 d291      	RCALL __SUBD12
                +
000279 83ed     +STD Y + 5 , R30
00027a 83fe     +STD Y + 5 + 1 , R31
00027b 836f     +STD Y + 5 + 2 , R22
00027c 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 ; 0000 01C6     }
                 ; 0000 01C7     else
00027d c00a      	RJMP _0x4A
                 _0x49:
                 ; 0000 01C8     {
                 ; 0000 01C9       lcdbuffer[0] = ' ';
00027e e2e0      	LDI  R30,LOW(32)
00027f 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01CA       value = value - calib_offset[b];
000281 d1f6      	RCALL SUBOPT_0xD
000282 d1fe      	RCALL SUBOPT_0xF
000283 d28b      	RCALL __SUBD21
                +
000284 83ad     +STD Y + 5 , R26
000285 83be     +STD Y + 5 + 1 , R27
000286 838f     +STD Y + 5 + 2 , R24
000287 8798     +STD Y + 5 + 3 , R25
                 	__PUTD2S 5
                 ; 0000 01CB     }
                 _0x4A:
                 ; 0000 01CC     // sprintf(buf, "before mul : %u", 2);  // or whatever variable
                 ; 0000 01CD     // lcd_string(buf,0);
                 ; 0000 01CE     // delay_ms(1000);
                 ; 0000 01CF     MUL_LONG_SHORT_S2(value, calib[b], &l);
000288 d1f3      	RCALL SUBOPT_0xE
000289 d316      	RCALL __PUTPARD1
00028a 2fe1      	MOV  R30,R17
00028b d1fa      	RCALL SUBOPT_0x10
00028c d1ff      	RCALL SUBOPT_0x11
00028d 01de      	MOVW R26,R28
00028e 9617      	ADIW R26,7
00028f de72      	RCALL _MUL_LONG_SHORT_S2
                 ; 0000 01D0     // sprintf(buf, "after mul: %u", l);  // or whatever variable
                 ; 0000 01D1     // lcd_string(buf,0);
                 ; 0000 01D2     // delay_ms(1000);
                 ; 0000 01D3     b = long2ascii(lcdbuffer + 1, l);
                +
000290 efeb     +LDI R30 , LOW ( _lcdbuffer + ( 1 ) )
000291 e0f1     +LDI R31 , HIGH ( _lcdbuffer + ( 1 ) )
                 	__POINTW1MN _lcdbuffer,1
000292 93fa      	ST   -Y,R31
000293 93ea      	ST   -Y,R30
                +
000294 81ab     +LDD R26 , Y + 3
000295 81bc     +LDD R27 , Y + 3 + 1
000296 818d     +LDD R24 , Y + 3 + 2
000297 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
000298 dec3      	RCALL _long2ascii
000299 2f1e      	MOV  R17,R30
                 ; 0000 01D4 
                 ; 0000 01D5     /* High range shifts 1E3 */
                 ; 0000 01D6     if (rangemode & RANGE_HIGH)
00029a fc51      	SBRC R5,1
                 ; 0000 01D7       b++;
00029b 5f1f      	SUBI R17,-1
                 ; 0000 01D8 
                 ; 0000 01D9     lcdbuffer[6] = ' ';
00029c e2e0      	LDI  R30,LOW(32)
                +
00029d 93e0 0200+STS _lcdbuffer + ( 6 ) , R30
                 	__PUTB1MN _lcdbuffer,6
                 ; 0000 01DA     lcdbuffer[7] = decades[b]; /* range = 1 shifts 1E3 */
00029f 2fe1      	MOV  R30,R17
0002a0 e0f0      	LDI  R31,0
0002a1 53e3      	SUBI R30,LOW(-_decades)
0002a2 4ffe      	SBCI R31,HIGH(-_decades)
0002a3 81e0      	LD   R30,Z
                +
0002a4 93e0 0201+STS _lcdbuffer + ( 7 ) , R30
                 	__PUTB1MN _lcdbuffer,7
                 ; 0000 01DB     lcdbuffer[8] = 'F';
0002a6 e4e6      	LDI  R30,LOW(70)
                 _0x6B:
                +
0002a7 93e0 0202+STS _lcdbuffer + ( 8 ) , R30
                 	__PUTB1MN _lcdbuffer,8
                 ; 0000 01DC     lcdbuffer[9] = 0;
0002a9 e0e0      	LDI  R30,LOW(0)
                +
0002aa 93e0 0203+STS _lcdbuffer + ( 9 ) , R30
                 	__PUTB1MN _lcdbuffer,9
                 ; 0000 01DD   }
                 ; 0000 01DE     // sprintf(buf, "after ascii: %u", decades[b]); // or whatever variable
                 ; 0000 01DF     //lcd_string(buf, 0);
                 ; 0000 01E0     //delay_ms(1000);
                 ; 0000 01E1   /* Write high threshold in first line, low threshold in second */
                 ; 0000 01E2   if (rangemode & RANGE_HIGH_THRESH)
0002ac fe50      	SBRS R5,0
0002ad c002      	RJMP _0x4C
                 ; 0000 01E3     b = 7;
0002ae e017      	LDI  R17,LOW(7)
                 ; 0000 01E4   else
0002af c001      	RJMP _0x4D
                 _0x4C:
                 ; 0000 01E5     b = 23;
0002b0 e117      	LDI  R17,LOW(23)
                 ; 0000 01E6    // sprintf(buf, "%u", lcdbuffer);  // or whatever variable
                 ; 0000 01E7     //lcd_string(buf,b);
                 ; 0000 01E8   lcd_string(lcdbuffer, b);
                 _0x4D:
0002b1 efea      	LDI  R30,LOW(_lcdbuffer)
0002b2 e0f1      	LDI  R31,HIGH(_lcdbuffer)
0002b3 93fa      	ST   -Y,R31
0002b4 93ea      	ST   -Y,R30
0002b5 2fa1      	MOV  R26,R17
0002b6 de8e      	RCALL _lcd_string
                 ; 0000 01E9 
                 ; 0000 01EA }
0002b7 8118      	LDD  R17,Y+0
0002b8 9629      	ADIW R28,9
0002b9 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x43:
0001b5           	.BYTE 0x18
                 ;
                 ;void calibrate_zero(void)
                 ; 0000 01ED {
                 
                 	.CSEG
                 _calibrate_zero:
                 ; .FSTART _calibrate_zero
                 ; 0000 01EE   char oldrange = rangemode;
                 ; 0000 01EF   unsigned long l;
                 ; 0000 01F0 
                 ; 0000 01F1   rangemode = 0;
0002ba d1d7      	RCALL SUBOPT_0x12
                 ;	oldrange -> R17
                 ;	l -> Y+1
                 ; 0000 01F2 
                 ; 0000 01F3   l = measure();
                 ; 0000 01F4   l = measure();
0002bb d1e0      	RCALL SUBOPT_0x13
                 ; 0000 01F5 
                 ; 0000 01F6   calib_offset[rangemode] = l;
0002bc d1e5      	RCALL SUBOPT_0x14
                 ; 0000 01F7 
                 ; 0000 01F8   rangemode = RANGE_HIGH_THRESH;
0002bd e0e1      	LDI  R30,LOW(1)
0002be d1f0      	RCALL SUBOPT_0x15
                 ; 0000 01F9 
                 ; 0000 01FA   l = measure();
                 ; 0000 01FB   l = measure();
0002bf d1dc      	RCALL SUBOPT_0x13
                 ; 0000 01FC 
                 ; 0000 01FD   calib_offset[rangemode] = l;
0002c0 d1e1      	RCALL SUBOPT_0x14
                 ; 0000 01FE 
                 ; 0000 01FF   rangemode = oldrange;
0002c1 c02f      	RJMP _0x20C0003
                 ; 0000 0200 }
                 ; .FEND
                 ;
                 ;void calibrate(void)
                 ; 0000 0203 {
                 _calibrate:
                 ; .FSTART _calibrate
                 ; 0000 0204   char oldrange = rangemode;
                 ; 0000 0205   unsigned long value;
                 ; 0000 0206 
                 ; 0000 0207   rangemode = 0;
0002c2 d1cf      	RCALL SUBOPT_0x12
                 ;	oldrange -> R17
                 ;	value -> Y+1
                 ; 0000 0208   value = measure();
                 ; 0000 0209   value -= calib_offset[rangemode];
0002c3 d1ed      	RCALL SUBOPT_0x16
0002c4 d1f0      	RCALL SUBOPT_0x17
0002c5 d1f4      	RCALL SUBOPT_0x18
                 ; 0000 020A   calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
0002c6 d1fa      	RCALL SUBOPT_0x19
0002c7 93ff      	PUSH R31
0002c8 93ef      	PUSH R30
0002c9 d1fa      	RCALL SUBOPT_0x1A
0002ca 91af      	POP  R26
0002cb 91bf      	POP  R27
0002cc d201      	RCALL SUBOPT_0x1B
                 ; 0000 020B 
                 ; 0000 020C   rangemode = RANGE_HIGH_THRESH;
0002cd e0e1      	LDI  R30,LOW(1)
0002ce d1e0      	RCALL SUBOPT_0x15
                 ; 0000 020D   value = measure();
                 ; 0000 020E   value -= calib_offset[rangemode];
0002cf d1e1      	RCALL SUBOPT_0x16
0002d0 d1e4      	RCALL SUBOPT_0x17
0002d1 d1e8      	RCALL SUBOPT_0x18
                 ; 0000 020F   calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
0002d2 d1ee      	RCALL SUBOPT_0x19
0002d3 93ff      	PUSH R31
0002d4 93ef      	PUSH R30
0002d5 d1ee      	RCALL SUBOPT_0x1A
0002d6 91af      	POP  R26
0002d7 91bf      	POP  R27
0002d8 d1f5      	RCALL SUBOPT_0x1B
                 ; 0000 0210 
                 ; 0000 0211   rangemode = RANGE_HIGH;
0002d9 e0e2      	LDI  R30,LOW(2)
0002da d1d4      	RCALL SUBOPT_0x15
                 ; 0000 0212   value = measure();
                 ; 0000 0213   value -= calib_offset[rangemode];
0002db d1d5      	RCALL SUBOPT_0x16
0002dc d1d8      	RCALL SUBOPT_0x17
0002dd d1dc      	RCALL SUBOPT_0x18
                 ; 0000 0214   calib[rangemode] = CALIB_HIGH / value + 1;
0002de d1e2      	RCALL SUBOPT_0x19
0002df 93ff      	PUSH R31
0002e0 93ef      	PUSH R30
0002e1 d1ef      	RCALL SUBOPT_0x1C
0002e2 91af      	POP  R26
0002e3 91bf      	POP  R27
0002e4 d1e9      	RCALL SUBOPT_0x1B
                 ; 0000 0215 
                 ; 0000 0216   rangemode = RANGE_HIGH | RANGE_HIGH_THRESH;
0002e5 e0e3      	LDI  R30,LOW(3)
0002e6 d1c8      	RCALL SUBOPT_0x15
                 ; 0000 0217   value = measure();
                 ; 0000 0218   value -= calib_offset[rangemode];
0002e7 d1c9      	RCALL SUBOPT_0x16
0002e8 d1cc      	RCALL SUBOPT_0x17
0002e9 d1d0      	RCALL SUBOPT_0x18
                 ; 0000 0219   calib[rangemode] = CALIB_HIGH / value + 1;
0002ea d1d6      	RCALL SUBOPT_0x19
0002eb 93ff      	PUSH R31
0002ec 93ef      	PUSH R30
0002ed d1e3      	RCALL SUBOPT_0x1C
0002ee 91af      	POP  R26
0002ef 91bf      	POP  R27
0002f0 d1dd      	RCALL SUBOPT_0x1B
                 ; 0000 021A 
                 ; 0000 021B   rangemode = oldrange;
                 _0x20C0003:
0002f1 2e51      	MOV  R5,R17
                 ; 0000 021C }
0002f2 8118      	LDD  R17,Y+0
                 _0x20C0004:
0002f3 9625      	ADIW R28,5
0002f4 9508      	RET
                 ; .FEND
                 ;
                 ;/* Hold-down-button menu implementation: */
                 ;
                 ;char menu(void)
                 ; 0000 0221 {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 0222   unsigned char i;
                 ; 0000 0223 
                 ; 0000 0224   lcd_clear();
0002f5 931a      	ST   -Y,R17
                 ;	i -> R17
0002f6 d0b5      	RCALL _lcd_clear
                 ; 0000 0225 
                 ; 0000 0226   for (i = 0; i < MENU_ITEMS; i++)
0002f7 e010      	LDI  R17,LOW(0)
                 _0x4F:
0002f8 3016      	CPI  R17,6
0002f9 f450      	BRSH _0x50
                 ; 0000 0227   {
                 ; 0000 0228     lcd_string(menu_item[i], 0);
0002fa d1e1      	RCALL SUBOPT_0x1D
0002fb e0a0      	LDI  R26,LOW(0)
0002fc de48      	RCALL _lcd_string
                 ; 0000 0229     delay_ms(MENU_SPEED);
0002fd e2a0      	LDI  R26,LOW(800)
0002fe e0b3      	LDI  R27,HIGH(800)
0002ff d1fb      	RCALL _delay_ms
                 ; 0000 022A 
                 ; 0000 022B     if (!BUTTON_PUSHED)
000300 9982      	SBIC 0x10,2
                 ; 0000 022C       break;
000301 c002      	RJMP _0x50
                 ; 0000 022D   }
000302 5f1f      	SUBI R17,-1
000303 cff4      	RJMP _0x4F
                 _0x50:
                 ; 0000 022E 
                 ; 0000 022F   if (i == MENU_ITEMS)
000304 3016      	CPI  R17,6
000305 f429      	BRNE _0x52
                 ; 0000 0230   {
                 ; 0000 0231     /* Just clear display, if user went out of menu */
                 ; 0000 0232     lcd_clear();
000306 d0a5      	RCALL _lcd_clear
                 ; 0000 0233 
                 ; 0000 0234     /* Wait for release of button */
                 ; 0000 0235     while (BUTTON_PUSHED)
                 _0x53:
000307 9b82      	SBIS 0x10,2
                 ; 0000 0236       ;
000308 cffe      	RJMP _0x53
                 ; 0000 0237     delay_ms(10);
000309 e0aa      	LDI  R26,LOW(10)
00030a c00b      	RJMP _0x6C
                 ; 0000 0238   }
                 ; 0000 0239   else
                 _0x52:
                 ; 0000 023A   {
                 ; 0000 023B     /* Flash selected item */
                 ; 0000 023C     lcd_clear();
00030b d0a0      	RCALL _lcd_clear
                 ; 0000 023D     delay_ms(MENU_SPEED >> 2);
00030c eca8      	LDI  R26,LOW(200)
00030d d168      	RCALL SUBOPT_0xC
                 ; 0000 023E     lcd_string(menu_item[i], 0);
00030e d1cd      	RCALL SUBOPT_0x1D
00030f e0a0      	LDI  R26,LOW(0)
000310 de34      	RCALL _lcd_string
                 ; 0000 023F     delay_ms(MENU_SPEED >> 1);
000311 e9a0      	LDI  R26,LOW(400)
000312 e0b1      	LDI  R27,HIGH(400)
000313 d1e7      	RCALL _delay_ms
                 ; 0000 0240     lcd_clear();
000314 d097      	RCALL _lcd_clear
                 ; 0000 0241     delay_ms(MENU_SPEED >> 2);
000315 eca8      	LDI  R26,LOW(200)
                 _0x6C:
000316 e0b0      	LDI  R27,0
000317 d1e3      	RCALL _delay_ms
                 ; 0000 0242   }
                 ; 0000 0243 
                 ; 0000 0244   return i;
000318 2fe1      	MOV  R30,R17
000319 9119      	LD   R17,Y+
00031a 9508      	RET
                 ; 0000 0245 }
                 ; .FEND
                 ;
                 ;void init(void)
                 ; 0000 0248 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0249 
                 ; 0000 024A   /* Set datadirections */
                 ; 0000 024B   DDRD = (1 << 4);    /* led output, rest input */
00031b e1e0      	LDI  R30,LOW(16)
00031c bbe1      	OUT  0x11,R30
                 ; 0000 024C   PORTD &= ~(1 << 6); /* AIN0 port must be 0 */
00031d 9896      	CBI  0x12,6
                 ; 0000 024D 
                 ; 0000 024E   /* Enable button pull up resistor */
                 ; 0000 024F   PORTD |= (1 << 2);
00031e 9a92      	SBI  0x12,2
                 ; 0000 0250 
                 ; 0000 0251   /* Setup timer1 to normal operation */
                 ; 0000 0252   TCCR1A = 0;
00031f e0e0      	LDI  R30,LOW(0)
000320 bdef      	OUT  0x2F,R30
                 ; 0000 0253   TCCR1B = 0;
000321 d10c      	RCALL SUBOPT_0x1
                 ; 0000 0254   TIMSK = (1 << TOIE1); //(mega8)
000322 e0e4      	LDI  R30,LOW(4)
000323 bfe9      	OUT  0x39,R30
                 ; 0000 0255   // TIMSK1 = (1<<TOIE1); //(mega48/88/168)
                 ; 0000 0256 
                 ; 0000 0257   /* Setup analog comperator to generate rising edge interrupt */
                 ; 0000 0258   ACSR = (1 << ACIS0) | (1 << ACIS1) | (1 << ACIE);
000324 e0eb      	LDI  R30,LOW(11)
000325 b9e8      	OUT  0x8,R30
                 ; 0000 0259 
                 ; 0000 025A   /* Setup analog comperator to use ADMUX */
                 ; 0000 025B   ADMUX = ADMUX_LOW;
000326 e0e1      	LDI  R30,LOW(1)
000327 b9e7      	OUT  0x7,R30
                 ; 0000 025C   SFIOR |= (1 << ACME);
000328 b7e0      	IN   R30,0x30
000329 60e8      	ORI  R30,8
00032a bfe0      	OUT  0x30,R30
                 ; 0000 025D   // ADCSRB |= (1<<ACME);
                 ; 0000 025E   // DIDR1 |= (1<<AIN1D)|(1<<AIN0D);
                 ; 0000 025F }
00032b 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0262 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0263 
                 ; 0000 0264   // Declare your local variables here
                 ; 0000 0265   unsigned long l;
                 ; 0000 0266 
                 ; 0000 0267   // Input/Output Ports initialization
                 ; 0000 0268   // Port B initialization
                 ; 0000 0269   // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 026A   DDRB = (1 << DDB7) | (1 << DDB6) | (1 << DDB5) | (1 << DDB4) | (1 << DDB3) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
00032c 9724      	SBIW R28,4
                 ;	l -> Y+0
00032d efef      	LDI  R30,LOW(255)
00032e bbe7      	OUT  0x17,R30
                 ; 0000 026B   // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 026C   PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1)  ...
00032f e0e0      	LDI  R30,LOW(0)
000330 bbe8      	OUT  0x18,R30
                 ; 0000 026D 
                 ; 0000 026E   // Port C initialization
                 ; 0000 026F   // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0270   DDRC = (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0);
000331 bbe4      	OUT  0x14,R30
                 ; 0000 0271   // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0272   PORTC = (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);
000332 bbe5      	OUT  0x15,R30
                 ; 0000 0273 
                 ; 0000 0274   // Port D initialization
                 ; 0000 0275   // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0276   DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0);
000333 bbe1      	OUT  0x11,R30
                 ; 0000 0277   // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0278   PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1)  ...
000334 bbe2      	OUT  0x12,R30
                 ; 0000 0279 
                 ; 0000 027A   // Timer/Counter 0 initialization
                 ; 0000 027B   // Clock source: System Clock
                 ; 0000 027C   // Clock value: Timer 0 Stopped
                 ; 0000 027D   TCCR0 = (0 << CS02) | (0 << CS01) | (0 << CS00);
000335 bfe3      	OUT  0x33,R30
                 ; 0000 027E   TCNT0 = 0x00;
000336 bfe2      	OUT  0x32,R30
                 ; 0000 027F 
                 ; 0000 0280   // Timer/Counter 1 initialization
                 ; 0000 0281   // Clock source: System Clock
                 ; 0000 0282   // Clock value: Timer1 Stopped
                 ; 0000 0283   // Mode: Normal top=0xFFFF
                 ; 0000 0284   // OC1A output: Disconnected
                 ; 0000 0285   // OC1B output: Disconnected
                 ; 0000 0286   // Noise Canceler: Off
                 ; 0000 0287   // Input Capture on Falling Edge
                 ; 0000 0288   // Timer1 Overflow Interrupt: Off
                 ; 0000 0289   // Input Capture Interrupt: Off
                 ; 0000 028A   // Compare A Match Interrupt: Off
                 ; 0000 028B   // Compare B Match Interrupt: Off
                 ; 0000 028C   TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
000337 bdef      	OUT  0x2F,R30
                 ; 0000 028D   TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
000338 d0f5      	RCALL SUBOPT_0x1
                 ; 0000 028E   TCNT1H = 0x00;
000339 e0e0      	LDI  R30,LOW(0)
00033a bded      	OUT  0x2D,R30
                 ; 0000 028F   TCNT1L = 0x00;
00033b bdec      	OUT  0x2C,R30
                 ; 0000 0290   ICR1H = 0x00;
00033c bde7      	OUT  0x27,R30
                 ; 0000 0291   ICR1L = 0x00;
00033d bde6      	OUT  0x26,R30
                 ; 0000 0292   OCR1AH = 0x00;
00033e bdeb      	OUT  0x2B,R30
                 ; 0000 0293   OCR1AL = 0x00;
00033f bdea      	OUT  0x2A,R30
                 ; 0000 0294   OCR1BH = 0x00;
000340 bde9      	OUT  0x29,R30
                 ; 0000 0295   OCR1BL = 0x00;
000341 bde8      	OUT  0x28,R30
                 ; 0000 0296 
                 ; 0000 0297   // Timer/Counter 2 initialization
                 ; 0000 0298   // Clock source: System Clock
                 ; 0000 0299   // Clock value: Timer2 Stopped
                 ; 0000 029A   // Mode: Normal top=0xFF
                 ; 0000 029B   // OC2 output: Disconnected
                 ; 0000 029C   ASSR = 0 << AS2;
000342 bde2      	OUT  0x22,R30
                 ; 0000 029D   TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
000343 bde5      	OUT  0x25,R30
                 ; 0000 029E   TCNT2 = 0x00;
000344 bde4      	OUT  0x24,R30
                 ; 0000 029F   OCR2 = 0x00;
000345 bde3      	OUT  0x23,R30
                 ; 0000 02A0 
                 ; 0000 02A1   // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 02A2   TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << TOIE0);
000346 bfe9      	OUT  0x39,R30
                 ; 0000 02A3 
                 ; 0000 02A4   // External Interrupt(s) initialization
                 ; 0000 02A5   // INT0: Off
                 ; 0000 02A6   // INT1: Off
                 ; 0000 02A7   MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
000347 bfe5      	OUT  0x35,R30
                 ; 0000 02A8 
                 ; 0000 02A9   // USART initialization
                 ; 0000 02AA   // USART disabled
                 ; 0000 02AB   UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 << TX ...
000348 b9ea      	OUT  0xA,R30
                 ; 0000 02AC 
                 ; 0000 02AD   // Analog Comparator initialization
                 ; 0000 02AE   // Analog Comparator: Off
                 ; 0000 02AF   // The Analog Comparator's positive input is
                 ; 0000 02B0   // connected to the AIN0 pin
                 ; 0000 02B1   // The Analog Comparator's negative input is
                 ; 0000 02B2   // connected to the AIN1 pin
                 ; 0000 02B3   ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
000349 e8e0      	LDI  R30,LOW(128)
00034a b9e8      	OUT  0x8,R30
                 ; 0000 02B4   SFIOR = (0 << ACME);
00034b e0e0      	LDI  R30,LOW(0)
00034c bfe0      	OUT  0x30,R30
                 ; 0000 02B5 
                 ; 0000 02B6   // ADC initialization
                 ; 0000 02B7   // ADC disabled
                 ; 0000 02B8   ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADFR) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 << ADP ...
00034d b9e6      	OUT  0x6,R30
                 ; 0000 02B9 
                 ; 0000 02BA   // SPI initialization
                 ; 0000 02BB   // SPI disabled
                 ; 0000 02BC   SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
00034e b9ed      	OUT  0xD,R30
                 ; 0000 02BD 
                 ; 0000 02BE   // TWI initialization
                 ; 0000 02BF   // TWI disabled
                 ; 0000 02C0   TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
00034f bfe6      	OUT  0x36,R30
                 ; 0000 02C1 
                 ; 0000 02C2   lcd_init(16);
000350 e1a0      	LDI  R26,LOW(16)
000351 d08c      	RCALL _lcd_init
                 ; 0000 02C3 
                 ; 0000 02C4   init(); // init peripherals/adc/timers/etc..
000352 dfc8      	RCALL _init
                 ; 0000 02C5 
                 ; 0000 02C6   eeprom_read(); // reads calibration values or settings from EEPROM.
000353 ddd3      	RCALL _eeprom_read
                 ; 0000 02C7 
                 ; 0000 02C8 #asm("sei"); // enables global interrupts
000354 9478      	sei
                 ; 0000 02C9 
                 ; 0000 02CA   LED_OFF; // turns off an LED (probably an indicator for measurement status).
000355 9a94      	SBI  0x12,4
                 ; 0000 02CB 
                 ; 0000 02CC   rangemode = RANGE_AUTO; // setting Up the Measurement Mode
000356 e0e4      	LDI  R30,LOW(4)
000357 2e5e      	MOV  R5,R30
                 ; 0000 02CD 
                 ; 0000 02CE   while (1)
                 _0x57:
                 ; 0000 02CF   {
                 ; 0000 02D0     /* Toggle high/low threshold */
                 ; 0000 02D1     rangemode ^= RANGE_HIGH_THRESH;
000358 e0e1      	LDI  R30,LOW(1)
000359 265e      	EOR  R5,R30
                 ; 0000 02D2     l = measure();
00035a de53      	RCALL _measure
00035b d23a      	RCALL __PUTD1S0
                 ; 0000 02D3 
                 ; 0000 02D4     // sprintf(buf, "ADC: %u", l);  // or whatever variable
                 ; 0000 02D5     // lcd_string(buf,0);
                 ; 0000 02D6     // delay_ms(1000);
                 ; 0000 02D7     if (BUTTON_PUSHED)
00035c 9982      	SBIC 0x10,2
00035d c022      	RJMP _0x5A
                 ; 0000 02D8     {
                 ; 0000 02D9       /* Stop any cap. charging */
                 ; 0000 02DA       LED_OFF;
00035e 9a94      	SBI  0x12,4
                 ; 0000 02DB       LOW_RANGE;
00035f 988d      	CBI  0x11,5
000360 9895      	CBI  0x12,5
                 ; 0000 02DC       DISCHARGE_ON;
000361 9a8e      	SBI  0x11,6
                 ; 0000 02DD 
                 ; 0000 02DE       /* Menu implementation */
                 ; 0000 02DF       switch (menu())
000362 df92      	RCALL _menu
                 ; 0000 02E0       {
                 ; 0000 02E1       case 0: /* auto range */
000363 30e0      	CPI  R30,0
000364 f419      	BRNE _0x5E
                 ; 0000 02E2         rangemode |= RANGE_AUTO;
000365 e0e4      	LDI  R30,LOW(4)
000366 2a5e      	OR   R5,R30
                 ; 0000 02E3         break;
000367 c017      	RJMP _0x5D
                 ; 0000 02E4       case 1: /* low range */
                 _0x5E:
000368 30e1      	CPI  R30,LOW(0x1)
000369 f419      	BRNE _0x5F
                 ; 0000 02E5         rangemode &= ~(RANGE_AUTO | RANGE_HIGH);
00036a efe9      	LDI  R30,LOW(249)
00036b 225e      	AND  R5,R30
                 ; 0000 02E6         break;
00036c c012      	RJMP _0x5D
                 ; 0000 02E7       case 2: /* high range */
                 _0x5F:
00036d 30e2      	CPI  R30,LOW(0x2)
00036e f429      	BRNE _0x60
                 ; 0000 02E8         rangemode &= ~RANGE_AUTO;
00036f efeb      	LDI  R30,LOW(251)
000370 225e      	AND  R5,R30
                 ; 0000 02E9         rangemode |= RANGE_HIGH;
000371 e0e2      	LDI  R30,LOW(2)
000372 2a5e      	OR   R5,R30
                 ; 0000 02EA         break;
000373 c00b      	RJMP _0x5D
                 ; 0000 02EB       case 3:
                 _0x60:
000374 30e3      	CPI  R30,LOW(0x3)
000375 f411      	BRNE _0x61
                 ; 0000 02EC         calibrate_zero();
000376 df43      	RCALL _calibrate_zero
                 ; 0000 02ED         break;
000377 c007      	RJMP _0x5D
                 ; 0000 02EE       case 4:
                 _0x61:
000378 30e4      	CPI  R30,LOW(0x4)
000379 f411      	BRNE _0x62
                 ; 0000 02EF         calibrate();
00037a df47      	RCALL _calibrate
                 ; 0000 02F0         break;
00037b c003      	RJMP _0x5D
                 ; 0000 02F1       case 5:
                 _0x62:
00037c 30e5      	CPI  R30,LOW(0x5)
00037d f409      	BRNE _0x5D
                 ; 0000 02F2         eeprom_write();
00037e ddb9      	RCALL _eeprom_write
                 ; 0000 02F3         break;
                 ; 0000 02F4       }
                 _0x5D:
                 ; 0000 02F5     }
                 ; 0000 02F6     else
00037f c002      	RJMP _0x64
                 _0x5A:
                 ; 0000 02F7       calc_and_show(l);
000380 d210      	RCALL __GETD2S0
000381 deb6      	RCALL _calc_and_show
                 ; 0000 02F8   }
                 _0x64:
000382 cfd5      	RJMP _0x57
                 ; 0000 02F9 }
                 _0x65:
000383 cfff      	RJMP _0x65
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000384 93aa      	ST   -Y,R26
000385 b3e8      	IN   R30,0x18
000386 7fe0      	ANDI R30,LOW(0xF0)
000387 2fae      	MOV  R26,R30
000388 81e8      	LD   R30,Y
000389 95e2      	SWAP R30
00038a 70ef      	ANDI R30,0xF
00038b 2bea      	OR   R30,R26
00038c bbe8      	OUT  0x18,R30
00038d d155      	RCALL SUBOPT_0x1E
00038e 9ac4      	SBI  0x18,4
00038f d153      	RCALL SUBOPT_0x1E
000390 98c4      	CBI  0x18,4
000391 d151      	RCALL SUBOPT_0x1E
000392 c072      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000393 93aa      	ST   -Y,R26
000394 81a8      	LD   R26,Y
000395 dfee      	RCALL __lcd_write_nibble_G100
000396 81e8          ld    r30,y
000397 95e2          swap  r30
000398 83e8          st    y,r30
000399 81a8      	LD   R26,Y
00039a dfe9      	RCALL __lcd_write_nibble_G100
                +
00039b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00039c 958a     +DEC R24
00039d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00039e c066      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00039f 93aa      	ST   -Y,R26
0003a0 81e8      	LD   R30,Y
0003a1 e0f0      	LDI  R31,0
0003a2 5bee      	SUBI R30,LOW(-__base_y_G100)
0003a3 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0003a4 81e0      	LD   R30,Z
0003a5 81a9      	LDD  R26,Y+1
0003a6 0fae      	ADD  R26,R30
0003a7 dfeb      	RCALL __lcd_write_data
0003a8 8049      	LDD  R4,Y+1
0003a9 8078      	LDD  R7,Y+0
0003aa 9622      	ADIW R28,2
0003ab 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003ac e0a2      	LDI  R26,LOW(2)
0003ad dfe5      	RCALL __lcd_write_data
0003ae e0a3      	LDI  R26,LOW(3)
0003af d0c6      	RCALL SUBOPT_0xC
0003b0 e0ac      	LDI  R26,LOW(12)
0003b1 dfe1      	RCALL __lcd_write_data
0003b2 e0a1      	LDI  R26,LOW(1)
0003b3 dfdf      	RCALL __lcd_write_data
0003b4 e0a3      	LDI  R26,LOW(3)
0003b5 d0c0      	RCALL SUBOPT_0xC
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 2e7e      	MOV  R7,R30
0003b8 2e4e      	MOV  R4,R30
0003b9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003ba 93aa      	ST   -Y,R26
0003bb 81a8      	LD   R26,Y
0003bc 30aa      	CPI  R26,LOW(0xA)
0003bd f011      	BREQ _0x2000005
0003be 1446      	CP   R4,R6
0003bf f040      	BRLO _0x2000004
                 _0x2000005:
0003c0 e0e0      	LDI  R30,LOW(0)
0003c1 93ea      	ST   -Y,R30
0003c2 9473      	INC  R7
0003c3 2da7      	MOV  R26,R7
0003c4 dfda      	RCALL _lcd_gotoxy
0003c5 81a8      	LD   R26,Y
0003c6 30aa      	CPI  R26,LOW(0xA)
0003c7 f1e9      	BREQ _0x20C0002
                 _0x2000004:
0003c8 9443      	INC  R4
0003c9 9ac5      	SBI  0x18,5
0003ca 81a8      	LD   R26,Y
0003cb dfc7      	RCALL __lcd_write_data
0003cc 98c5      	CBI  0x18,5
0003cd c037      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0003ce d062      	RCALL SUBOPT_0x2
0003cf 931a      	ST   -Y,R17
                 _0x2000008:
0003d0 81a9      	LDD  R26,Y+1
0003d1 81ba      	LDD  R27,Y+1+1
0003d2 91ed      	LD   R30,X+
0003d3 83a9      	STD  Y+1,R26
0003d4 83ba      	STD  Y+1+1,R27
0003d5 2f1e      	MOV  R17,R30
0003d6 30e0      	CPI  R30,0
0003d7 f019      	BREQ _0x200000A
0003d8 2fa1      	MOV  R26,R17
0003d9 dfe0      	RCALL _lcd_putchar
0003da cff5      	RJMP _0x2000008
                 _0x200000A:
0003db 8118      	LDD  R17,Y+0
0003dc 9623      	ADIW R28,3
0003dd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0003de 93aa      	ST   -Y,R26
0003df b3e7      	IN   R30,0x17
0003e0 60ef      	ORI  R30,LOW(0xF)
0003e1 bbe7      	OUT  0x17,R30
0003e2 9abc      	SBI  0x17,4
0003e3 9abd      	SBI  0x17,5
0003e4 9abe      	SBI  0x17,6
0003e5 98c4      	CBI  0x18,4
0003e6 98c5      	CBI  0x18,5
0003e7 98c6      	CBI  0x18,6
0003e8 8068      	LDD  R6,Y+0
0003e9 81e8      	LD   R30,Y
0003ea 58e0      	SUBI R30,-LOW(128)
                +
0003eb 93e0 0244+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0003ed 81e8      	LD   R30,Y
0003ee 54e0      	SUBI R30,-LOW(192)
                +
0003ef 93e0 0245+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0003f1 e1a4      	LDI  R26,LOW(20)
0003f2 d083      	RCALL SUBOPT_0xC
0003f3 d0f3      	RCALL SUBOPT_0x1F
0003f4 d0f2      	RCALL SUBOPT_0x1F
0003f5 d0f1      	RCALL SUBOPT_0x1F
0003f6 e2a0      	LDI  R26,LOW(32)
0003f7 df8c      	RCALL __lcd_write_nibble_G100
                +
0003f8 ec88     +LDI R24 , LOW ( 200 )
0003f9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003fa 9701     +SBIW R24 , 1
0003fb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003fc e2a8      	LDI  R26,LOW(40)
0003fd df95      	RCALL __lcd_write_data
0003fe e0a4      	LDI  R26,LOW(4)
0003ff df93      	RCALL __lcd_write_data
000400 e8a5      	LDI  R26,LOW(133)
000401 df91      	RCALL __lcd_write_data
000402 e0a6      	LDI  R26,LOW(6)
000403 df8f      	RCALL __lcd_write_data
000404 dfa7      	RCALL _lcd_clear
                 _0x20C0002:
000405 9621      	ADIW R28,1
000406 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _eeprom_read_block:
                 ; .FSTART _eeprom_read_block
000407 d029      	RCALL SUBOPT_0x2
000408 d1c8      	RCALL __SAVELOCR4
                +
000409 8508     +LDD R16 , Y + 8
00040a 8519     +LDD R17 , Y + 8 + 1
                 	__GETWRS 16,17,8
                +
00040b 812e     +LDD R18 , Y + 6
00040c 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                 _0x2020003:
00040d d0e0      	RCALL SUBOPT_0x20
00040e f041      	BREQ _0x2020005
00040f 931f      	PUSH R17
000410 930f      	PUSH R16
000411 d0e3      	RCALL SUBOPT_0x21
000412 d197      	RCALL __EEPROMRDB
000413 91af      	POP  R26
000414 91bf      	POP  R27
000415 93ec      	ST   X,R30
000416 cff6      	RJMP _0x2020003
                 _0x2020005:
000417 c010      	RJMP _0x20C0001
                 ; .FEND
                 _eeprom_write_block:
                 ; .FSTART _eeprom_write_block
000418 d018      	RCALL SUBOPT_0x2
000419 d1b7      	RCALL __SAVELOCR4
                +
00041a 810e     +LDD R16 , Y + 6
00041b 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                +
00041c 8528     +LDD R18 , Y + 8
00041d 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                 _0x2020006:
00041e d0cf      	RCALL SUBOPT_0x20
00041f f041      	BREQ _0x2020008
000420 931f      	PUSH R17
000421 930f      	PUSH R16
000422 d0d2      	RCALL SUBOPT_0x21
000423 91ec      	LD   R30,X
000424 91af      	POP  R26
000425 91bf      	POP  R27
000426 d18f      	RCALL __EEPROMWRB
000427 cff6      	RJMP _0x2020006
                 _0x2020008:
                 _0x20C0001:
000428 d1ad      	RCALL __LOADLOCR4
000429 962a      	ADIW R28,10
00042a 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _decades:
0001cd           	.BYTE 0x5
                 _tenths_tab:
0001d2           	.BYTE 0x28
                 _lcdbuffer:
0001fa           	.BYTE 0x20
                 _timer_highword:
00021a           	.BYTE 0x2
                 _measure_state:
00021c           	.BYTE 0x1
                 _set_admux:
00021d           	.BYTE 0x1
                 _menu_item:
00021e           	.BYTE 0xC
                 _calib:
00022a           	.BYTE 0x8
                 _calib_offset:
000232           	.BYTE 0x10
                 __base_y_G100:
000242           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00042b 91a0 021c 	LDS  R26,_measure_state
00042d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00042e e0e0      	LDI  R30,LOW(0)
00042f bdee      	OUT  0x2E,R30
000430 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000431 93ba      	ST   -Y,R27
000432 93aa      	ST   -Y,R26
000433 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000434 2788      	CLR  R24
000435 2799      	CLR  R25
000436 85ee      	LDD  R30,Y+14
000437 85ff      	LDD  R31,Y+14+1
000438 2766      	CLR  R22
000439 2777      	CLR  R23
00043a d0f8      	RCALL __MULD12U
00043b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
                +
00043c 81ac     +LDD R26 , Y + 4
00043d 81bd     +LDD R27 , Y + 4 + 1
00043e 818e     +LDD R24 , Y + 4 + 2
00043f 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000440 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000441 e3e2      	LDI  R30,LOW(_calib_offset)
000442 e0f2      	LDI  R31,HIGH(_calib_offset)
000443 93fa      	ST   -Y,R31
000444 93ea      	ST   -Y,R30
000445 e0e3      	LDI  R30,LOW(3)
000446 e0f0      	LDI  R31,HIGH(3)
000447 93fa      	ST   -Y,R31
000448 93ea      	ST   -Y,R30
000449 e1a0      	LDI  R26,LOW(16)
00044a e0b0      	LDI  R27,0
00044b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
00044c e2ea      	LDI  R30,LOW(_calib)
00044d e0f2      	LDI  R31,HIGH(_calib)
00044e 93fa      	ST   -Y,R31
00044f 93ea      	ST   -Y,R30
000450 e1e3      	LDI  R30,LOW(19)
000451 e0f0      	LDI  R31,HIGH(19)
000452 93fa      	ST   -Y,R31
000453 93ea      	ST   -Y,R30
000454 e0a8      	LDI  R26,LOW(8)
000455 e0b0      	LDI  R27,0
000456 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x7:
000457 85a8      	LDD  R26,Y+8
000458 85b9      	LDD  R27,Y+8+1
000459 27ee      	CLR  R30
00045a 0fa0      	ADD  R26,R16
00045b 1fbe      	ADC  R27,R30
00045c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
00045d 2fe1      	MOV  R30,R17
00045e eda2      	LDI  R26,LOW(_tenths_tab)
00045f e0b1      	LDI  R27,HIGH(_tenths_tab)
000460 e0f0      	LDI  R31,0
000461 d0c2      	RCALL __LSLW2
000462 0fae      	ADD  R26,R30
000463 1fbf      	ADC  R27,R31
000464 d121      	RCALL __GETD1P
000465 dfd6      	RCALL SUBOPT_0x4
000466 d165      	RCALL __CPD21
000467 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x9:
000468 e0f0      	LDI  R31,0
000469 d0ba      	RCALL __LSLW2
00046a 0fae      	ADD  R26,R30
00046b 1fbf      	ADC  R27,R31
00046c d119      	RCALL __GETD1P
00046d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
00046e e0a1      	LDI  R26,LOW(1)
00046f e0b0      	LDI  R27,0
000470 c08a      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
                +
000471 e0e0     +LDI R30 , LOW ( 0x0 )
000472 e0f0     +LDI R31 , HIGH ( 0x0 )
000473 e060     +LDI R22 , BYTE3 ( 0x0 )
000474 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000475 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
000476 e0b0      	LDI  R27,0
000477 c083      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000478 2fe1      	MOV  R30,R17
000479 e3a2      	LDI  R26,LOW(_calib_offset)
00047a e0b2      	LDI  R27,HIGH(_calib_offset)
00047b cfec      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
00047c 81ed     +LDD R30 , Y + 5
00047d 81fe     +LDD R31 , Y + 5 + 1
00047e 816f     +LDD R22 , Y + 5 + 2
00047f 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
000480 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
000481 81ad     +LDD R26 , Y + 5
000482 81be     +LDD R27 , Y + 5 + 1
000483 818f     +LDD R24 , Y + 5 + 2
000484 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
000485 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x10:
000486 e2aa      	LDI  R26,LOW(_calib)
000487 e0b2      	LDI  R27,HIGH(_calib)
000488 e0f0      	LDI  R31,0
000489 0fee      	LSL  R30
00048a 1fff      	ROL  R31
00048b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00048c 0fae      	ADD  R26,R30
00048d 1fbf      	ADC  R27,R31
00048e d0f3      	RCALL __GETW1P
00048f 93fa      	ST   -Y,R31
000490 93ea      	ST   -Y,R30
000491 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
000492 9724      	SBIW R28,4
000493 931a      	ST   -Y,R17
000494 2d15      	MOV  R17,R5
000495 2455      	CLR  R5
000496 dd17      	RCALL _measure
                +
000497 83e9     +STD Y + 1 , R30
000498 83fa     +STD Y + 1 + 1 , R31
000499 836b     +STD Y + 1 + 2 , R22
00049a 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00049b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x13:
00049c dd11      	RCALL _measure
                +
00049d 83e9     +STD Y + 1 , R30
00049e 83fa     +STD Y + 1 + 1 , R31
00049f 836b     +STD Y + 1 + 2 , R22
0004a0 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x14:
0004a2 2de5      	MOV  R30,R5
0004a3 e3a2      	LDI  R26,LOW(_calib_offset)
0004a4 e0b2      	LDI  R27,HIGH(_calib_offset)
0004a5 e0f0      	LDI  R31,0
0004a6 d07d      	RCALL __LSLW2
0004a7 0fea      	ADD  R30,R26
0004a8 1ffb      	ADC  R31,R27
                +
0004a9 81a9     +LDD R26 , Y + 1
0004aa 81ba     +LDD R27 , Y + 1 + 1
0004ab 818b     +LDD R24 , Y + 1 + 2
0004ac 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0004ad d0ed      	RCALL __PUTDZ20
0004ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0004af 2e5e      	MOV  R5,R30
0004b0 cfeb      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
0004b1 2de5      	MOV  R30,R5
0004b2 e3a2      	LDI  R26,LOW(_calib_offset)
0004b3 e0b2      	LDI  R27,HIGH(_calib_offset)
0004b4 cfb3      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
                +
0004b5 81a9     +LDD R26 , Y + 1
0004b6 81ba     +LDD R27 , Y + 1 + 1
0004b7 818b     +LDD R24 , Y + 1 + 2
0004b8 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0004b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x18:
0004ba d054      	RCALL __SUBD21
                +
0004bb 83a9     +STD Y + 1 , R26
0004bc 83ba     +STD Y + 1 + 1 , R27
0004bd 838b     +STD Y + 1 + 2 , R24
0004be 839c     +STD Y + 1 + 3 , R25
                 	__PUTD2S 1
0004bf 2de5      	MOV  R30,R5
0004c0 cfc5      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0004c1 0fea      	ADD  R30,R26
0004c2 1ffb      	ADC  R31,R27
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
0004c4 dff0      	RCALL SUBOPT_0x17
0004c5 e0e8      	LDI  R30,LOW(8)
0004c6 d051      	RCALL __LSRD12
                +
0004c7 e0a0     +LDI R26 , LOW ( 0xF424000 )
0004c8 e4b0     +LDI R27 , HIGH ( 0xF424000 )
0004c9 e482     +LDI R24 , BYTE3 ( 0xF424000 )
0004ca e09f     +LDI R25 , BYTE4 ( 0xF424000 )
                 	__GETD2N 0xF424000
0004cb d087      	RCALL __DIVD21U
0004cc 9631      	ADIW R30,1
0004cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0004ce 93ed      	ST   X+,R30
0004cf 93fc      	ST   X,R31
0004d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1C:
                +
0004d1 81e9     +LDD R30 , Y + 1
0004d2 81fa     +LDD R31 , Y + 1 + 1
0004d3 816b     +LDD R22 , Y + 1 + 2
0004d4 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
0004d5 e0a0     +LDI R26 , LOW ( 0x3E80000 )
0004d6 e0b0     +LDI R27 , HIGH ( 0x3E80000 )
0004d7 ee88     +LDI R24 , BYTE3 ( 0x3E80000 )
0004d8 e093     +LDI R25 , BYTE4 ( 0x3E80000 )
                 	__GETD2N 0x3E80000
0004d9 d079      	RCALL __DIVD21U
0004da 9631      	ADIW R30,1
0004db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
0004dc 2fe1      	MOV  R30,R17
0004dd e1ae      	LDI  R26,LOW(_menu_item)
0004de e0b2      	LDI  R27,HIGH(_menu_item)
0004df e0f0      	LDI  R31,0
0004e0 0fee      	LSL  R30
0004e1 1fff      	ROL  R31
0004e2 cfa9      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
                +
0004e3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0004e4 958a     +DEC R24
0004e5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0004e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1F:
0004e7 e3a0      	LDI  R26,LOW(48)
0004e8 de9b      	RCALL __lcd_write_nibble_G100
                +
0004e9 ec88     +LDI R24 , LOW ( 200 )
0004ea e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004eb 9701     +SBIW R24 , 1
0004ec f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
0004ee 81ec      	LDD  R30,Y+4
0004ef 81fd      	LDD  R31,Y+4+1
0004f0 9731      	SBIW R30,1
0004f1 83ec      	STD  Y+4,R30
0004f2 83fd      	STD  Y+4+1,R31
0004f3 9631      	ADIW R30,1
0004f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
                +
0004f5 5f0f     +SUBI R16 , LOW ( - 1 )
0004f6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004f7 01d9      	MOVW R26,R18
                +
0004f8 5f2f     +SUBI R18 , LOW ( - 1 )
0004f9 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004fa 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004fb 9610      	adiw r26,0
0004fc f039      	breq __delay_ms1
                 __delay_ms0:
0004fd 95a8      	wdr
                +
0004fe ed80     +LDI R24 , LOW ( 0x7D0 )
0004ff e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000500 9701     +SBIW R24 , 1
000501 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000502 9711      	sbiw r26,1
000503 f7c9      	brne __delay_ms0
                 __delay_ms1:
000504 9508      	ret
                 
                 __ADDD12:
000505 0fea      	ADD  R30,R26
000506 1ffb      	ADC  R31,R27
000507 1f68      	ADC  R22,R24
000508 1f79      	ADC  R23,R25
000509 9508      	RET
                 
                 __SUBD12:
00050a 1bea      	SUB  R30,R26
00050b 0bfb      	SBC  R31,R27
00050c 0b68      	SBC  R22,R24
00050d 0b79      	SBC  R23,R25
00050e 9508      	RET
                 
                 __SUBD21:
00050f 1bae      	SUB  R26,R30
000510 0bbf      	SBC  R27,R31
000511 0b86      	SBC  R24,R22
000512 0b97      	SBC  R25,R23
000513 9508      	RET
                 
                 __ANEGW1:
000514 95f1      	NEG  R31
000515 95e1      	NEG  R30
000516 40f0      	SBCI R31,0
000517 9508      	RET
                 
                 __LSRD12:
000518 23ee      	TST  R30
000519 2e0e      	MOV  R0,R30
00051a 01fd      	MOVW R30,R26
00051b 01bc      	MOVW R22,R24
00051c f031      	BREQ __LSRD12R
                 __LSRD12L:
00051d 9576      	LSR  R23
00051e 9567      	ROR  R22
00051f 95f7      	ROR  R31
000520 95e7      	ROR  R30
000521 940a      	DEC  R0
000522 f7d1      	BRNE __LSRD12L
                 __LSRD12R:
000523 9508      	RET
                 
                 __LSLW2:
000524 0fee      	LSL  R30
000525 1fff      	ROL  R31
000526 0fee      	LSL  R30
000527 1fff      	ROL  R31
000528 9508      	RET
                 
                 __LSRD16:
000529 2fe6      	MOV  R30,R22
00052a 2ff7      	MOV  R31,R23
00052b e060      	LDI  R22,0
00052c e070      	LDI  R23,0
00052d 9508      	RET
                 
                 __LSLD16:
00052e 2f6e      	MOV  R22,R30
00052f 2f7f      	MOV  R23,R31
000530 e0e0      	LDI  R30,0
000531 e0f0      	LDI  R31,0
000532 9508      	RET
                 
                 __MULD12U:
000533 9f7a      	MUL  R23,R26
000534 2d70      	MOV  R23,R0
000535 9f6b      	MUL  R22,R27
000536 0d70      	ADD  R23,R0
000537 9ff8      	MUL  R31,R24
000538 0d70      	ADD  R23,R0
000539 9fe9      	MUL  R30,R25
00053a 0d70      	ADD  R23,R0
00053b 9f6a      	MUL  R22,R26
00053c 2d60      	MOV  R22,R0
00053d 0d71      	ADD  R23,R1
00053e 9ffb      	MUL  R31,R27
00053f 0d60      	ADD  R22,R0
000540 1d71      	ADC  R23,R1
000541 9fe8      	MUL  R30,R24
000542 0d60      	ADD  R22,R0
000543 1d71      	ADC  R23,R1
000544 2788      	CLR  R24
000545 9ffa      	MUL  R31,R26
000546 2df0      	MOV  R31,R0
000547 0d61      	ADD  R22,R1
000548 1f78      	ADC  R23,R24
000549 9feb      	MUL  R30,R27
00054a 0df0      	ADD  R31,R0
00054b 1d61      	ADC  R22,R1
00054c 1f78      	ADC  R23,R24
00054d 9fea      	MUL  R30,R26
00054e 2de0      	MOV  R30,R0
00054f 0df1      	ADD  R31,R1
000550 1f68      	ADC  R22,R24
000551 1f78      	ADC  R23,R24
000552 9508      	RET
                 
                 __DIVD21U:
000553 933f      	PUSH R19
000554 934f      	PUSH R20
000555 935f      	PUSH R21
000556 2400      	CLR  R0
000557 2411      	CLR  R1
000558 2744      	CLR  R20
000559 2755      	CLR  R21
00055a e230      	LDI  R19,32
                 __DIVD21U1:
00055b 0faa      	LSL  R26
00055c 1fbb      	ROL  R27
00055d 1f88      	ROL  R24
00055e 1f99      	ROL  R25
00055f 1c00      	ROL  R0
000560 1c11      	ROL  R1
000561 1f44      	ROL  R20
000562 1f55      	ROL  R21
000563 1a0e      	SUB  R0,R30
000564 0a1f      	SBC  R1,R31
000565 0b46      	SBC  R20,R22
000566 0b57      	SBC  R21,R23
000567 f428      	BRCC __DIVD21U2
000568 0e0e      	ADD  R0,R30
000569 1e1f      	ADC  R1,R31
00056a 1f46      	ADC  R20,R22
00056b 1f57      	ADC  R21,R23
00056c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00056d 60a1      	SBR  R26,1
                 __DIVD21U3:
00056e 953a      	DEC  R19
00056f f759      	BRNE __DIVD21U1
000570 01fd      	MOVW R30,R26
000571 01bc      	MOVW R22,R24
000572 01d0      	MOVW R26,R0
000573 01ca      	MOVW R24,R20
000574 915f      	POP  R21
000575 914f      	POP  R20
000576 913f      	POP  R19
000577 9508      	RET
                 
                 __MANDW12:
000578 94e8      	CLT
000579 fff7      	SBRS R31,7
00057a c002      	RJMP __MANDW121
00057b df98      	RCALL __ANEGW1
00057c 9468      	SET
                 __MANDW121:
00057d 23ea      	AND  R30,R26
00057e 23fb      	AND  R31,R27
00057f f40e      	BRTC __MANDW122
000580 df93      	RCALL __ANEGW1
                 __MANDW122:
000581 9508      	RET
                 
                 __GETW1P:
000582 91ed      	LD   R30,X+
000583 91fc      	LD   R31,X
000584 9711      	SBIW R26,1
000585 9508      	RET
                 
                 __GETD1P:
000586 91ed      	LD   R30,X+
000587 91fd      	LD   R31,X+
000588 916d      	LD   R22,X+
000589 917c      	LD   R23,X
00058a 9713      	SBIW R26,3
00058b 9508      	RET
                 
                 __PUTDP1:
00058c 93ed      	ST   X+,R30
00058d 93fd      	ST   X+,R31
00058e 936d      	ST   X+,R22
00058f 937c      	ST   X,R23
000590 9508      	RET
                 
                 __GETD2S0:
000591 81a8      	LD   R26,Y
000592 81b9      	LDD  R27,Y+1
000593 818a      	LDD  R24,Y+2
000594 819b      	LDD  R25,Y+3
000595 9508      	RET
                 
                 __PUTD1S0:
000596 83e8      	ST   Y,R30
000597 83f9      	STD  Y+1,R31
000598 836a      	STD  Y+2,R22
000599 837b      	STD  Y+3,R23
00059a 9508      	RET
                 
                 __PUTDZ20:
00059b 83a0      	ST   Z,R26
00059c 83b1      	STD  Z+1,R27
00059d 8382      	STD  Z+2,R24
00059e 8393      	STD  Z+3,R25
00059f 9508      	RET
                 
                 __PUTPARD1:
0005a0 937a      	ST   -Y,R23
0005a1 936a      	ST   -Y,R22
0005a2 93fa      	ST   -Y,R31
0005a3 93ea      	ST   -Y,R30
0005a4 9508      	RET
                 
                 __PUTPARD2:
0005a5 939a      	ST   -Y,R25
0005a6 938a      	ST   -Y,R24
0005a7 93ba      	ST   -Y,R27
0005a8 93aa      	ST   -Y,R26
0005a9 9508      	RET
                 
                 __EEPROMRDB:
0005aa 99e1      	SBIC EECR,EEWE
0005ab cffe      	RJMP __EEPROMRDB
0005ac 93ff      	PUSH R31
0005ad b7ff      	IN   R31,SREG
0005ae 94f8      	CLI
0005af bbae      	OUT  EEARL,R26
0005b0 bbbf      	OUT  EEARH,R27
0005b1 9ae0      	SBI  EECR,EERE
0005b2 b3ed      	IN   R30,EEDR
0005b3 bfff      	OUT  SREG,R31
0005b4 91ff      	POP  R31
0005b5 9508      	RET
                 
                 __EEPROMWRB:
0005b6 9be1      	SBIS EECR,EEWE
0005b7 c002      	RJMP __EEPROMWRB1
0005b8 95a8      	WDR
0005b9 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0005ba b79f      	IN   R25,SREG
0005bb 94f8      	CLI
0005bc bbae      	OUT  EEARL,R26
0005bd bbbf      	OUT  EEARH,R27
0005be 9ae0      	SBI  EECR,EERE
0005bf b38d      	IN   R24,EEDR
0005c0 17e8      	CP   R30,R24
0005c1 f019      	BREQ __EEPROMWRB0
0005c2 bbed      	OUT  EEDR,R30
0005c3 9ae2      	SBI  EECR,EEMWE
0005c4 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0005c5 bf9f      	OUT  SREG,R25
0005c6 9508      	RET
                 
                 __CPD12:
0005c7 17ea      	CP   R30,R26
0005c8 07fb      	CPC  R31,R27
0005c9 0768      	CPC  R22,R24
0005ca 0779      	CPC  R23,R25
0005cb 9508      	RET
                 
                 __CPD21:
0005cc 17ae      	CP   R26,R30
0005cd 07bf      	CPC  R27,R31
0005ce 0786      	CPC  R24,R22
0005cf 0797      	CPC  R25,R23
0005d0 9508      	RET
                 
                 __SAVELOCR4:
0005d1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005d2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005d3 931a      	ST   -Y,R17
0005d4 930a      	ST   -Y,R16
0005d5 9508      	RET
                 
                 __LOADLOCR4:
0005d6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005d7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005d8 8119      	LDD  R17,Y+1
0005d9 8108      	LD   R16,Y
0005da 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  21 r1 :  11 r2 :   0 r3 :   0 r4 :   4 r5 :  26 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  26 r17:  48 r18:  13 r19:  13 r20:   7 r21:   6 r22:  42 r23:  39 
r24:  51 r25:  28 r26: 146 r27:  67 r28:  13 r29:   1 r30: 332 r31: 104 
x  :  28 y  : 189 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  18 
adiw  :  15 and   :   6 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   4 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :  17 
cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :  17 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   4 
cpc   :  12 cpi   :  31 cpse  :   0 dec   :   5 des   :   0 eor   :   1 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :  11 
inc   :   2 ld    :  36 ldd   :  73 ldi   : 204 lds   :   4 lpm   :   7 
lsl   :   5 lsr   :   1 mov   :  38 movw  :  23 mul   :  10 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   5 ori   :   2 out   :  58 
pop   :  16 push  :  16 rcall : 193 ret   :  68 reti  :   2 rjmp  :  94 
rol   :  11 ror   :   3 sbc   :   9 sbci  :   5 sbi   :  23 sbic  :   6 
sbis  :   4 sbiw  :  14 sbr   :   1 sbrc  :   1 sbrs  :   8 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  72 std   :  42 
sts   :  23 sub   :   3 subi  :  17 swap  :   2 tst   :   1 wdr   :   2 

Instructions used: 63 out of 114 (55.3%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bb6   2704    294   2998    8192  36.6%
[.dseg] 0x000060 0x000246      0    230    230    1024  22.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
