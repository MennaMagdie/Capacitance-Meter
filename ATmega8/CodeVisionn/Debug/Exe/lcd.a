;//
;// Title        : LCD driver and other stuff
;// Author       : Lars Pontoppidan Larsen
;// Date         : Jan 2006
;// Version      : 1.00
;// Target MCU   : Atmel AVR Series
;//
;// DESCRIPTION:
;// This module implements sending chars and strings to a HD44780 compatible LCD,
;// and various other helpfull functions are present.
;//
;// Display initialization:
;//   void lcd_init()
;//
;// Sending a zero-terminated string (from s-ram) at pos (0-31):
;//   void lcd_string(char *p, unsigned char pos);
;//
;// Clear display:
;//   void lcd_clear(void);
;//
;// OTHER STUFF:
;//   void ms_spin(unsigned short ms);
;//   void hex2ascii(char *target, long value, char pointplace);
;//   char long2ascii(char *target, unsigned long value);
;//
;// DISCLAIMER:
;// The author is in no way responsible for any problems or damage caused by
;// using this code. Use at your own risk.
;//
;// LICENSE:
;// This code is distributed under the GNU Public License
;// which can be found at http://www.gnu.org/licenses/gpl.txt
;//
;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <stdlib.h>
;//#include <util/delay.h>
;
;
;#include "lcd.h"
;
;
;#define DISP_ON      0x0C //0b00001100  //LCD control constants
;#define DISP_OFF     0x08 //0b00001000  //
;#define CLR_DISP     0x01 //0b00000001  //
;#define CUR_HOME     0x02 //0b00000010  //
;#define DD_RAM_ADDR  0x80 //0b10000000  //
;#define DD_RAM_ADDR2 0xC0 //0b11000000  //
;#define DD_RAM_ADDR3 0x28 //40    //
;#define CG_RAM_ADDR  0x40 //0b01000000  //
;
;
;/* Use these defines to specify lcd port and RS, EN pin */
;#define PORT PORTB
;#define DDR DDRB
;
;#define RS_BIT 5
;#define EN_BIT 4
;
;#define F_CPU 8000000UL  // Change to your actual clock speed
;
;/* DELAY FUNCTIONS */
;
;#define LOOPS_PER_MS (F_CPU/1000/4)
;
;/* spin for ms milliseconds */
;void ms_spin(unsigned short ms)
; 0001 0046 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0047     unsigned short outer, inner;
; 0001 0048 
; 0001 0049     for (outer = 0; outer < ms; outer++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	ms -> Y+4
;	outer -> R16,R17
;	inner -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0001 004A     {
; 0001 004B         inner = LOOPS_PER_MS;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 004C         while (inner--)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 004D         {
; 0001 004E             #asm
;PCODE: $00000022 VOL: 0
; 0001 004F                 nop
                nop
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0050             #endasm
; 0001 0051         }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0052     }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0053 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;
;
;/* 8-bit count, 3 cycles/loop */
;/*static inline void
;_delay_loop_1(unsigned char __count)
;{
;        if (!__count)
;                return;
;
;        asm volatile (
;                "1: dec %0" "\n\t"
;                "brne 1b"
;                : "=r" (__count)
;                : "0" (__count)
;        );
;}   */
;
;void _delay_loop_1(unsigned char __count)
; 0001 0067 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0001 0068     if (!__count)
;PCODE: $00000032 VOL: 0
;	__count -> Y+0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0069         return;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 006A 
; 0001 006B     do {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0001 006C         #asm
;PCODE: $0000003A VOL: 0
; 0001 006D             nop
            nop
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 006E         #endasm
; 0001 006F     } while (--__count);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0070 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;
;
;
;void lcd_putchar(unsigned char rs, unsigned char data )
; 0001 0076 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0077   // must set LCD-mode before calling this function!
; 0001 0078   // RS = 1 LCD in character-mode
; 0001 0079   // RS = 0 LCD in command-mode
; 0001 007A 
; 0001 007B   if (rs)
;PCODE: $00000049 VOL: 0
;	rs -> Y+1
;	data -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 007C     rs = (1<<RS_BIT);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 007D 
; 0001 007E   /* High nibble, rsbit and EN low */
; 0001 007F   PORT = (0x0F & (data >> 4)) | rs ;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 0080 
; 0001 0081   /* Clock cyclus */
; 0001 0082   PORT |= (1<<EN_BIT);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0083   _delay_loop_1(5);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0084   PORT &= ~(1<<EN_BIT);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0085 
; 0001 0086   /* Wait a little */
; 0001 0087   ms_spin(2);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0001 0088 
; 0001 0089   /* Low nibble, rsbit and EN low*/
; 0001 008A   PORT = (data & 0x0F) | rs;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 008B 
; 0001 008C   /* Clock cyclus */
; 0001 008D   PORT |= (1<<EN_BIT);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 008E   _delay_loop_1(5);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 008F   PORT &= ~(1<<EN_BIT);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0090 
; 0001 0091   /* Wait a little */
; 0001 0092   ms_spin(2);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 0093 }
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;
;void lcd_init( void ) // must be run once before using the display
; 0001 0097 {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0098   /* Set ddr all out */
; 0001 0099   PORT = 0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 009A   DDR = 0xFF;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 009B 
; 0001 009C   /* Power on wait */
; 0001 009D   ms_spin(50);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 009E 
; 0001 009F   /* Configure 4 bit access */
; 0001 00A0   lcd_putchar(0, 0x33);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 00A1   lcd_putchar(0, 0x32);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0001 00A2 
; 0001 00A3   /* Setup lcd */
; 0001 00A4   lcd_putchar(0, 0x28);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 00A5   lcd_putchar(0, 0x08);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 00A6   lcd_putchar(0, 0x0c);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 00A7   lcd_putchar(0, 0x01);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 00A8   lcd_putchar(0, 0x06);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 00A9 }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;
;void lcd_clear(void)
; 0001 00AC {
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0001 00AD   /* Display clear  */
; 0001 00AE   lcd_putchar(0, CLR_DISP);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 00AF 
; 0001 00B0 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;
;void lcd_string(char *p, unsigned char pos)
; 0001 00B3 {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 00B4 
; 0001 00B5     // place cursor
; 0001 00B6     if (pos < 16) {
;PCODE: $000000A1 VOL: 0
;	*p -> Y+1
;	pos -> Y+0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 00B7       lcd_putchar(0, DD_RAM_ADDR + pos);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0001 00B8     }
; 0001 00B9     else if (pos < 32) {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 00BA         lcd_putchar(0, DD_RAM_ADDR2 + (pos-16));
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 00BB     }
; 0001 00BC     else
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 00BD        return;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00BE 
; 0001 00BF     // Write text
; 0001 00C0     while (*p) {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0001 00C1       if (pos > 31)
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 00C2         break;
;PCODE: $000000C2 VOL: 0
; 0001 00C3 
; 0001 00C4       lcd_putchar(1, *(p++));
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 00C5 
; 0001 00C6       if (++pos == 16)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 00C7         lcd_putchar(0, DD_RAM_ADDR2);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0001 00C8 
; 0001 00C9     }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 00CA }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;
;/* String functions */
;
;/*
;   Writes value as hexadecimals in target. 9 characters will be written.
;   pointplace puts a point in the number, example:
;
;   0123.4567  (pointplace = 2)
;   89ABCD.EF  (pointplace = 1)
;*/
;
;
;unsigned char swap_nibbles(unsigned char x)
; 0001 00D8 {
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 00D9     #asm
;PCODE: $000000DC VOL: 0
;	x -> Y+0
;PCODE: $000000DD VOL: 0
; 0001 00DA         mov r16, x
        mov r16, x
;PCODE: $000000DE VOL: 0
; 0001 00DB         swap r16
        swap r16
;PCODE: $000000DF VOL: 0
; 0001 00DC         mov x, r16
        mov x, r16
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0001 00DD     #endasm
; 0001 00DE     return x;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 00DF }
;PCODE: $000000E5 VOL: 0
;
;
;void hex2ascii(char *target, long value, char pointplace)
; 0001 00E3 {
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0001 00E4    int i;
; 0001 00E5    unsigned char hex;
; 0001 00E6 
; 0001 00E7    for (i=3; i>=0; i--) {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;	*target -> Y+9
;	value -> Y+5
;	pointplace -> Y+4
;	i -> R16,R17
;	hex -> R19
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 00E8 
; 0001 00E9      hex = value>>24;   /* Get msbyte */
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0001 00EA     hex = swap_nibbles(hex); /* Get high nibble */
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 00EB      hex &= 0x0F;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 00EC 
; 0001 00ED      *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 00EE 
; 0001 00EF      hex = value>>24;   /* Get msbyte */
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0001 00F0      hex &= 0x0F;       /* Get low nibble */
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00F1 
; 0001 00F2      *(target++) = ((hex < 0x0A) ? (hex + '0') : (hex + ('A' - 0x0A)));
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 00F3 
; 0001 00F4      value <<= 8;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00F5 
; 0001 00F6      if (i == pointplace)
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 00F7        *(target++) = '.';
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 00F8 
; 0001 00F9    }
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0001 00FA 
; 0001 00FB 
; 0001 00FC }
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;
;
;// /*
;//    Writes a unsigned long as 13 ascii decimals:
;//
;//    x.xxx.xxx.xxx
;// */
;
;// unsigned long tenths_tab[10] = {1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};
;// void long2ascii(char *target, unsigned long value)
;// {
;//    unsigned char p, pos=0;
;//    unsigned char numbernow=0;
;//
;//    for (p=0;p<10;p++) {
;//
;//      if ((p==1) || (p==4) || (p==7)) {
;//        if (numbernow)
;//          target[pos] = '.';
;//        else
;//          target[pos] = ' ';
;//
;//        pos++;
;//      }
;//
;//      if (value < tenths_tab[p]) {
;//        if (numbernow)
;//          target[pos] = '0';
;//        else
;//          target[pos] = ' ';
;//      }
;//      else {
;//        target[pos] = '0';
;//        while (value >= tenths_tab[p]) {
;//          target[pos]++;
;//          value -= tenths_tab[p];
;//        }
;//        numbernow = 1;
;//     }
;//     pos++;
;//   }
;//
;// }
;
;/*
;   Writes a unsigned long as 4 ascii decimals + a dot. Always writes 5 ascii chars.
;   Returns dot place.
;
;   examples:      returns:
;  "a.aaa"         3
;    "aaa.a"       2
;     "aa.aa"      2
;          "a.aaa" 1
;          "  aaa" 0
;          "    a" 0
;   x.xxx.xxx.xxx
;*/
;
;unsigned long tenths_tab[10] = {1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};

	.DSEG
;char long2ascii(char *target, unsigned long value)
; 0001 0139 {

	.CSEG
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0001 013A   unsigned char p, pos=0;
; 0001 013B   unsigned char numbernow=0;
; 0001 013C   char ret=0;
; 0001 013D 
; 0001 013E   for (p=0;(p<10) && (pos<5);p++) {
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;	*target -> Y+8
;	value -> Y+4
;	p -> R17
;	pos -> R16
;	numbernow -> R19
;	ret -> R18
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0001 013F 
; 0001 0140     if (numbernow) {
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 0141       /* Eventually place dot */
; 0001 0142       /* Notice the nice fallthrough construction. */
; 0001 0143       switch(p) {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0001 0144       case 1:
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 0145         ret++;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 0146       case 4:
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0001 0147         ret++;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 0148       case 7:
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 0149         ret++;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0001 014A         target[pos] = '.';
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 014B         pos++;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 014C       }
;PCODE: $00000174 VOL: 0
; 0001 014D     }
; 0001 014E 
; 0001 014F     if (value < tenths_tab[p]) {
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0001 0150       if (numbernow) {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0001 0151         /* Inside number, put a zero */
; 0001 0152         target[pos] = '0';
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 0153         pos++;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0001 0154       }
; 0001 0155       else {
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 0156         /* Check if we need to pad with spaces */
; 0001 0157         if (p>=6) {
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0001 0158           target[pos] = ' ';
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0001 0159           pos++;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 015A         }
; 0001 015B 
; 0001 015C         if (p==6) {
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0001 015D           /* We also need to place a space instead of . */
; 0001 015E           target[pos] = ' ';
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 015F           pos++;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 0160         }
; 0001 0161       }
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 0162     }
; 0001 0163     else {
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0001 0164       target[pos] = '0';
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0001 0165       while (value >= tenths_tab[p]) {
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0001 0166         target[pos]++;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0001 0167         value -= tenths_tab[p];
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0001 0168       }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 0169       pos++;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 016A       numbernow = 1;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0001 016B     }
;PCODE: $000001C2 VOL: 0
; 0001 016C   }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0001 016D 
; 0001 016E   return ret;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0001 016F }
;PCODE: $000001CC VOL: 0
;
