
AVRASM ver. 2.1.30  D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm Fri Apr 18 20:35:39 2025

D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16A
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rangemode=R5
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R7
                 	.DEF __lcd_maxx=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00c1 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 010d 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00ee 	JMP  _ana_comp_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1130): warning: .cseg .db misalignment - padding zero byte
000033 0004      	.DB  0x4
                 
                 _0x3:
000034 6e70
000035 6d75
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1133): warning: .cseg .db misalignment - padding zero byte
000036 0020      	.DB  0x70,0x6E,0x75,0x6D,0x20
                 _0x4:
000037 ca00
000038 3b9a
000039 e100
00003a 05f5      	.DB  0x0,0xCA,0x9A,0x3B,0x0,0xE1,0xF5,0x5
00003b 9680
00003c 0098
00003d 4240
00003e 000f      	.DB  0x80,0x96,0x98,0x0,0x40,0x42,0xF,0x0
00003f 86a0
000040 0001
000041 2710
000042 0000      	.DB  0xA0,0x86,0x1,0x0,0x10,0x27,0x0,0x0
000043 03e8
000044 0000
000045 0064
000046 0000      	.DB  0xE8,0x3,0x0,0x0,0x64,0x0,0x0,0x0
000047 000a
000048 0000
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1139): warning: .cseg .db misalignment - padding zero byte
000049 0001      	.DB  0xA,0x0,0x0,0x0,0x1
                 _0x6:
00004a 0160
00004b 016c
00004c 0178
00004d 0184      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+12),HIGH(_0x5+12),LOW(_0x5+24),HIGH(_0x5+24),LOW(_0x5+36),HIGH(_0x5+36)
00004e 0194
00004f 01a4      	.DB  LOW(_0x5+52),HIGH(_0x5+52),LOW(_0x5+68),HIGH(_0x5+68)
                 _0x7:
000050 53b6
000051 245c
000052 4bdf
000053 20f5      	.DB  0xB6,0x53,0x5C,0x24,0xDF,0x4B,0xF5,0x20
                 _0x0:
000054 6152
000055 676e
000056 3a65
000057 4120      	.DB  0x52,0x61,0x6E,0x67,0x65,0x3A,0x20,0x41
000058 7475
000059 006f
00005a 6152
00005b 676e      	.DB  0x75,0x74,0x6F,0x0,0x52,0x61,0x6E,0x67
00005c 3a65
00005d 4c20
00005e 776f
00005f 0020      	.DB  0x65,0x3A,0x20,0x4C,0x6F,0x77,0x20,0x0
000060 6152
000061 676e
000062 3a65
000063 4820      	.DB  0x52,0x61,0x6E,0x67,0x65,0x3A,0x20,0x48
000064 6769
000065 0068
000066 6143
000067 696c      	.DB  0x69,0x67,0x68,0x0,0x43,0x61,0x6C,0x69
000068 7262
000069 7461
00006a 3a65
00006b 5a20      	.DB  0x62,0x72,0x61,0x74,0x65,0x3A,0x20,0x5A
00006c 7265
00006d 006f
00006e 6143
00006f 696c      	.DB  0x65,0x72,0x6F,0x0,0x43,0x61,0x6C,0x69
000070 7262
000071 7461
000072 3a65
000073 3120      	.DB  0x62,0x72,0x61,0x74,0x65,0x3A,0x20,0x31
000074 7520
000075 0046
000076 6153
000077 6576      	.DB  0x20,0x75,0x46,0x0,0x53,0x61,0x76,0x65
000078 6320
000079 6c61
00007a 6269
00007b 6172      	.DB  0x20,0x63,0x61,0x6C,0x69,0x62,0x72,0x61
00007c 6974
00007d 6e6f
00007e 4100
00007f 7475      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x41,0x75,0x74
000080 206f
000081 4600
000082 726f
000083 6563      	.DB  0x6F,0x20,0x0,0x46,0x6F,0x72,0x63,0x65
000084 2000
000085 6968
000086 6867
000087 2000      	.DB  0x0,0x20,0x68,0x69,0x67,0x68,0x0,0x20
000088 6f6c
000089 2077
00008a 4100
00008b 4344      	.DB  0x6C,0x6F,0x77,0x20,0x0,0x41,0x44,0x43
00008c 203a
00008d 7525
D:\Desktop HDD\8th sem\Embedded Systems\Lab\Capacitance-Meter\ATmega16\codevision_16\Debug\List\atmega16_cv.asm(1160): warning: .cseg .db misalignment - padding zero byte
00008e 0000      	.DB  0x3A,0x20,0x25,0x75,0x0
                 _0x2000003:
00008f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000090 0001      	.DW  0x01
000091 0005      	.DW  0x05
000092 0066      	.DW  __REG_VARS*2
                 
000093 0005      	.DW  0x05
000094 01cd      	.DW  _decades
000095 0068      	.DW  _0x3*2
                 
000096 0025      	.DW  0x25
000097 01d2      	.DW  _tenths_tab
000098 006e      	.DW  _0x4*2
                 
000099 000c      	.DW  0x0C
00009a 0160      	.DW  _0x5
00009b 00a8      	.DW  _0x0*2
                 
00009c 000c      	.DW  0x0C
00009d 016c      	.DW  _0x5+12
00009e 00b4      	.DW  _0x0*2+12
                 
00009f 000c      	.DW  0x0C
0000a0 0178      	.DW  _0x5+24
0000a1 00c0      	.DW  _0x0*2+24
                 
0000a2 0010      	.DW  0x10
0000a3 0184      	.DW  _0x5+36
0000a4 00cc      	.DW  _0x0*2+36
                 
0000a5 0010      	.DW  0x10
0000a6 0194      	.DW  _0x5+52
0000a7 00dc      	.DW  _0x0*2+52
                 
0000a8 0011      	.DW  0x11
0000a9 01a4      	.DW  _0x5+68
0000aa 00ec      	.DW  _0x0*2+68
                 
0000ab 000c      	.DW  0x0C
0000ac 021e      	.DW  _menu_item
0000ad 0094      	.DW  _0x6*2
                 
0000ae 0008      	.DW  0x08
0000af 022a      	.DW  _calib
0000b0 00a0      	.DW  _0x7*2
                 
0000b1 0006      	.DW  0x06
0000b2 01b5      	.DW  _0x43
0000b3 00fd      	.DW  _0x0*2+85
                 
0000b4 0006      	.DW  0x06
0000b5 01bb      	.DW  _0x43+6
0000b6 0103      	.DW  _0x0*2+91
                 
0000b7 0006      	.DW  0x06
0000b8 01c1      	.DW  _0x43+12
0000b9 0109      	.DW  _0x0*2+97
                 
0000ba 0006      	.DW  0x06
0000bb 01c7      	.DW  _0x43+18
0000bc 010f      	.DW  _0x0*2+103
                 
0000bd 0002      	.DW  0x02
0000be 0252      	.DW  __base_y_G100
0000bf 011e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000c0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000c1 94f8      	CLI
0000c2 27ee      	CLR  R30
0000c3 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c4 e0f1      	LDI  R31,1
0000c5 bffb      	OUT  GICR,R31
0000c6 bfeb      	OUT  GICR,R30
0000c7 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000c8 e08d      	LDI  R24,(14-2)+1
0000c9 e0a2      	LDI  R26,2
0000ca 27bb      	CLR  R27
                 __CLEAR_REG:
0000cb 93ed      	ST   X+,R30
0000cc 958a      	DEC  R24
0000cd f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ce e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cf e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000d0 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000d1 93ed      	ST   X+,R30
0000d2 9701      	SBIW R24,1
0000d3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d4 e2e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d5 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d6 9185      	LPM  R24,Z+
0000d7 9195      	LPM  R25,Z+
0000d8 9700      	SBIW R24,0
0000d9 f061      	BREQ __GLOBAL_INI_END
0000da 91a5      	LPM  R26,Z+
0000db 91b5      	LPM  R27,Z+
0000dc 9005      	LPM  R0,Z+
0000dd 9015      	LPM  R1,Z+
0000de 01bf      	MOVW R22,R30
0000df 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000e0 9005      	LPM  R0,Z+
0000e1 920d      	ST   X+,R0
0000e2 9701      	SBIW R24,1
0000e3 f7e1      	BRNE __GLOBAL_INI_LOOP
0000e4 01fb      	MOVW R30,R22
0000e5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e7 bfed      	OUT  SPL,R30
0000e8 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000ea e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000eb e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ec 940c 03c3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : atmega16_cv
                 ;Version :
                 ;Date    : 18/04/2025
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16A
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>  // if you're using delay_ms()
                 ;#include <eeprom.h> // for EEPROM access
                 ;#include <stdio.h>
                 ;// Declare your global variables here
                 ;#include <spi.h>
                 ;
                 ;#define DISCHARGE_ON DDRD |= (1 << 6)
                 ;#define DISCHARGE_OFF DDRD &= ~(1 << 6)
                 ;
                 ;/* Range control */
                 ;#define HIGH_RANGE   \
                 ;  PORTD |= (1 << 5); \
                 ;  DDRD |= (1 << 5)
                 ;#define LOW_RANGE    \
                 ;  DDRD &= ~(1 << 5); \
                 ;  PORTD &= ~(1 << 5)
                 ;#define PULLDOWN_RANGE \
                 ;  PORTD &= ~(1 << 5);  \
                 ;  DDRD |= (1 << 5)
                 ;
                 ;/* Threshold selection */
                 ;#define ADMUX_LOW 1
                 ;#define ADMUX_MEDIUM 2
                 ;#define ADMUX_HIGH 3
                 ;
                 ;/* Timer abstraction */
                 ;#define TIMER_VALUE TCNT1
                 ;#define TIMER_START TCCR1B = (1 << CS10)
                 ;#define TIMER_STOP TCCR1B = 0
                 ;
                 ;/* Led abstraction */
                 ;#define LED_ON PORTD &= ~(1 << 4)
                 ;#define LED_OFF PORTD |= (1 << 4)
                 ;
                 ;/* Button abstraction */
                 ;#define BUTTON_PUSHED (!(PIND & (1 << 2)))
                 ;
                 ;char decades[5] = {'p', 'n', 'u', 'm', ' '};
                 
                 	.DSEG
                 ;unsigned long tenths_tab[10] = {1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1};
                 ;char lcdbuffer[32];
                 ;
                 ;unsigned short volatile timer_highword;
                 ;
                 ;/* Program states: */
                 ;#define STATE_IDLE 0
                 ;#define STATE_LOW_THRESH 1
                 ;#define STATE_HIGH_THRESH 2
                 ;#define STATE_DONE 3
                 ;// #define STATE_BUTTONDOWN 4
                 ;
                 ;unsigned char volatile measure_state;
                 ;
                 ;/* The following is the value the analog compare interrupt will set ADMUX: */
                 ;unsigned char volatile set_admux;
                 ;
                 ;/* The rangemode defines the measurement operation */
                 ;#define RANGE_HIGH_THRESH 1 /* If missing: threshold low */
                 ;#define RANGE_HIGH 2        /* If missing: range low */
                 ;#define RANGE_AUTO 4
                 ;#define RANGE_OVERFLOW 8 /* If set: cap was out of range */
                 ;unsigned char rangemode = RANGE_AUTO;
                 ;
                 ;/* Constants defining measuring operation: */
                 ;#define EXTRA_DISCHARGE_MS 100   /* Extra discharging that is done even after a threshold is crossed */
                 ;#define LOW_RANGE_TIMEOUT 500    /* At autorange, when to go to high range */
                 ;#define HIGH_RANGE_TIMEOUT 10000 /* When to give up completely */
                 ;
                 ;/* Menu system */
                 ;#define MENU_SPEED 800 /* ms each menu item is shown */
                 ;
                 ;#define MENU_ITEMS 6
                 ;char *menu_item[MENU_ITEMS] = {"Range: Auto", "Range: Low ", "Range: High", "Calibrate: Zero", "Calibrate: 1 uF", "Save  ...
                 _0x5:
000160           	.BYTE 0x55
                 ;
                 ;#define CALIB_LOW 256000000 /* for 1uF reference prescale: >> 8 */
                 ;#define CALIB_HIGH 65536000 /* for 1uF reference */
                 ;
                 ;/* Calibration values are stored in eeprom in the following format:
                 ;
                 ;   Starting from byte 1:  (not 0)
                 ;   'C' 'D'
                 ;   <data>
                 ;
                 ;*/
                 ;#define EEPROM_HEADER 1
                 ;#define EEPROM_DATA 3
                 ;
                 ;unsigned short calib[4] = {21430, 9308, 19423, 8437};
                 ;// unsigned short calib[4] = {53575, 46540, 19423, 8437};
                 ;char buf[16];
                 ;unsigned long calib_offset[4] = {0, 0, 0, 0};
                 ;
                 ;#define SIZE_OF_CALIB 8
                 ;#define SIZE_OF_CALIBOFFSET 16
                 ;
                 ;/* This macro fractionally multiplies 16.16 bit with 0.16 bit both unsigned,
                 ;   shifting the result two bytes right and returning 16.16 bit.
                 ;
                 ; Result is 16.16 bit unsigned */
                 ;
                 ;/* Interrupt implementation */
                 ;interrupt[ANA_COMP] void ana_comp_isr(void)
                 ; 0000 0081 {
                 
                 	.CSEG
                 _ana_comp_isr:
                 ; .FSTART _ana_comp_isr
0000ee 93aa      	ST   -Y,R26
0000ef 93ea      	ST   -Y,R30
0000f0 b7ef      	IN   R30,SREG
0000f1 93ea      	ST   -Y,R30
                 ; 0000 0082   if (measure_state == STATE_LOW_THRESH)
0000f2 91a0 021c 	LDS  R26,_measure_state
0000f4 30a1      	CPI  R26,LOW(0x1)
0000f5 f439      	BRNE _0x8
                 ; 0000 0083   {
                 ; 0000 0084     /* We just got low threshold interrupt, start timer and set high threshold */
                 ; 0000 0085     TIMER_START;
0000f6 e0e1      	LDI  R30,LOW(1)
0000f7 bdee      	OUT  0x2E,R30
                 ; 0000 0086     ADMUX = set_admux;
0000f8 91e0 021d 	LDS  R30,_set_admux
0000fa b9e7      	OUT  0x7,R30
                 ; 0000 0087     measure_state = STATE_HIGH_THRESH;
0000fb e0e2      	LDI  R30,LOW(2)
0000fc c009      	RJMP _0x66
                 ; 0000 0088   }
                 ; 0000 0089   else if (measure_state == STATE_HIGH_THRESH)
                 _0x8:
0000fd 91a0 021c 	LDS  R26,_measure_state
0000ff 30a2      	CPI  R26,LOW(0x2)
000100 f439      	BRNE _0xA
                 ; 0000 008A   {
                 ; 0000 008B     /* High threshold interrupt, verify it, then stop timer */
                 ; 0000 008C     if (ACSR & (1 << ACO))
000101 9b45      	SBIS 0x8,5
000102 c005      	RJMP _0xB
                 ; 0000 008D     {
                 ; 0000 008E       TIMER_STOP;
000103 e0e0      	LDI  R30,LOW(0)
000104 bdee      	OUT  0x2E,R30
                 ; 0000 008F       measure_state = STATE_DONE;
000105 e0e3      	LDI  R30,LOW(3)
                 _0x66:
000106 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0090     }
                 ; 0000 0091   }
                 _0xB:
                 ; 0000 0092 }
                 _0xA:
000108 91e9      	LD   R30,Y+
000109 bfef      	OUT  SREG,R30
00010a 91e9      	LD   R30,Y+
00010b 91a9      	LD   R26,Y+
00010c 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0095 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00010d 93aa      	ST   -Y,R26
00010e 93ba      	ST   -Y,R27
00010f 93ea      	ST   -Y,R30
000110 93fa      	ST   -Y,R31
000111 b7ef      	IN   R30,SREG
000112 93ea      	ST   -Y,R30
                 ; 0000 0096   /* Timer 1 counts the low 16 bits, this interrupt updates the high 16 bits */
                 ; 0000 0097   timer_highword++;
000113 e1aa      	LDI  R26,LOW(_timer_highword)
000114 e0b2      	LDI  R27,HIGH(_timer_highword)
000115 940e 06bb 	CALL SUBOPT_0x0
                 ; 0000 0098 }
000117 91e9      	LD   R30,Y+
000118 bfef      	OUT  SREG,R30
000119 91f9      	LD   R31,Y+
00011a 91e9      	LD   R30,Y+
00011b 91b9      	LD   R27,Y+
00011c 91a9      	LD   R26,Y+
00011d 9518      	RETI
                 ; .FEND
                 ;
                 ;// SIGNAL(SIG_INTERRUPT0)
                 ;// {
                 ;//   /* Hardware interrupt 0 is a buttonpush */
                 ;//   measure_state = STATE_BUTTONDOWN;
                 ;// }
                 ;
                 ;/*
                 ;   The measure function does the cyclus of a capacitance measurement
                 ;   Returned is the number of clocks measured
                 ;
                 ;   The function relies on flags in the global rangemode value
                 ;   Input flags:
                 ;     RANGE_AUTO
                 ;     RANGE_HIGH
                 ;     RANGE_HIGH_THRESH
                 ;
                 ;   Output flags:
                 ;     RANGE_HIGH     (if RANGE_AUTO)
                 ;     RANGE_OVERFLOW
                 ;
                 ;*/
                 ;
                 ;#include <stdint.h>
                 ;void MUL_LONG_SHORT_S2(uint32_t x, uint16_t y, uint32_t *result)
                 ; 0000 00B2 {
                 _MUL_LONG_SHORT_S2:
                 ; .FSTART _MUL_LONG_SHORT_S2
                 ; 0000 00B3   // int16_t x_high = x >> 16;              // Integer part (signed)
                 ; 0000 00B4   // uint16_t x_low = x & 0xFFFF;           // Fractional part (unsigned)
                 ; 0000 00B5 
                 ; 0000 00B6   // int32_t part1 = (int32_t)x_high * y;   // Signed mult: integer part
                 ; 0000 00B7   // int32_t part2 = ((int32_t)x_low * y + 0x8000) >> 16; // Rounded fractional part
                 ; 0000 00B8 
                 ; 0000 00B9   // int32_t combined = part1 + part2;
                 ; 0000 00BA 
                 ; 0000 00BB   //*result = (uint32_t)combined;          // Cast final signed result to unsigned
                 ; 0000 00BC   uint16_t x_frac = x & 0xFFFF;
                 ; 0000 00BD   uint16_t x_int = x >> 16;
                 ; 0000 00BE 
                 ; 0000 00BF   uint32_t part1 = ((uint32_t)x_frac * y) >> 16;
                 ; 0000 00C0   uint32_t part2 = (uint32_t)x_int * y;
                 ; 0000 00C1   *result = (part2) + part1;
00011e 93ba      	ST   -Y,R27
00011f 93aa      	ST   -Y,R26
000120 9728      	SBIW R28,8
000121 940e 088f 	CALL __SAVELOCR4
                 ;	x -> Y+16
                 ;	y -> Y+14
                 ;	*result -> Y+12
                 ;	x_frac -> R16,R17
                 ;	x_int -> R18,R19
                 ;	part1 -> Y+8
                 ;	part2 -> Y+4
000123 89e8      	LDD  R30,Y+16
000124 89f9      	LDD  R31,Y+16+1
000125 018f      	MOVW R16,R30
                +
000126 89e8     +LDD R30 , Y + 16
000127 89f9     +LDD R31 , Y + 16 + 1
000128 896a     +LDD R22 , Y + 16 + 2
000129 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
00012a 940e 07e1 	CALL __LSRD16
00012c 019f      	MOVW R18,R30
00012d 01d8      	MOVW R26,R16
00012e 940e 06c1 	CALL SUBOPT_0x1
000130 940e 07e1 	CALL __LSRD16
                +
000132 87e8     +STD Y + 8 , R30
000133 87f9     +STD Y + 8 + 1 , R31
000134 876a     +STD Y + 8 + 2 , R22
000135 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000136 01d9      	MOVW R26,R18
000137 940e 06c1 	CALL SUBOPT_0x1
                +
000139 83ec     +STD Y + 4 , R30
00013a 83fd     +STD Y + 4 + 1 , R31
00013b 836e     +STD Y + 4 + 2 , R22
00013c 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                +
00013d 85e8     +LDD R30 , Y + 8
00013e 85f9     +LDD R31 , Y + 8 + 1
00013f 856a     +LDD R22 , Y + 8 + 2
000140 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
000141 940e 06ca 	CALL SUBOPT_0x2
000143 940e 07bd 	CALL __ADDD12
000145 85ac      	LDD  R26,Y+12
000146 85bd      	LDD  R27,Y+12+1
000147 940e 0844 	CALL __PUTDP1
                 ; 0000 00C2   // return result;
                 ; 0000 00C3 }
000149 940e 0896 	CALL __LOADLOCR4
00014b 940c 066c 	JMP  _0x20C0002
                 ; .FEND
                 ;// Multiply 16.16 fixed-point (x) by 0.16 fixed-point (y), return 16.16 fixed-point
                 ;/*uint32_t MUL_LONG_SHORT_S2(uint32_t x, uint16_t y) {
                 ;    uint16_t x_frac = x & 0xFFFF;
                 ;    uint16_t x_int = x >> 16;
                 ;    uint32_t part1 = ((uint32_t)x_frac * y) >> 16;
                 ;    uint32_t part2 = (uint32_t)x_int * y;
                 ;    uint32_t result = (part2) + part1;
                 ;    return result;
                 ;}  */
                 ;void eeprom_read(void)
                 ; 0000 00CE {
                 _eeprom_read:
                 ; .FSTART _eeprom_read
                 ; 0000 00CF   if (eeprom_read_byte((void *)EEPROM_HEADER) != 'C')
00014d e0a1      	LDI  R26,LOW(1)
00014e e0b0      	LDI  R27,HIGH(1)
00014f 940e 0866 	CALL __EEPROMRDB
000151 34e3      	CPI  R30,LOW(0x43)
000152 f009      	BREQ _0xC
                 ; 0000 00D0     return;
000153 9508      	RET
                 ; 0000 00D1 
                 ; 0000 00D2   if (eeprom_read_byte((void *)(EEPROM_HEADER + 1)) != 'D')
                 _0xC:
000154 e0a2      	LDI  R26,LOW(2)
000155 e0b0      	LDI  R27,HIGH(2)
000156 940e 0866 	CALL __EEPROMRDB
000158 34e4      	CPI  R30,LOW(0x44)
000159 f009      	BREQ _0xD
                 ; 0000 00D3     return;
00015a 9508      	RET
                 ; 0000 00D4 
                 ; 0000 00D5   eeprom_read_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
                 _0xD:
00015b 940e 06cf 	CALL SUBOPT_0x3
00015d 940e 04cb 	CALL _eeprom_read_block
                 ; 0000 00D6   eeprom_read_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFFSET), SIZE_OF_CALIB);
00015f 940e 06da 	CALL SUBOPT_0x4
000161 940e 04cb 	CALL _eeprom_read_block
                 ; 0000 00D7 }
000163 9508      	RET
                 ; .FEND
                 ;
                 ;void eeprom_write(void)
                 ; 0000 00DA {
                 _eeprom_write:
                 ; .FSTART _eeprom_write
                 ; 0000 00DB   eeprom_write_byte((void *)EEPROM_HEADER, 'C');
000164 e0a1      	LDI  R26,LOW(1)
000165 e0b0      	LDI  R27,HIGH(1)
000166 e4e3      	LDI  R30,LOW(67)
000167 940e 0872 	CALL __EEPROMWRB
                 ; 0000 00DC   eeprom_write_byte((void *)(EEPROM_HEADER + 1), 'D');
000169 e0a2      	LDI  R26,LOW(2)
00016a e0b0      	LDI  R27,HIGH(2)
00016b e4e4      	LDI  R30,LOW(68)
00016c 940e 0872 	CALL __EEPROMWRB
                 ; 0000 00DD 
                 ; 0000 00DE   eeprom_write_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET);
00016e 940e 06cf 	CALL SUBOPT_0x3
000170 940e 04e4 	CALL _eeprom_write_block
                 ; 0000 00DF   eeprom_write_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFFSET), SIZE_OF_CALIB);
000172 940e 06da 	CALL SUBOPT_0x4
000174 940e 04e4 	CALL _eeprom_write_block
                 ; 0000 00E0 }
000176 9508      	RET
                 ; .FEND
                 ;
                 ;void lcd_string(const char *str, unsigned char pos)
                 ; 0000 00E3 {
                 _lcd_string:
                 ; .FSTART _lcd_string
                 ; 0000 00E4   unsigned char row = (pos >= 16) ? 1 : 0;
                 ; 0000 00E5   unsigned char col = (pos % 16);
                 ; 0000 00E6   lcd_gotoxy(col, row);
000177 93aa      	ST   -Y,R26
000178 931a      	ST   -Y,R17
000179 930a      	ST   -Y,R16
                 ;	*str -> Y+3
                 ;	pos -> Y+2
                 ;	row -> R17
                 ;	col -> R16
00017a 81aa      	LDD  R26,Y+2
00017b 31a0      	CPI  R26,LOW(0x10)
00017c f010      	BRLO _0xE
00017d e0e1      	LDI  R30,LOW(1)
00017e c001      	RJMP _0xF
                 _0xE:
00017f e0e0      	LDI  R30,LOW(0)
                 _0xF:
000180 2f1e      	MOV  R17,R30
000181 81ea      	LDD  R30,Y+2
000182 e0f0      	LDI  R31,0
000183 e0af      	LDI  R26,LOW(15)
000184 e0b0      	LDI  R27,HIGH(15)
000185 940e 0830 	CALL __MANDW12
000187 2f0e      	MOV  R16,R30
000188 930a      	ST   -Y,R16
000189 2fa1      	MOV  R26,R17
00018a 940e 045e 	CALL _lcd_gotoxy
                 ; 0000 00E7   lcd_puts(str);
00018c 81ab      	LDD  R26,Y+3
00018d 81bc      	LDD  R27,Y+3+1
00018e 940e 048c 	CALL _lcd_puts
                 ; 0000 00E8 }
000190 940c 0536 	JMP  _0x20C0004
                 ; .FEND
                 ;
                 ;/*unsigned char long2ascii(char *buf, unsigned long val)
                 ;{
                 ;  // Converts val to a 5-digit ASCII right-aligned string, returns # of digits
                 ;  sprintf(buf, "%05lu", val); // e.g., 00042
                 ;  return 5;
                 ;}   */
                 ;char long2ascii(char *target, unsigned long value)
                 ; 0000 00F1 {
                 _long2ascii:
                 ; .FSTART _long2ascii
                 ; 0000 00F2   unsigned char p, pos=0;
                 ; 0000 00F3   unsigned char numbernow=0;
                 ; 0000 00F4   char ret=0;
                 ; 0000 00F5 
                 ; 0000 00F6   for (p=0;(p<10) && (pos<5);p++) {
000192 940e 0861 	CALL __PUTPARD2
000194 940e 088f 	CALL __SAVELOCR4
                 ;	*target -> Y+8
                 ;	value -> Y+4
                 ;	p -> R17
                 ;	pos -> R16
                 ;	numbernow -> R19
                 ;	ret -> R18
000196 e000      	LDI  R16,0
000197 e030      	LDI  R19,0
000198 e020      	LDI  R18,0
000199 e010      	LDI  R17,LOW(0)
                 _0x12:
00019a 301a      	CPI  R17,10
00019b f410      	BRSH _0x14
00019c 3005      	CPI  R16,5
00019d f008      	BRLO _0x15
                 _0x14:
00019e c050      	RJMP _0x13
                 _0x15:
                 ; 0000 00F7 
                 ; 0000 00F8     if (numbernow) {
00019f 3030      	CPI  R19,0
0001a0 f0c1      	BREQ _0x16
                 ; 0000 00F9       /* Eventually place dot */
                 ; 0000 00FA       /* Notice the nice fallthrough construction. */
                 ; 0000 00FB       switch(p) {
0001a1 2fe1      	MOV  R30,R17
0001a2 e0f0      	LDI  R31,0
                 ; 0000 00FC       case 1:
0001a3 30e1      	CPI  R30,LOW(0x1)
0001a4 e0a0      	LDI  R26,HIGH(0x1)
0001a5 07fa      	CPC  R31,R26
0001a6 f411      	BRNE _0x1A
                 ; 0000 00FD         ret++;
0001a7 5f2f      	SUBI R18,-1
                 ; 0000 00FE       case 4:
0001a8 c004      	RJMP _0x1B
                 _0x1A:
0001a9 30e4      	CPI  R30,LOW(0x4)
0001aa e0a0      	LDI  R26,HIGH(0x4)
0001ab 07fa      	CPC  R31,R26
0001ac f411      	BRNE _0x1C
                 _0x1B:
                 ; 0000 00FF         ret++;
0001ad 5f2f      	SUBI R18,-1
                 ; 0000 0100       case 7:
0001ae c004      	RJMP _0x1D
                 _0x1C:
0001af 30e7      	CPI  R30,LOW(0x7)
0001b0 e0a0      	LDI  R26,HIGH(0x7)
0001b1 07fa      	CPC  R31,R26
0001b2 f431      	BRNE _0x19
                 _0x1D:
                 ; 0000 0101         ret++;
0001b3 5f2f      	SUBI R18,-1
                 ; 0000 0102         target[pos] = '.';
0001b4 940e 06e5 	CALL SUBOPT_0x5
0001b6 e2ee      	LDI  R30,LOW(46)
0001b7 93ec      	ST   X,R30
                 ; 0000 0103         pos++;
0001b8 5f0f      	SUBI R16,-1
                 ; 0000 0104       }
                 _0x19:
                 ; 0000 0105     }
                 ; 0000 0106 
                 ; 0000 0107     if (value < tenths_tab[p]) {
                 _0x16:
0001b9 940e 06eb 	CALL SUBOPT_0x6
0001bb f4a8      	BRSH _0x1F
                 ; 0000 0108       if (numbernow) {
0001bc 3030      	CPI  R19,0
0001bd f021      	BREQ _0x20
                 ; 0000 0109         /* Inside number, put a zero */
                 ; 0000 010A         target[pos] = '0';
0001be 940e 06e5 	CALL SUBOPT_0x5
0001c0 e3e0      	LDI  R30,LOW(48)
0001c1 c00c      	RJMP _0x67
                 ; 0000 010B         pos++;
                 ; 0000 010C       }
                 ; 0000 010D       else {
                 _0x20:
                 ; 0000 010E         /* Check if we need to pad with spaces */
                 ; 0000 010F         if (p>=6) {
0001c2 3016      	CPI  R17,6
0001c3 f028      	BRLO _0x22
                 ; 0000 0110           target[pos] = ' ';
0001c4 940e 06e5 	CALL SUBOPT_0x5
0001c6 e2e0      	LDI  R30,LOW(32)
0001c7 93ec      	ST   X,R30
                 ; 0000 0111           pos++;
0001c8 5f0f      	SUBI R16,-1
                 ; 0000 0112         }
                 ; 0000 0113 
                 ; 0000 0114         if (p==6) {
                 _0x22:
0001c9 3016      	CPI  R17,6
0001ca f429      	BRNE _0x23
                 ; 0000 0115           /* We also need to place a space instead of . */
                 ; 0000 0116           target[pos] = ' ';
0001cb 940e 06e5 	CALL SUBOPT_0x5
0001cd e2e0      	LDI  R30,LOW(32)
                 _0x67:
0001ce 93ec      	ST   X,R30
                 ; 0000 0117           pos++;
0001cf 5f0f      	SUBI R16,-1
                 ; 0000 0118         }
                 ; 0000 0119       }
                 _0x23:
                 ; 0000 011A     }
                 ; 0000 011B     else {
0001d0 c01c      	RJMP _0x24
                 _0x1F:
                 ; 0000 011C       target[pos] = '0';
0001d1 940e 06e5 	CALL SUBOPT_0x5
0001d3 e3e0      	LDI  R30,LOW(48)
0001d4 93ec      	ST   X,R30
                 ; 0000 011D       while (value >= tenths_tab[p]) {
                 _0x25:
0001d5 940e 06eb 	CALL SUBOPT_0x6
0001d7 f098      	BRLO _0x27
                 ; 0000 011E         target[pos]++;
0001d8 940e 06e5 	CALL SUBOPT_0x5
0001da 91ec      	LD   R30,X
0001db 5fef      	SUBI R30,-LOW(1)
0001dc 93ec      	ST   X,R30
                 ; 0000 011F         value -= tenths_tab[p];
0001dd 2fe1      	MOV  R30,R17
0001de eda2      	LDI  R26,LOW(_tenths_tab)
0001df e0b1      	LDI  R27,HIGH(_tenths_tab)
0001e0 940e 06f9 	CALL SUBOPT_0x7
0001e2 940e 06ca 	CALL SUBOPT_0x2
0001e4 940e 07c7 	CALL __SUBD21
                +
0001e6 83ac     +STD Y + 4 , R26
0001e7 83bd     +STD Y + 4 + 1 , R27
0001e8 838e     +STD Y + 4 + 2 , R24
0001e9 839f     +STD Y + 4 + 3 , R25
                 	__PUTD2S 4
                 ; 0000 0120       }
0001ea cfea      	RJMP _0x25
                 _0x27:
                 ; 0000 0121       pos++;
0001eb 5f0f      	SUBI R16,-1
                 ; 0000 0122       numbernow = 1;
0001ec e031      	LDI  R19,LOW(1)
                 ; 0000 0123     }
                 _0x24:
                 ; 0000 0124   }
0001ed 5f1f      	SUBI R17,-1
0001ee cfab      	RJMP _0x12
                 _0x13:
                 ; 0000 0125 
                 ; 0000 0126   return ret;
0001ef 2fe2      	MOV  R30,R18
0001f0 940c 04fc 	JMP  _0x20C0005
                 ; 0000 0127 }
                 ; .FEND
                 ;
                 ;long measure(void)
                 ; 0000 012A {
                 _measure:
                 ; .FSTART _measure
                 ; 0000 012B   unsigned short i;
                 ; 0000 012C 
                 ; 0000 012D   measure_state = STATE_IDLE;
0001f2 931a      	ST   -Y,R17
0001f3 930a      	ST   -Y,R16
                 ;	i -> R16,R17
0001f4 e0e0      	LDI  R30,LOW(0)
0001f5 93e0 021c 	STS  _measure_state,R30
                 ; 0000 012E 
                 ; 0000 012F   /* Discharge cap until below low threshold + some extra */
                 ; 0000 0130   ADMUX = ADMUX_LOW;
0001f7 e0e1      	LDI  R30,LOW(1)
0001f8 b9e7      	OUT  0x7,R30
                 ; 0000 0131   PULLDOWN_RANGE; /* Use range signal as pull down */
0001f9 9895      	CBI  0x12,5
0001fa 9a8d      	SBI  0x11,5
                 ; 0000 0132 
                 ; 0000 0133   while (1)
                 _0x28:
                 ; 0000 0134   {
                 ; 0000 0135     /* Enable comperator and check value */
                 ; 0000 0136     DISCHARGE_OFF;
0001fb 988e      	CBI  0x11,6
                 ; 0000 0137     delay_ms(1);
0001fc 940e 0701 	CALL SUBOPT_0x8
                 ; 0000 0138 
                 ; 0000 0139     /* This value must be checked in every loop */
                 ; 0000 013A     if (BUTTON_PUSHED)
0001fe 9982      	SBIC 0x10,2
0001ff c003      	RJMP _0x2B
                 ; 0000 013B       return 0;
000200 940e 0705 	CALL SUBOPT_0x9
000202 c089      	RJMP _0x20C0007
                 ; 0000 013C 
                 ; 0000 013D     if (!(ACSR & (1 << ACO)))
                 _0x2B:
000203 9b45      	SBIS 0x8,5
                 ; 0000 013E       break;
000204 c006      	RJMP _0x2A
                 ; 0000 013F 
                 ; 0000 0140     /* Discharge for a while */
                 ; 0000 0141     DISCHARGE_ON;
000205 9a8e      	SBI  0x11,6
                 ; 0000 0142     delay_ms(10);
000206 e0aa      	LDI  R26,LOW(10)
000207 e0b0      	LDI  R27,0
000208 940e 07af 	CALL _delay_ms
                 ; 0000 0143   }
00020a cff0      	RJMP _0x28
                 _0x2A:
                 ; 0000 0144 
                 ; 0000 0145   DISCHARGE_ON;
00020b 9a8e      	SBI  0x11,6
                 ; 0000 0146   delay_ms(EXTRA_DISCHARGE_MS);
00020c e6a4      	LDI  R26,LOW(100)
00020d e0b0      	LDI  R27,0
00020e 940e 07af 	CALL _delay_ms
                 ; 0000 0147 
                 ; 0000 0148   /* Prepare: reset timer, low range */
                 ; 0000 0149   TIMER_STOP;
000210 e0e0      	LDI  R30,LOW(0)
000211 bdee      	OUT  0x2E,R30
                 ; 0000 014A   TIMER_VALUE = 0;
000212 e0e0      	LDI  R30,LOW(0)
000213 e0f0      	LDI  R31,HIGH(0)
000214 bdfd      	OUT  0x2C+1,R31
000215 bdec      	OUT  0x2C,R30
                 ; 0000 014B   timer_highword = 0;
000216 93e0 021a 	STS  _timer_highword,R30
000218 93e0 021b 	STS  _timer_highword+1,R30
                 ; 0000 014C 
                 ; 0000 014D   LOW_RANGE;
00021a 988d      	CBI  0x11,5
00021b 9895      	CBI  0x12,5
                 ; 0000 014E 
                 ; 0000 014F   measure_state = STATE_LOW_THRESH;
00021c e0e1      	LDI  R30,LOW(1)
00021d 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0150 
                 ; 0000 0151   /* High or medium threshold */
                 ; 0000 0152   if (rangemode & RANGE_HIGH_THRESH)
00021f fe50      	SBRS R5,0
000220 c002      	RJMP _0x2D
                 ; 0000 0153     set_admux = ADMUX_HIGH;
000221 e0e3      	LDI  R30,LOW(3)
000222 c001      	RJMP _0x68
                 ; 0000 0154   else
                 _0x2D:
                 ; 0000 0155     set_admux = ADMUX_MEDIUM;
000223 e0e2      	LDI  R30,LOW(2)
                 _0x68:
000224 93e0 021d 	STS  _set_admux,R30
                 ; 0000 0156 
                 ; 0000 0157   /* Apply step */
                 ; 0000 0158   LED_ON;
000226 9894      	CBI  0x12,4
                 ; 0000 0159   DISCHARGE_OFF;
000227 988e      	CBI  0x11,6
                 ; 0000 015A 
                 ; 0000 015B   if (rangemode & RANGE_AUTO)
000228 fe52      	SBRS R5,2
000229 c028      	RJMP _0x2F
                 ; 0000 015C   {
                 ; 0000 015D 
                 ; 0000 015E     /* Autorange: See if low range produces something before LOW_RANGE_TIMEOUT ms */
                 ; 0000 015F     i = 0;
                +
00022a e000     +LDI R16 , LOW ( 0 )
00022b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0160     while ((measure_state == STATE_LOW_THRESH) && (++i < LOW_RANGE_TIMEOUT))
                 _0x30:
00022c 91a0 021c 	LDS  R26,_measure_state
00022e 30a1      	CPI  R26,LOW(0x1)
00022f f439      	BRNE _0x33
000230 01f8      	MOVW R30,R16
000231 9631      	ADIW R30,1
000232 018f      	MOVW R16,R30
000233 3fe4      	CPI  R30,LOW(0x1F4)
000234 e0a1      	LDI  R26,HIGH(0x1F4)
000235 07fa      	CPC  R31,R26
000236 f008      	BRLO _0x34
                 _0x33:
000237 c008      	RJMP _0x32
                 _0x34:
                 ; 0000 0161     {
                 ; 0000 0162       delay_ms(1);
000238 940e 0701 	CALL SUBOPT_0x8
                 ; 0000 0163 
                 ; 0000 0164       /* This value must be checked in every loop */
                 ; 0000 0165       if (BUTTON_PUSHED)
00023a 9982      	SBIC 0x10,2
00023b c003      	RJMP _0x35
                 ; 0000 0166         return 0;
00023c 940e 0705 	CALL SUBOPT_0x9
00023e c04d      	RJMP _0x20C0007
                 ; 0000 0167     }
                 _0x35:
00023f cfec      	RJMP _0x30
                 _0x32:
                 ; 0000 0168 
                 ; 0000 0169     if (i >= LOW_RANGE_TIMEOUT)
                +
000240 3f04     +CPI R16 , LOW ( 500 )
000241 e0e1     +LDI R30 , HIGH ( 500 )
000242 071e     +CPC R17 , R30
                 	__CPWRN 16,17,500
000243 f058      	BRLO _0x36
                 ; 0000 016A     {
                 ; 0000 016B       /* low range timeout, go to high range (better discharge a little first) */
                 ; 0000 016C       DISCHARGE_ON;
000244 9a8e      	SBI  0x11,6
                 ; 0000 016D       delay_ms(EXTRA_DISCHARGE_MS);
000245 e6a4      	LDI  R26,LOW(100)
000246 e0b0      	LDI  R27,0
000247 940e 07af 	CALL _delay_ms
                 ; 0000 016E       DISCHARGE_OFF;
000249 988e      	CBI  0x11,6
                 ; 0000 016F       HIGH_RANGE;
00024a 9a95      	SBI  0x12,5
00024b 9a8d      	SBI  0x11,5
                 ; 0000 0170       rangemode |= RANGE_HIGH;
00024c e0e2      	LDI  R30,LOW(2)
00024d 2a5e      	OR   R5,R30
                 ; 0000 0171     }
                 ; 0000 0172     else
00024e c002      	RJMP _0x37
                 _0x36:
                 ; 0000 0173     {
                 ; 0000 0174       /* low range was ok, set flag accordingly */
                 ; 0000 0175       rangemode &= ~RANGE_HIGH;
00024f efed      	LDI  R30,LOW(253)
000250 225e      	AND  R5,R30
                 ; 0000 0176     }
                 _0x37:
                 ; 0000 0177   }
                 ; 0000 0178   else if (rangemode & RANGE_HIGH)
000251 c004      	RJMP _0x38
                 _0x2F:
000252 fe51      	SBRS R5,1
000253 c002      	RJMP _0x39
                 ; 0000 0179   {
                 ; 0000 017A     HIGH_RANGE;
000254 9a95      	SBI  0x12,5
000255 9a8d      	SBI  0x11,5
                 ; 0000 017B   }
                 ; 0000 017C 
                 ; 0000 017D   /* Wait for completion, timing out after HIGH_RANGE_TIMEOUT */
                 ; 0000 017E   i = 0;
                 _0x39:
                 _0x38:
                +
000256 e000     +LDI R16 , LOW ( 0 )
000257 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 017F   while ((measure_state != STATE_DONE) && (++i < HIGH_RANGE_TIMEOUT))
                 _0x3A:
000258 91a0 021c 	LDS  R26,_measure_state
00025a 30a3      	CPI  R26,LOW(0x3)
00025b f039      	BREQ _0x3D
00025c 01f8      	MOVW R30,R16
00025d 9631      	ADIW R30,1
00025e 018f      	MOVW R16,R30
00025f 31e0      	CPI  R30,LOW(0x2710)
000260 e2a7      	LDI  R26,HIGH(0x2710)
000261 07fa      	CPC  R31,R26
000262 f008      	BRLO _0x3E
                 _0x3D:
000263 c008      	RJMP _0x3C
                 _0x3E:
                 ; 0000 0180   {
                 ; 0000 0181     delay_ms(1);
000264 940e 0701 	CALL SUBOPT_0x8
                 ; 0000 0182 
                 ; 0000 0183     /* This value must be checked in every loop */
                 ; 0000 0184     if (BUTTON_PUSHED)
000266 9982      	SBIC 0x10,2
000267 c003      	RJMP _0x3F
                 ; 0000 0185       return 0;
000268 940e 0705 	CALL SUBOPT_0x9
00026a c021      	RJMP _0x20C0007
                 ; 0000 0186   }
                 _0x3F:
00026b cfec      	RJMP _0x3A
                 _0x3C:
                 ; 0000 0187 
                 ; 0000 0188   /* Done, discharge cap now */
                 ; 0000 0189   LOW_RANGE;
00026c 988d      	CBI  0x11,5
00026d 9895      	CBI  0x12,5
                 ; 0000 018A   DISCHARGE_ON;
00026e 9a8e      	SBI  0x11,6
                 ; 0000 018B   LED_OFF;
00026f 9a94      	SBI  0x12,4
                 ; 0000 018C 
                 ; 0000 018D   if (measure_state != STATE_DONE)
000270 91a0 021c 	LDS  R26,_measure_state
000272 30a3      	CPI  R26,LOW(0x3)
000273 f019      	BREQ _0x40
                 ; 0000 018E     rangemode |= RANGE_OVERFLOW;
000274 e0e8      	LDI  R30,LOW(8)
000275 2a5e      	OR   R5,R30
                 ; 0000 018F   else
000276 c002      	RJMP _0x41
                 _0x40:
                 ; 0000 0190     rangemode &= ~RANGE_OVERFLOW;
000277 efe7      	LDI  R30,LOW(247)
000278 225e      	AND  R5,R30
                 ; 0000 0191 
                 ; 0000 0192   measure_state = STATE_IDLE;
                 _0x41:
000279 e0e0      	LDI  R30,LOW(0)
00027a 93e0 021c 	STS  _measure_state,R30
                 ; 0000 0193 
                 ; 0000 0194   return ((unsigned long)timer_highword << 16) + TIMER_VALUE;
00027c 91e0 021a 	LDS  R30,_timer_highword
00027e 91f0 021b 	LDS  R31,_timer_highword+1
000280 2766      	CLR  R22
000281 2777      	CLR  R23
000282 940e 07e6 	CALL __LSLD16
000284 01df      	MOVW R26,R30
000285 01cb      	MOVW R24,R22
000286 b5ec      	IN   R30,0x2C
000287 b5fd      	IN   R31,0x2C+1
000288 2766      	CLR  R22
000289 2777      	CLR  R23
00028a 940e 07bd 	CALL __ADDD12
                 _0x20C0007:
00028c 9109      	LD   R16,Y+
00028d 9119      	LD   R17,Y+
00028e 9508      	RET
                 ; 0000 0195 }
                 ; .FEND
                 ;
                 ;/*
                 ;   This function deals with value according to the global rangemode flag,
                 ;   and shows the result on LCD.
                 ;
                 ;   LCD should preferably be cleared.
                 ;
                 ;   Routine is rather slow
                 ;*/
                 ;
                 ;void calc_and_show(long value)
                 ; 0000 01A1 {
                 _calc_and_show:
                 ; .FSTART _calc_and_show
                 ; 0000 01A2   unsigned char b;
                 ; 0000 01A3   unsigned long l;
                 ; 0000 01A4 
                 ; 0000 01A5   if (rangemode & RANGE_AUTO)
00028f 940e 0861 	CALL __PUTPARD2
000291 9724      	SBIW R28,4
000292 931a      	ST   -Y,R17
                 ;	value -> Y+5
                 ;	b -> R17
                 ;	l -> Y+1
000293 fe52      	SBRS R5,2
000294 c003      	RJMP _0x42
                 ; 0000 01A6     lcd_string("Auto ", 0);
                +
000295 ebe5     +LDI R30 , LOW ( _0x43 + ( 0 ) )
000296 e0f1     +LDI R31 , HIGH ( _0x43 + ( 0 ) )
                 	__POINTW1MN _0x43,0
000297 c002      	RJMP _0x69
                 ; 0000 01A7   else
                 _0x42:
                 ; 0000 01A8     lcd_string("Force", 0);
                +
000298 ebeb     +LDI R30 , LOW ( _0x43 + ( 6 ) )
000299 e0f1     +LDI R31 , HIGH ( _0x43 + ( 6 ) )
                 	__POINTW1MN _0x43,6
                 _0x69:
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
00029c e0a0      	LDI  R26,LOW(0)
00029d ded9      	RCALL _lcd_string
                 ; 0000 01A9 
                 ; 0000 01AA   if (rangemode & RANGE_HIGH)
00029e fe51      	SBRS R5,1
00029f c003      	RJMP _0x45
                 ; 0000 01AB     lcd_string(" high", 16);
                +
0002a0 ece1     +LDI R30 , LOW ( _0x43 + ( 12 ) )
0002a1 e0f1     +LDI R31 , HIGH ( _0x43 + ( 12 ) )
                 	__POINTW1MN _0x43,12
0002a2 c002      	RJMP _0x6A
                 ; 0000 01AC   else
                 _0x45:
                 ; 0000 01AD     lcd_string(" low ", 16);
                +
0002a3 ece7     +LDI R30 , LOW ( _0x43 + ( 18 ) )
0002a4 e0f1     +LDI R31 , HIGH ( _0x43 + ( 18 ) )
                 	__POINTW1MN _0x43,18
                 _0x6A:
0002a5 93fa      	ST   -Y,R31
0002a6 93ea      	ST   -Y,R30
0002a7 e1a0      	LDI  R26,LOW(16)
0002a8 dece      	RCALL _lcd_string
                 ; 0000 01AE 
                 ; 0000 01AF   if (rangemode & RANGE_OVERFLOW)
0002a9 fe53      	SBRS R5,3
0002aa c017      	RJMP _0x47
                 ; 0000 01B0   {
                 ; 0000 01B1     /* Todo - this smarter */
                 ; 0000 01B2     lcdbuffer[0] = ' ';
0002ab e2e0      	LDI  R30,LOW(32)
0002ac 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01B3     lcdbuffer[1] = ' ';
                +
0002ae 93e0 01fb+STS _lcdbuffer + ( 1 ) , R30
                 	__PUTB1MN _lcdbuffer,1
                 ; 0000 01B4     lcdbuffer[2] = ' ';
                +
0002b0 93e0 01fc+STS _lcdbuffer + ( 2 ) , R30
                 	__PUTB1MN _lcdbuffer,2
                 ; 0000 01B5     lcdbuffer[3] = 'E';
0002b2 e4e5      	LDI  R30,LOW(69)
                +
0002b3 93e0 01fd+STS _lcdbuffer + ( 3 ) , R30
                 	__PUTB1MN _lcdbuffer,3
                 ; 0000 01B6     lcdbuffer[4] = 'r';
0002b5 e7e2      	LDI  R30,LOW(114)
                +
0002b6 93e0 01fe+STS _lcdbuffer + ( 4 ) , R30
                 	__PUTB1MN _lcdbuffer,4
                 ; 0000 01B7     lcdbuffer[5] = 'r';
                +
0002b8 93e0 01ff+STS _lcdbuffer + ( 5 ) , R30
                 	__PUTB1MN _lcdbuffer,5
                 ; 0000 01B8     lcdbuffer[6] = 'o';
0002ba e6ef      	LDI  R30,LOW(111)
                +
0002bb 93e0 0200+STS _lcdbuffer + ( 6 ) , R30
                 	__PUTB1MN _lcdbuffer,6
                 ; 0000 01B9     lcdbuffer[7] = 'r';
0002bd e7e2      	LDI  R30,LOW(114)
                +
0002be 93e0 0201+STS _lcdbuffer + ( 7 ) , R30
                 	__PUTB1MN _lcdbuffer,7
                 ; 0000 01BA     lcdbuffer[8] = ' ';
0002c0 e2e0      	LDI  R30,LOW(32)
0002c1 c052      	RJMP _0x6B
                 ; 0000 01BB     lcdbuffer[9] = 0;
                 ; 0000 01BC   }
                 ; 0000 01BD   else
                 _0x47:
                 ; 0000 01BE   {
                 ; 0000 01BF     /* Select calibration value */
                 ; 0000 01C0     b = rangemode & 3;
0002c2 2de5      	MOV  R30,R5
0002c3 70e3      	ANDI R30,LOW(0x3)
0002c4 2f1e      	MOV  R17,R30
                 ; 0000 01C1 
                 ; 0000 01C2     if (calib_offset[b] > value)
0002c5 940e 070a 	CALL SUBOPT_0xA
0002c7 01df      	MOVW R26,R30
0002c8 01cb      	MOVW R24,R22
                +
0002c9 81ed     +LDD R30 , Y + 5
0002ca 81fe     +LDD R31 , Y + 5 + 1
0002cb 816f     +LDD R22 , Y + 5 + 2
0002cc 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
0002cd 940e 0883 	CALL __CPD12
0002cf f480      	BRSH _0x49
                 ; 0000 01C3     {
                 ; 0000 01C4       lcdbuffer[0] = '-';
0002d0 e2ed      	LDI  R30,LOW(45)
0002d1 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01C5       value = calib_offset[b] - value;
0002d3 940e 070a 	CALL SUBOPT_0xA
                +
0002d5 81ad     +LDD R26 , Y + 5
0002d6 81be     +LDD R27 , Y + 5 + 1
0002d7 818f     +LDD R24 , Y + 5 + 2
0002d8 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
0002d9 940e 07c2 	CALL __SUBD12
                +
0002db 83ed     +STD Y + 5 , R30
0002dc 83fe     +STD Y + 5 + 1 , R31
0002dd 836f     +STD Y + 5 + 2 , R22
0002de 8778     +STD Y + 5 + 3 , R23
                 	__PUTD1S 5
                 ; 0000 01C6     }
                 ; 0000 01C7     else
0002df c00f      	RJMP _0x4A
                 _0x49:
                 ; 0000 01C8     {
                 ; 0000 01C9       lcdbuffer[0] = ' ';
0002e0 e2e0      	LDI  R30,LOW(32)
0002e1 93e0 01fa 	STS  _lcdbuffer,R30
                 ; 0000 01CA       value = value - calib_offset[b];
0002e3 940e 070a 	CALL SUBOPT_0xA
                +
0002e5 81ad     +LDD R26 , Y + 5
0002e6 81be     +LDD R27 , Y + 5 + 1
0002e7 818f     +LDD R24 , Y + 5 + 2
0002e8 8598     +LDD R25 , Y + 5 + 3
                 	__GETD2S 5
0002e9 940e 07c7 	CALL __SUBD21
                +
0002eb 83ad     +STD Y + 5 , R26
0002ec 83be     +STD Y + 5 + 1 , R27
0002ed 838f     +STD Y + 5 + 2 , R24
0002ee 8798     +STD Y + 5 + 3 , R25
                 	__PUTD2S 5
                 ; 0000 01CB     }
                 _0x4A:
                 ; 0000 01CC     // sprintf(buf, "before mul : %u", 2);  // or whatever variable
                 ; 0000 01CD     // lcd_string(buf,0);
                 ; 0000 01CE     // delay_ms(1000);
                 ; 0000 01CF     MUL_LONG_SHORT_S2(value, calib[b], &l);
                +
0002ef 81ed     +LDD R30 , Y + 5
0002f0 81fe     +LDD R31 , Y + 5 + 1
0002f1 816f     +LDD R22 , Y + 5 + 2
0002f2 8578     +LDD R23 , Y + 5 + 3
                 	__GETD1S 5
0002f3 940e 085c 	CALL __PUTPARD1
0002f5 2fe1      	MOV  R30,R17
0002f6 940e 070e 	CALL SUBOPT_0xB
0002f8 940e 0714 	CALL SUBOPT_0xC
0002fa 01de      	MOVW R26,R28
0002fb 9617      	ADIW R26,7
0002fc de21      	RCALL _MUL_LONG_SHORT_S2
                 ; 0000 01D0     // sprintf(buf, "after mul: %u", l);  // or whatever variable
                 ; 0000 01D1     // lcd_string(buf,0);
                 ; 0000 01D2     // delay_ms(1000);
                 ; 0000 01D3     b = long2ascii(lcdbuffer + 1, l);
                +
0002fd efeb     +LDI R30 , LOW ( _lcdbuffer + ( 1 ) )
0002fe e0f1     +LDI R31 , HIGH ( _lcdbuffer + ( 1 ) )
                 	__POINTW1MN _lcdbuffer,1
0002ff 93fa      	ST   -Y,R31
000300 93ea      	ST   -Y,R30
                +
000301 81ab     +LDD R26 , Y + 3
000302 81bc     +LDD R27 , Y + 3 + 1
000303 818d     +LDD R24 , Y + 3 + 2
000304 819e     +LDD R25 , Y + 3 + 3
                 	__GETD2S 3
000305 de8c      	RCALL _long2ascii
000306 2f1e      	MOV  R17,R30
                 ; 0000 01D4 
                 ; 0000 01D5     /* High range shifts 1E3 */
                 ; 0000 01D6     if (rangemode & RANGE_HIGH)
000307 fc51      	SBRC R5,1
                 ; 0000 01D7       b++;
000308 5f1f      	SUBI R17,-1
                 ; 0000 01D8 
                 ; 0000 01D9     lcdbuffer[6] = ' ';
000309 e2e0      	LDI  R30,LOW(32)
                +
00030a 93e0 0200+STS _lcdbuffer + ( 6 ) , R30
                 	__PUTB1MN _lcdbuffer,6
                 ; 0000 01DA     lcdbuffer[7] = decades[b]; /* range = 1 shifts 1E3 */
00030c 2fe1      	MOV  R30,R17
00030d e0f0      	LDI  R31,0
00030e 53e3      	SUBI R30,LOW(-_decades)
00030f 4ffe      	SBCI R31,HIGH(-_decades)
000310 81e0      	LD   R30,Z
                +
000311 93e0 0201+STS _lcdbuffer + ( 7 ) , R30
                 	__PUTB1MN _lcdbuffer,7
                 ; 0000 01DB     lcdbuffer[8] = 'F';
000313 e4e6      	LDI  R30,LOW(70)
                 _0x6B:
                +
000314 93e0 0202+STS _lcdbuffer + ( 8 ) , R30
                 	__PUTB1MN _lcdbuffer,8
                 ; 0000 01DC     lcdbuffer[9] = 0;
000316 e0e0      	LDI  R30,LOW(0)
                +
000317 93e0 0203+STS _lcdbuffer + ( 9 ) , R30
                 	__PUTB1MN _lcdbuffer,9
                 ; 0000 01DD   }
                 ; 0000 01DE     // sprintf(buf, "after ascii: %u", decades[b]); // or whatever variable
                 ; 0000 01DF     //lcd_string(buf, 0);
                 ; 0000 01E0     //delay_ms(1000);
                 ; 0000 01E1   /* Write high threshold in first line, low threshold in second */
                 ; 0000 01E2   if (rangemode & RANGE_HIGH_THRESH)
000319 fe50      	SBRS R5,0
00031a c002      	RJMP _0x4C
                 ; 0000 01E3     b = 7;
00031b e017      	LDI  R17,LOW(7)
                 ; 0000 01E4   else
00031c c001      	RJMP _0x4D
                 _0x4C:
                 ; 0000 01E5     b = 23;
00031d e117      	LDI  R17,LOW(23)
                 ; 0000 01E6    // sprintf(buf, "%u", lcdbuffer);  // or whatever variable
                 ; 0000 01E7     //lcd_string(buf,b);
                 ; 0000 01E8   lcd_string(lcdbuffer, b);
                 _0x4D:
00031e efea      	LDI  R30,LOW(_lcdbuffer)
00031f e0f1      	LDI  R31,HIGH(_lcdbuffer)
000320 93fa      	ST   -Y,R31
000321 93ea      	ST   -Y,R30
000322 2fa1      	MOV  R26,R17
000323 de53      	RCALL _lcd_string
                 ; 0000 01E9 
                 ; 0000 01EA }
000324 8118      	LDD  R17,Y+0
000325 9629      	ADIW R28,9
000326 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x43:
0001b5           	.BYTE 0x18
                 ;
                 ;void calibrate_zero(void)
                 ; 0000 01ED {
                 
                 	.CSEG
                 _calibrate_zero:
                 ; .FSTART _calibrate_zero
                 ; 0000 01EE   char oldrange = rangemode;
                 ; 0000 01EF   unsigned long l;
                 ; 0000 01F0 
                 ; 0000 01F1   rangemode = 0;
000327 940e 071b 	CALL SUBOPT_0xD
                 ;	oldrange -> R17
                 ;	l -> Y+1
                 ; 0000 01F2 
                 ; 0000 01F3   l = measure();
                 ; 0000 01F4   l = measure();
000329 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 01F5 
                 ; 0000 01F6   calib_offset[rangemode] = l;
00032b 940e 072d 	CALL SUBOPT_0xF
                 ; 0000 01F7 
                 ; 0000 01F8   rangemode = RANGE_HIGH_THRESH;
00032d e0e1      	LDI  R30,LOW(1)
00032e 2e5e      	MOV  R5,R30
                 ; 0000 01F9 
                 ; 0000 01FA   l = measure();
00032f 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 01FB   l = measure();
000331 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 01FC 
                 ; 0000 01FD   calib_offset[rangemode] = l;
000333 940e 072d 	CALL SUBOPT_0xF
                 ; 0000 01FE 
                 ; 0000 01FF   rangemode = oldrange;
000335 2e51      	MOV  R5,R17
                 ; 0000 0200 }
000336 8118      	LDD  R17,Y+0
000337 940c 0538 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;void calibrate(void)
                 ; 0000 0203 {
                 _calibrate:
                 ; .FSTART _calibrate
                 ; 0000 0204   char oldrange = rangemode;
                 ; 0000 0205   unsigned long value;
                 ; 0000 0206 
                 ; 0000 0207   rangemode = 0;
000339 940e 071b 	CALL SUBOPT_0xD
                 ;	oldrange -> R17
                 ;	value -> Y+1
                 ; 0000 0208   value = measure();
                 ; 0000 0209   value -= calib_offset[rangemode];
00033b 940e 073c 	CALL SUBOPT_0x10
00033d 940e 0740 	CALL SUBOPT_0x11
00033f 940e 0745 	CALL SUBOPT_0x12
                 ; 0000 020A   calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
000341 0fea      	ADD  R30,R26
000342 1ffb      	ADC  R31,R27
000343 93ff      	PUSH R31
000344 93ef      	PUSH R30
000345 940e 074d 	CALL SUBOPT_0x13
000347 91af      	POP  R26
000348 91bf      	POP  R27
000349 93ed      	ST   X+,R30
00034a 93fc      	ST   X,R31
                 ; 0000 020B 
                 ; 0000 020C   rangemode = RANGE_HIGH_THRESH;
00034b e0e1      	LDI  R30,LOW(1)
00034c 2e5e      	MOV  R5,R30
                 ; 0000 020D   value = measure();
00034d 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 020E   value -= calib_offset[rangemode];
00034f 940e 073c 	CALL SUBOPT_0x10
000351 940e 0759 	CALL SUBOPT_0x14
                 ; 0000 020F   calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
000353 0fea      	ADD  R30,R26
000354 1ffb      	ADC  R31,R27
000355 93ff      	PUSH R31
000356 93ef      	PUSH R30
000357 940e 074d 	CALL SUBOPT_0x13
000359 91af      	POP  R26
00035a 91bf      	POP  R27
00035b 93ed      	ST   X+,R30
00035c 93fc      	ST   X,R31
                 ; 0000 0210 
                 ; 0000 0211   rangemode = RANGE_HIGH;
00035d e0e2      	LDI  R30,LOW(2)
00035e 2e5e      	MOV  R5,R30
                 ; 0000 0212   value = measure();
00035f 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 0213   value -= calib_offset[rangemode];
000361 940e 073c 	CALL SUBOPT_0x10
000363 940e 0759 	CALL SUBOPT_0x14
                 ; 0000 0214   calib[rangemode] = CALIB_HIGH / value + 1;
000365 0fea      	ADD  R30,R26
000366 1ffb      	ADC  R31,R27
000367 93ff      	PUSH R31
000368 93ef      	PUSH R30
000369 940e 075b 	CALL SUBOPT_0x15
00036b 91af      	POP  R26
00036c 91bf      	POP  R27
00036d 93ed      	ST   X+,R30
00036e 93fc      	ST   X,R31
                 ; 0000 0215 
                 ; 0000 0216   rangemode = RANGE_HIGH | RANGE_HIGH_THRESH;
00036f e0e3      	LDI  R30,LOW(3)
000370 2e5e      	MOV  R5,R30
                 ; 0000 0217   value = measure();
000371 940e 0726 	CALL SUBOPT_0xE
                 ; 0000 0218   value -= calib_offset[rangemode];
000373 940e 073c 	CALL SUBOPT_0x10
000375 940e 0759 	CALL SUBOPT_0x14
                 ; 0000 0219   calib[rangemode] = CALIB_HIGH / value + 1;
000377 0fea      	ADD  R30,R26
000378 1ffb      	ADC  R31,R27
000379 93ff      	PUSH R31
00037a 93ef      	PUSH R30
00037b 940e 075b 	CALL SUBOPT_0x15
00037d 91af      	POP  R26
00037e 91bf      	POP  R27
00037f 93ed      	ST   X+,R30
000380 93fc      	ST   X,R31
                 ; 0000 021A 
                 ; 0000 021B   rangemode = oldrange;
000381 2e51      	MOV  R5,R17
                 ; 0000 021C }
000382 8118      	LDD  R17,Y+0
000383 940c 0538 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;/* Hold-down-button menu implementation: */
                 ;
                 ;char menu(void)
                 ; 0000 0221 {
                 _menu:
                 ; .FSTART _menu
                 ; 0000 0222   unsigned char i;
                 ; 0000 0223 
                 ; 0000 0224   lcd_clear();
000385 931a      	ST   -Y,R17
                 ;	i -> R17
000386 d0e4      	RCALL _lcd_clear
                 ; 0000 0225 
                 ; 0000 0226   for (i = 0; i < MENU_ITEMS; i++)
000387 e010      	LDI  R17,LOW(0)
                 _0x4F:
000388 3016      	CPI  R17,6
000389 f460      	BRSH _0x50
                 ; 0000 0227   {
                 ; 0000 0228     lcd_string(menu_item[i], 0);
00038a 940e 0767 	CALL SUBOPT_0x16
00038c e0a0      	LDI  R26,LOW(0)
00038d dde9      	RCALL _lcd_string
                 ; 0000 0229     delay_ms(MENU_SPEED);
00038e e2a0      	LDI  R26,LOW(800)
00038f e0b3      	LDI  R27,HIGH(800)
000390 940e 07af 	CALL _delay_ms
                 ; 0000 022A 
                 ; 0000 022B     if (!BUTTON_PUSHED)
000392 9982      	SBIC 0x10,2
                 ; 0000 022C       break;
000393 c002      	RJMP _0x50
                 ; 0000 022D   }
000394 5f1f      	SUBI R17,-1
000395 cff2      	RJMP _0x4F
                 _0x50:
                 ; 0000 022E 
                 ; 0000 022F   if (i == MENU_ITEMS)
000396 3016      	CPI  R17,6
000397 f429      	BRNE _0x52
                 ; 0000 0230   {
                 ; 0000 0231     /* Just clear display, if user went out of menu */
                 ; 0000 0232     lcd_clear();
000398 d0d2      	RCALL _lcd_clear
                 ; 0000 0233 
                 ; 0000 0234     /* Wait for release of button */
                 ; 0000 0235     while (BUTTON_PUSHED)
                 _0x53:
000399 9b82      	SBIS 0x10,2
                 ; 0000 0236       ;
00039a cffe      	RJMP _0x53
                 ; 0000 0237     delay_ms(10);
00039b e0aa      	LDI  R26,LOW(10)
00039c c00f      	RJMP _0x6C
                 ; 0000 0238   }
                 ; 0000 0239   else
                 _0x52:
                 ; 0000 023A   {
                 ; 0000 023B     /* Flash selected item */
                 ; 0000 023C     lcd_clear();
00039d d0cd      	RCALL _lcd_clear
                 ; 0000 023D     delay_ms(MENU_SPEED >> 2);
00039e eca8      	LDI  R26,LOW(200)
00039f e0b0      	LDI  R27,0
0003a0 940e 07af 	CALL _delay_ms
                 ; 0000 023E     lcd_string(menu_item[i], 0);
0003a2 940e 0767 	CALL SUBOPT_0x16
0003a4 e0a0      	LDI  R26,LOW(0)
0003a5 ddd1      	RCALL _lcd_string
                 ; 0000 023F     delay_ms(MENU_SPEED >> 1);
0003a6 e9a0      	LDI  R26,LOW(400)
0003a7 e0b1      	LDI  R27,HIGH(400)
0003a8 940e 07af 	CALL _delay_ms
                 ; 0000 0240     lcd_clear();
0003aa d0c0      	RCALL _lcd_clear
                 ; 0000 0241     delay_ms(MENU_SPEED >> 2);
0003ab eca8      	LDI  R26,LOW(200)
                 _0x6C:
0003ac e0b0      	LDI  R27,0
0003ad 940e 07af 	CALL _delay_ms
                 ; 0000 0242   }
                 ; 0000 0243 
                 ; 0000 0244   return i;
0003af 2fe1      	MOV  R30,R17
0003b0 9119      	LD   R17,Y+
0003b1 9508      	RET
                 ; 0000 0245 }
                 ; .FEND
                 ;
                 ;void init(void)
                 ; 0000 0248 {
                 _init:
                 ; .FSTART _init
                 ; 0000 0249 
                 ; 0000 024A   /* Set datadirections */
                 ; 0000 024B   DDRD = (1 << 4);    /* led output, rest input */
0003b2 e1e0      	LDI  R30,LOW(16)
0003b3 bbe1      	OUT  0x11,R30
                 ; 0000 024C   PORTD &= ~(1 << 6); /* AIN0 port must be 0 */
0003b4 9896      	CBI  0x12,6
                 ; 0000 024D 
                 ; 0000 024E   /* Enable button pull up resistor */
                 ; 0000 024F   PORTD |= (1 << 2);
0003b5 9a92      	SBI  0x12,2
                 ; 0000 0250 
                 ; 0000 0251   /* Setup timer1 to normal operation */
                 ; 0000 0252   TCCR1A = 0;
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 bdef      	OUT  0x2F,R30
                 ; 0000 0253   TCCR1B = 0;
0003b8 bdee      	OUT  0x2E,R30
                 ; 0000 0254   TIMSK = (1 << TOIE1); //(mega8)
0003b9 e0e4      	LDI  R30,LOW(4)
0003ba bfe9      	OUT  0x39,R30
                 ; 0000 0255   // TIMSK1 = (1<<TOIE1); //(mega48/88/168)
                 ; 0000 0256 
                 ; 0000 0257   /* Setup analog comperator to generate rising edge interrupt */
                 ; 0000 0258   ACSR = (1 << ACIS0) | (1 << ACIS1) | (1 << ACIE);
0003bb e0eb      	LDI  R30,LOW(11)
0003bc b9e8      	OUT  0x8,R30
                 ; 0000 0259 
                 ; 0000 025A   /* Setup analog comperator to use ADMUX */
                 ; 0000 025B   ADMUX = ADMUX_LOW;
0003bd e0e1      	LDI  R30,LOW(1)
0003be b9e7      	OUT  0x7,R30
                 ; 0000 025C   SFIOR |= (1 << ACME);
0003bf b7e0      	IN   R30,0x30
0003c0 60e8      	ORI  R30,8
0003c1 bfe0      	OUT  0x30,R30
                 ; 0000 025D   // ADCSRB |= (1<<ACME);
                 ; 0000 025E   // DIDR1 |= (1<<AIN1D)|(1<<AIN0D);
                 ; 0000 025F }
0003c2 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0262 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0263 // Declare your local variables here
                 ; 0000 0264    unsigned long l;
                 ; 0000 0265 // Input/Output Ports initialization
                 ; 0000 0266 // Port A initialization
                 ; 0000 0267 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0268 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0003c3 9724      	SBIW R28,4
                 ;	l -> Y+0
0003c4 e0e0      	LDI  R30,LOW(0)
0003c5 bbea      	OUT  0x1A,R30
                 ; 0000 0269 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 026A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0003c6 bbeb      	OUT  0x1B,R30
                 ; 0000 026B 
                 ; 0000 026C // Port B initialization
                 ; 0000 026D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 026E DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0003c7 efef      	LDI  R30,LOW(255)
0003c8 bbe7      	OUT  0x17,R30
                 ; 0000 026F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0270 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0003c9 e0e0      	LDI  R30,LOW(0)
0003ca bbe8      	OUT  0x18,R30
                 ; 0000 0271 
                 ; 0000 0272 // Port C initialization
                 ; 0000 0273 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0274 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0003cb bbe4      	OUT  0x14,R30
                 ; 0000 0275 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0276 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0003cc bbe5      	OUT  0x15,R30
                 ; 0000 0277 
                 ; 0000 0278 // Port D initialization
                 ; 0000 0279 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 027A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0003cd bbe1      	OUT  0x11,R30
                 ; 0000 027B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 027C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0003ce bbe2      	OUT  0x12,R30
                 ; 0000 027D 
                 ; 0000 027E // Timer/Counter 0 initialization
                 ; 0000 027F // Clock source: System Clock
                 ; 0000 0280 // Clock value: Timer 0 Stopped
                 ; 0000 0281 // Mode: Normal top=0xFF
                 ; 0000 0282 // OC0 output: Disconnected
                 ; 0000 0283 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0003cf bfe3      	OUT  0x33,R30
                 ; 0000 0284 TCNT0=0x00;
0003d0 bfe2      	OUT  0x32,R30
                 ; 0000 0285 OCR0=0x00;
0003d1 bfec      	OUT  0x3C,R30
                 ; 0000 0286 
                 ; 0000 0287 // Timer/Counter 1 initialization
                 ; 0000 0288 // Clock source: System Clock
                 ; 0000 0289 // Clock value: Timer1 Stopped
                 ; 0000 028A // Mode: Normal top=0xFFFF
                 ; 0000 028B // OC1A output: Disconnected
                 ; 0000 028C // OC1B output: Disconnected
                 ; 0000 028D // Noise Canceler: Off
                 ; 0000 028E // Input Capture on Falling Edge
                 ; 0000 028F // Timer1 Overflow Interrupt: Off
                 ; 0000 0290 // Input Capture Interrupt: Off
                 ; 0000 0291 // Compare A Match Interrupt: Off
                 ; 0000 0292 // Compare B Match Interrupt: Off
                 ; 0000 0293 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0003d2 bdef      	OUT  0x2F,R30
                 ; 0000 0294 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0003d3 bdee      	OUT  0x2E,R30
                 ; 0000 0295 TCNT1H=0x00;
0003d4 bded      	OUT  0x2D,R30
                 ; 0000 0296 TCNT1L=0x00;
0003d5 bdec      	OUT  0x2C,R30
                 ; 0000 0297 ICR1H=0x00;
0003d6 bde7      	OUT  0x27,R30
                 ; 0000 0298 ICR1L=0x00;
0003d7 bde6      	OUT  0x26,R30
                 ; 0000 0299 OCR1AH=0x00;
0003d8 bdeb      	OUT  0x2B,R30
                 ; 0000 029A OCR1AL=0x00;
0003d9 bdea      	OUT  0x2A,R30
                 ; 0000 029B OCR1BH=0x00;
0003da bde9      	OUT  0x29,R30
                 ; 0000 029C OCR1BL=0x00;
0003db bde8      	OUT  0x28,R30
                 ; 0000 029D 
                 ; 0000 029E // Timer/Counter 2 initialization
                 ; 0000 029F // Clock source: System Clock
                 ; 0000 02A0 // Clock value: Timer2 Stopped
                 ; 0000 02A1 // Mode: Normal top=0xFF
                 ; 0000 02A2 // OC2 output: Disconnected
                 ; 0000 02A3 ASSR=0<<AS2;
0003dc bde2      	OUT  0x22,R30
                 ; 0000 02A4 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0003dd bde5      	OUT  0x25,R30
                 ; 0000 02A5 TCNT2=0x00;
0003de bde4      	OUT  0x24,R30
                 ; 0000 02A6 OCR2=0x00;
0003df bde3      	OUT  0x23,R30
                 ; 0000 02A7 
                 ; 0000 02A8 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 02A9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0003e0 bfe9      	OUT  0x39,R30
                 ; 0000 02AA 
                 ; 0000 02AB // External Interrupt(s) initialization
                 ; 0000 02AC // INT0: Off
                 ; 0000 02AD // INT1: Off
                 ; 0000 02AE // INT2: Off
                 ; 0000 02AF MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0003e1 bfe5      	OUT  0x35,R30
                 ; 0000 02B0 MCUCSR=(0<<ISC2);
0003e2 bfe4      	OUT  0x34,R30
                 ; 0000 02B1 
                 ; 0000 02B2 // USART initialization
                 ; 0000 02B3 // USART disabled
                 ; 0000 02B4 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0003e3 b9ea      	OUT  0xA,R30
                 ; 0000 02B5 
                 ; 0000 02B6 // Analog Comparator initialization
                 ; 0000 02B7 // Analog Comparator: Off
                 ; 0000 02B8 // The Analog Comparator's positive input is
                 ; 0000 02B9 // connected to the AIN0 pin
                 ; 0000 02BA // The Analog Comparator's negative input is
                 ; 0000 02BB // connected to the AIN1 pin
                 ; 0000 02BC ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0003e4 e8e0      	LDI  R30,LOW(128)
0003e5 b9e8      	OUT  0x8,R30
                 ; 0000 02BD SFIOR=(0<<ACME);
0003e6 e0e0      	LDI  R30,LOW(0)
0003e7 bfe0      	OUT  0x30,R30
                 ; 0000 02BE 
                 ; 0000 02BF // ADC initialization
                 ; 0000 02C0 // ADC disabled
                 ; 0000 02C1 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0003e8 b9e6      	OUT  0x6,R30
                 ; 0000 02C2 
                 ; 0000 02C3 // SPI initialization
                 ; 0000 02C4 // SPI disabled
                 ; 0000 02C5 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0003e9 b9ed      	OUT  0xD,R30
                 ; 0000 02C6 
                 ; 0000 02C7 // TWI initialization
                 ; 0000 02C8 // TWI disabled
                 ; 0000 02C9 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0003ea bfe6      	OUT  0x36,R30
                 ; 0000 02CA 
                 ; 0000 02CB // Alphanumeric LCD initialization
                 ; 0000 02CC // Connections are specified in the
                 ; 0000 02CD // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 02CE // RS - PORTB Bit 5
                 ; 0000 02CF // RD - PORTB Bit 6
                 ; 0000 02D0 // EN - PORTB Bit 4
                 ; 0000 02D1 // D4 - PORTB Bit 0
                 ; 0000 02D2 // D5 - PORTB Bit 1
                 ; 0000 02D3 // D6 - PORTB Bit 2
                 ; 0000 02D4 // D7 - PORTB Bit 3
                 ; 0000 02D5 // Characters/line: 16
                 ; 0000 02D6 lcd_init(16);
0003eb e1a0      	LDI  R26,LOW(16)
0003ec d0b0      	RCALL _lcd_init
                 ; 0000 02D7 
                 ; 0000 02D8 init();
0003ed dfc4      	RCALL _init
                 ; 0000 02D9 eeprom_read();
0003ee dd5e      	RCALL _eeprom_read
                 ; 0000 02DA 
                 ; 0000 02DB #asm("sei");
0003ef 9478      	sei
                 ; 0000 02DC LED_OFF; // turns off an LED (probably an indicator for measurement status).
0003f0 9a94      	SBI  0x12,4
                 ; 0000 02DD 
                 ; 0000 02DE rangemode = RANGE_AUTO; // setting Up the Measurement Mode
0003f1 e0e4      	LDI  R30,LOW(4)
0003f2 2e5e      	MOV  R5,R30
                 ; 0000 02DF while (1)
                 _0x57:
                 ; 0000 02E0       {
                 ; 0000 02E1       /* Toggle high/low threshold */
                 ; 0000 02E2     rangemode ^= RANGE_HIGH_THRESH;
0003f3 e0e1      	LDI  R30,LOW(1)
0003f4 265e      	EOR  R5,R30
                 ; 0000 02E3     l = measure();
0003f5 ddfc      	RCALL _measure
0003f6 940e 0852 	CALL __PUTD1S0
                 ; 0000 02E4 
                 ; 0000 02E5     sprintf(buf, "ADC: %u", l);  // or whatever variable
0003f8 e3e2      	LDI  R30,LOW(_buf)
0003f9 e0f2      	LDI  R31,HIGH(_buf)
0003fa 93fa      	ST   -Y,R31
0003fb 93ea      	ST   -Y,R30
                +
0003fc e1e5     +LDI R30 , LOW ( 2 * _0x0 + ( 109 ) )
0003fd e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 109 ) )
                 	__POINTW1FN _0x0,109
0003fe 93fa      	ST   -Y,R31
0003ff 93ea      	ST   -Y,R30
                +
000400 81ec     +LDD R30 , Y + 4
000401 81fd     +LDD R31 , Y + 4 + 1
000402 816e     +LDD R22 , Y + 4 + 2
000403 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000404 940e 085c 	CALL __PUTPARD1
000406 e084      	LDI  R24,4
000407 940e 066e 	CALL _sprintf
000409 9628      	ADIW R28,8
                 ; 0000 02E6     lcd_string(buf,0);
00040a e3e2      	LDI  R30,LOW(_buf)
00040b e0f2      	LDI  R31,HIGH(_buf)
00040c 93fa      	ST   -Y,R31
00040d 93ea      	ST   -Y,R30
00040e e0a0      	LDI  R26,LOW(0)
00040f dd67      	RCALL _lcd_string
                 ; 0000 02E7     delay_ms(1000);
000410 eea8      	LDI  R26,LOW(1000)
000411 e0b3      	LDI  R27,HIGH(1000)
000412 940e 07af 	CALL _delay_ms
                 ; 0000 02E8     if (BUTTON_PUSHED)
000414 9982      	SBIC 0x10,2
000415 c022      	RJMP _0x5A
                 ; 0000 02E9     {
                 ; 0000 02EA       /* Stop any cap. charging */
                 ; 0000 02EB       LED_OFF;
000416 9a94      	SBI  0x12,4
                 ; 0000 02EC       LOW_RANGE;
000417 988d      	CBI  0x11,5
000418 9895      	CBI  0x12,5
                 ; 0000 02ED       DISCHARGE_ON;
000419 9a8e      	SBI  0x11,6
                 ; 0000 02EE 
                 ; 0000 02EF       /* Menu implementation */
                 ; 0000 02F0       switch (menu())
00041a df6a      	RCALL _menu
                 ; 0000 02F1       {
                 ; 0000 02F2       case 0: /* auto range */
00041b 30e0      	CPI  R30,0
00041c f419      	BRNE _0x5E
                 ; 0000 02F3         rangemode |= RANGE_AUTO;
00041d e0e4      	LDI  R30,LOW(4)
00041e 2a5e      	OR   R5,R30
                 ; 0000 02F4         break;
00041f c017      	RJMP _0x5D
                 ; 0000 02F5       case 1: /* low range */
                 _0x5E:
000420 30e1      	CPI  R30,LOW(0x1)
000421 f419      	BRNE _0x5F
                 ; 0000 02F6         rangemode &= ~(RANGE_AUTO | RANGE_HIGH);
000422 efe9      	LDI  R30,LOW(249)
000423 225e      	AND  R5,R30
                 ; 0000 02F7         break;
000424 c012      	RJMP _0x5D
                 ; 0000 02F8       case 2: /* high range */
                 _0x5F:
000425 30e2      	CPI  R30,LOW(0x2)
000426 f429      	BRNE _0x60
                 ; 0000 02F9         rangemode &= ~RANGE_AUTO;
000427 efeb      	LDI  R30,LOW(251)
000428 225e      	AND  R5,R30
                 ; 0000 02FA         rangemode |= RANGE_HIGH;
000429 e0e2      	LDI  R30,LOW(2)
00042a 2a5e      	OR   R5,R30
                 ; 0000 02FB         break;
00042b c00b      	RJMP _0x5D
                 ; 0000 02FC       case 3:
                 _0x60:
00042c 30e3      	CPI  R30,LOW(0x3)
00042d f411      	BRNE _0x61
                 ; 0000 02FD         calibrate_zero();
00042e def8      	RCALL _calibrate_zero
                 ; 0000 02FE         break;
00042f c007      	RJMP _0x5D
                 ; 0000 02FF       case 4:
                 _0x61:
000430 30e4      	CPI  R30,LOW(0x4)
000431 f411      	BRNE _0x62
                 ; 0000 0300         calibrate();
000432 df06      	RCALL _calibrate
                 ; 0000 0301         break;
000433 c003      	RJMP _0x5D
                 ; 0000 0302       case 5:
                 _0x62:
000434 30e5      	CPI  R30,LOW(0x5)
000435 f409      	BRNE _0x5D
                 ; 0000 0303         eeprom_write();
000436 dd2d      	RCALL _eeprom_write
                 ; 0000 0304         break;
                 ; 0000 0305       }
                 _0x5D:
                 ; 0000 0306     }
                 ; 0000 0307     else
000437 c003      	RJMP _0x64
                 _0x5A:
                 ; 0000 0308       calc_and_show(l);
000438 940e 084d 	CALL __GETD2S0
00043a de54      	RCALL _calc_and_show
                 ; 0000 0309 
                 ; 0000 030A       }
                 _0x64:
00043b cfb7      	RJMP _0x57
                 ; 0000 030B }
                 _0x65:
00043c cfff      	RJMP _0x65
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00043d 93aa      	ST   -Y,R26
00043e b3e8      	IN   R30,0x18
00043f 7fe0      	ANDI R30,LOW(0xF0)
000440 2fae      	MOV  R26,R30
000441 81e8      	LD   R30,Y
000442 95e2      	SWAP R30
000443 70ef      	ANDI R30,0xF
000444 2bea      	OR   R30,R26
000445 bbe8      	OUT  0x18,R30
                +
000446 e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
000447 958a     +DEC R24
000448 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
000449 9ac4      	SBI  0x18,4
                +
00044a e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
00044b 958a     +DEC R24
00044c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
00044d 98c4      	CBI  0x18,4
                +
00044e e182     +LDI R24 , LOW ( 18 )
                +__DELAY_USB_LOOP :
00044f 958a     +DEC R24
000450 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 18
000451 c077      	RJMP _0x20C0006
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000452 93aa      	ST   -Y,R26
000453 81a8      	LD   R26,Y
000454 dfe8      	RCALL __lcd_write_nibble_G100
000455 81e8          ld    r30,y
000456 95e2          swap  r30
000457 83e8          st    y,r30
000458 81a8      	LD   R26,Y
000459 dfe3      	RCALL __lcd_write_nibble_G100
                +
00045a eb88     +LDI R24 , LOW ( 184 )
                +__DELAY_USB_LOOP :
00045b 958a     +DEC R24
00045c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 184
00045d c06b      	RJMP _0x20C0006
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00045e 93aa      	ST   -Y,R26
00045f 81e8      	LD   R30,Y
000460 e0f0      	LDI  R31,0
000461 5aee      	SUBI R30,LOW(-__base_y_G100)
000462 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000463 81e0      	LD   R30,Z
000464 81a9      	LDD  R26,Y+1
000465 0fae      	ADD  R26,R30
000466 dfeb      	RCALL __lcd_write_data
000467 8049      	LDD  R4,Y+1
000468 8078      	LDD  R7,Y+0
000469 9622      	ADIW R28,2
00046a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00046b e0a2      	LDI  R26,LOW(2)
00046c 940e 076e 	CALL SUBOPT_0x17
00046e e0ac      	LDI  R26,LOW(12)
00046f dfe2      	RCALL __lcd_write_data
000470 e0a1      	LDI  R26,LOW(1)
000471 940e 076e 	CALL SUBOPT_0x17
000473 e0e0      	LDI  R30,LOW(0)
000474 2e7e      	MOV  R7,R30
000475 2e4e      	MOV  R4,R30
000476 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000477 93aa      	ST   -Y,R26
000478 81a8      	LD   R26,Y
000479 30aa      	CPI  R26,LOW(0xA)
00047a f011      	BREQ _0x2000005
00047b 1446      	CP   R4,R6
00047c f048      	BRLO _0x2000004
                 _0x2000005:
00047d e0e0      	LDI  R30,LOW(0)
00047e 93ea      	ST   -Y,R30
00047f 9473      	INC  R7
000480 2da7      	MOV  R26,R7
000481 dfdc      	RCALL _lcd_gotoxy
000482 81a8      	LD   R26,Y
000483 30aa      	CPI  R26,LOW(0xA)
000484 f409      	BRNE _0x2000007
000485 c043      	RJMP _0x20C0006
                 _0x2000007:
                 _0x2000004:
000486 9443      	INC  R4
000487 9ac5      	SBI  0x18,5
000488 81a8      	LD   R26,Y
000489 dfc8      	RCALL __lcd_write_data
00048a 98c5      	CBI  0x18,5
00048b c03d      	RJMP _0x20C0006
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00048c 93ba      	ST   -Y,R27
00048d 93aa      	ST   -Y,R26
00048e 931a      	ST   -Y,R17
                 _0x2000008:
00048f 81a9      	LDD  R26,Y+1
000490 81ba      	LDD  R27,Y+1+1
000491 91ed      	LD   R30,X+
000492 83a9      	STD  Y+1,R26
000493 83ba      	STD  Y+1+1,R27
000494 2f1e      	MOV  R17,R30
000495 30e0      	CPI  R30,0
000496 f019      	BREQ _0x200000A
000497 2fa1      	MOV  R26,R17
000498 dfde      	RCALL _lcd_putchar
000499 cff5      	RJMP _0x2000008
                 _0x200000A:
00049a 8118      	LDD  R17,Y+0
00049b 9623      	ADIW R28,3
00049c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00049d 93aa      	ST   -Y,R26
00049e b3e7      	IN   R30,0x17
00049f 60ef      	ORI  R30,LOW(0xF)
0004a0 bbe7      	OUT  0x17,R30
0004a1 9abc      	SBI  0x17,4
0004a2 9abd      	SBI  0x17,5
0004a3 9abe      	SBI  0x17,6
0004a4 98c4      	CBI  0x18,4
0004a5 98c5      	CBI  0x18,5
0004a6 98c6      	CBI  0x18,6
0004a7 8068      	LDD  R6,Y+0
0004a8 81e8      	LD   R30,Y
0004a9 58e0      	SUBI R30,-LOW(128)
                +
0004aa 93e0 0254+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0004ac 81e8      	LD   R30,Y
0004ad 54e0      	SUBI R30,-LOW(192)
                +
0004ae 93e0 0255+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0004b0 e1a4      	LDI  R26,LOW(20)
0004b1 e0b0      	LDI  R27,0
0004b2 940e 07af 	CALL _delay_ms
0004b4 940e 0774 	CALL SUBOPT_0x18
0004b6 940e 0774 	CALL SUBOPT_0x18
0004b8 940e 0774 	CALL SUBOPT_0x18
0004ba e2a0      	LDI  R26,LOW(32)
0004bb df81      	RCALL __lcd_write_nibble_G100
                +
0004bc e184     +LDI R24 , LOW ( 276 )
0004bd e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
0004be 9701     +SBIW R24 , 1
0004bf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
0004c0 e2a8      	LDI  R26,LOW(40)
0004c1 df90      	RCALL __lcd_write_data
0004c2 e0a4      	LDI  R26,LOW(4)
0004c3 df8e      	RCALL __lcd_write_data
0004c4 e8a5      	LDI  R26,LOW(133)
0004c5 df8c      	RCALL __lcd_write_data
0004c6 e0a6      	LDI  R26,LOW(6)
0004c7 df8a      	RCALL __lcd_write_data
0004c8 dfa2      	RCALL _lcd_clear
                 _0x20C0006:
0004c9 9621      	ADIW R28,1
0004ca 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _eeprom_read_block:
                 ; .FSTART _eeprom_read_block
0004cb 93ba      	ST   -Y,R27
0004cc 93aa      	ST   -Y,R26
0004cd 940e 088f 	CALL __SAVELOCR4
                +
0004cf 8508     +LDD R16 , Y + 8
0004d0 8519     +LDD R17 , Y + 8 + 1
                 	__GETWRS 16,17,8
                +
0004d1 812e     +LDD R18 , Y + 6
0004d2 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                 _0x2020003:
0004d3 940e 077c 	CALL SUBOPT_0x19
0004d5 f069      	BREQ _0x2020005
0004d6 931f      	PUSH R17
0004d7 930f      	PUSH R16
                +
0004d8 5f0f     +SUBI R16 , LOW ( - 1 )
0004d9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004da 01d9      	MOVW R26,R18
                +
0004db 5f2f     +SUBI R18 , LOW ( - 1 )
0004dc 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004dd 940e 0866 	CALL __EEPROMRDB
0004df 91af      	POP  R26
0004e0 91bf      	POP  R27
0004e1 93ec      	ST   X,R30
0004e2 cff0      	RJMP _0x2020003
                 _0x2020005:
0004e3 c018      	RJMP _0x20C0005
                 ; .FEND
                 _eeprom_write_block:
                 ; .FSTART _eeprom_write_block
0004e4 93ba      	ST   -Y,R27
0004e5 93aa      	ST   -Y,R26
0004e6 940e 088f 	CALL __SAVELOCR4
                +
0004e8 810e     +LDD R16 , Y + 6
0004e9 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                +
0004ea 8528     +LDD R18 , Y + 8
0004eb 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                 _0x2020006:
0004ec 940e 077c 	CALL SUBOPT_0x19
0004ee f069      	BREQ _0x2020008
0004ef 931f      	PUSH R17
0004f0 930f      	PUSH R16
                +
0004f1 5f0f     +SUBI R16 , LOW ( - 1 )
0004f2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004f3 01d9      	MOVW R26,R18
                +
0004f4 5f2f     +SUBI R18 , LOW ( - 1 )
0004f5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004f6 91ec      	LD   R30,X
0004f7 91af      	POP  R26
0004f8 91bf      	POP  R27
0004f9 940e 0872 	CALL __EEPROMWRB
0004fb cff0      	RJMP _0x2020006
                 _0x2020008:
                 _0x20C0005:
0004fc 940e 0896 	CALL __LOADLOCR4
0004fe 962a      	ADIW R28,10
0004ff 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
000500 93ba      	ST   -Y,R27
000501 93aa      	ST   -Y,R26
000502 931a      	ST   -Y,R17
000503 930a      	ST   -Y,R16
000504 81aa      	LDD  R26,Y+2
000505 81bb      	LDD  R27,Y+2+1
000506 9612      	ADIW R26,2
000507 940e 083a 	CALL __GETW1P
000509 9730      	SBIW R30,0
00050a f129      	BREQ _0x2040010
00050b 81aa      	LDD  R26,Y+2
00050c 81bb      	LDD  R27,Y+2+1
00050d 9614      	ADIW R26,4
00050e 940e 083a 	CALL __GETW1P
000510 018f      	MOVW R16,R30
000511 9730      	SBIW R30,0
000512 f061      	BREQ _0x2040012
                +
000513 3002     +CPI R16 , LOW ( 2 )
000514 e0e0     +LDI R30 , HIGH ( 2 )
000515 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000516 f080      	BRLO _0x2040013
000517 01f8      	MOVW R30,R16
000518 9731      	SBIW R30,1
000519 018f      	MOVW R16,R30
                +
00051a 81aa     +LDD R26 , Y + 2
00051b 81bb     +LDD R27 , Y + 2 + 1
00051c 9614     +ADIW R26 , 4
00051d 93ed     +ST X + , R30
00051e 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
00051f 81aa      	LDD  R26,Y+2
000520 81bb      	LDD  R27,Y+2+1
000521 9612      	ADIW R26,2
000522 940e 06bb 	CALL SUBOPT_0x0
000524 9731      	SBIW R30,1
000525 81ac      	LDD  R26,Y+4
000526 83a0      	STD  Z+0,R26
                 _0x2040013:
000527 81aa      	LDD  R26,Y+2
000528 81bb      	LDD  R27,Y+2+1
000529 940e 083a 	CALL __GETW1P
00052b 23ff      	TST  R31
00052c f012      	BRMI _0x2040014
00052d 940e 06bb 	CALL SUBOPT_0x0
                 _0x2040014:
00052f c006      	RJMP _0x2040015
                 _0x2040010:
000530 81aa      	LDD  R26,Y+2
000531 81bb      	LDD  R27,Y+2+1
000532 efef      	LDI  R30,LOW(65535)
000533 efff      	LDI  R31,HIGH(65535)
000534 93ed      	ST   X+,R30
000535 93fc      	ST   X,R31
                 _0x2040015:
                 _0x20C0004:
000536 8119      	LDD  R17,Y+1
000537 8108      	LDD  R16,Y+0
                 _0x20C0003:
000538 9625      	ADIW R28,5
000539 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
00053a 93ba      	ST   -Y,R27
00053b 93aa      	ST   -Y,R26
00053c 9726      	SBIW R28,6
00053d 940e 088d 	CALL __SAVELOCR6
00053f e010      	LDI  R17,0
000540 85ac      	LDD  R26,Y+12
000541 85bd      	LDD  R27,Y+12+1
000542 e0e0      	LDI  R30,LOW(0)
000543 e0f0      	LDI  R31,HIGH(0)
000544 93ed      	ST   X+,R30
000545 93fc      	ST   X,R31
                 _0x2040016:
000546 89ea      	LDD  R30,Y+18
000547 89fb      	LDD  R31,Y+18+1
000548 9631      	ADIW R30,1
000549 8bea      	STD  Y+18,R30
00054a 8bfb      	STD  Y+18+1,R31
00054b 9731      	SBIW R30,1
00054c 91e4      	LPM  R30,Z
00054d 2f2e      	MOV  R18,R30
00054e 30e0      	CPI  R30,0
00054f f409      	BRNE PC+2
000550 c115      	RJMP _0x2040018
000551 2fe1      	MOV  R30,R17
000552 30e0      	CPI  R30,0
000553 f439      	BRNE _0x204001C
000554 3225      	CPI  R18,37
000555 f411      	BRNE _0x204001D
000556 e011      	LDI  R17,LOW(1)
000557 c002      	RJMP _0x204001E
                 _0x204001D:
000558 940e 0783 	CALL SUBOPT_0x1A
                 _0x204001E:
00055a c10a      	RJMP _0x204001B
                 _0x204001C:
00055b 30e1      	CPI  R30,LOW(0x1)
00055c f4a9      	BRNE _0x204001F
00055d 3225      	CPI  R18,37
00055e f419      	BRNE _0x2040020
00055f 940e 0783 	CALL SUBOPT_0x1A
000561 c102      	RJMP _0x20400CC
                 _0x2040020:
000562 e012      	LDI  R17,LOW(2)
000563 e040      	LDI  R20,LOW(0)
000564 e000      	LDI  R16,LOW(0)
000565 322d      	CPI  R18,45
000566 f411      	BRNE _0x2040021
000567 e001      	LDI  R16,LOW(1)
000568 c0fc      	RJMP _0x204001B
                 _0x2040021:
000569 322b      	CPI  R18,43
00056a f411      	BRNE _0x2040022
00056b e24b      	LDI  R20,LOW(43)
00056c c0f8      	RJMP _0x204001B
                 _0x2040022:
00056d 3220      	CPI  R18,32
00056e f411      	BRNE _0x2040023
00056f e240      	LDI  R20,LOW(32)
000570 c0f4      	RJMP _0x204001B
                 _0x2040023:
000571 c002      	RJMP _0x2040024
                 _0x204001F:
000572 30e2      	CPI  R30,LOW(0x2)
000573 f439      	BRNE _0x2040025
                 _0x2040024:
000574 e050      	LDI  R21,LOW(0)
000575 e013      	LDI  R17,LOW(3)
000576 3320      	CPI  R18,48
000577 f411      	BRNE _0x2040026
000578 6800      	ORI  R16,LOW(128)
000579 c0eb      	RJMP _0x204001B
                 _0x2040026:
00057a c003      	RJMP _0x2040027
                 _0x2040025:
00057b 30e3      	CPI  R30,LOW(0x3)
00057c f009      	BREQ PC+2
00057d c0e7      	RJMP _0x204001B
                 _0x2040027:
00057e 3320      	CPI  R18,48
00057f f010      	BRLO _0x204002A
000580 332a      	CPI  R18,58
000581 f008      	BRLO _0x204002B
                 _0x204002A:
000582 c007      	RJMP _0x2040029
                 _0x204002B:
000583 e0aa      	LDI  R26,LOW(10)
000584 9f5a      	MUL  R21,R26
000585 2d50      	MOV  R21,R0
000586 2fe2      	MOV  R30,R18
000587 53e0      	SUBI R30,LOW(48)
000588 0f5e      	ADD  R21,R30
000589 c0db      	RJMP _0x204001B
                 _0x2040029:
00058a 2fe2      	MOV  R30,R18
00058b 36e3      	CPI  R30,LOW(0x63)
00058c f449      	BRNE _0x204002F
00058d 940e 078a 	CALL SUBOPT_0x1B
00058f 89e8      	LDD  R30,Y+16
000590 89f9      	LDD  R31,Y+16+1
000591 81a4      	LDD  R26,Z+4
000592 93aa      	ST   -Y,R26
000593 940e 0790 	CALL SUBOPT_0x1C
000595 c0ce      	RJMP _0x2040030
                 _0x204002F:
000596 37e3      	CPI  R30,LOW(0x73)
000597 f441      	BRNE _0x2040032
000598 940e 078a 	CALL SUBOPT_0x1B
00059a 940e 0796 	CALL SUBOPT_0x1D
00059c 940e 06a2 	CALL _strlen
00059e 2f1e      	MOV  R17,R30
00059f c00a      	RJMP _0x2040033
                 _0x2040032:
0005a0 37e0      	CPI  R30,LOW(0x70)
0005a1 f461      	BRNE _0x2040035
0005a2 940e 078a 	CALL SUBOPT_0x1B
0005a4 940e 0796 	CALL SUBOPT_0x1D
0005a6 940e 06ae 	CALL _strlenf
0005a8 2f1e      	MOV  R17,R30
0005a9 6008      	ORI  R16,LOW(8)
                 _0x2040033:
0005aa 6002      	ORI  R16,LOW(2)
0005ab 770f      	ANDI R16,LOW(127)
0005ac e030      	LDI  R19,LOW(0)
0005ad c034      	RJMP _0x2040036
                 _0x2040035:
0005ae 36e4      	CPI  R30,LOW(0x64)
0005af f011      	BREQ _0x2040039
0005b0 36e9      	CPI  R30,LOW(0x69)
0005b1 f411      	BRNE _0x204003A
                 _0x2040039:
0005b2 6004      	ORI  R16,LOW(4)
0005b3 c002      	RJMP _0x204003B
                 _0x204003A:
0005b4 37e5      	CPI  R30,LOW(0x75)
0005b5 f431      	BRNE _0x204003C
                 _0x204003B:
0005b6 e5e4      	LDI  R30,LOW(_tbl10_G102*2)
0005b7 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
0005b8 83ee      	STD  Y+6,R30
0005b9 83ff      	STD  Y+6+1,R31
0005ba e015      	LDI  R17,LOW(5)
0005bb c00c      	RJMP _0x204003D
                 _0x204003C:
0005bc 35e8      	CPI  R30,LOW(0x58)
0005bd f411      	BRNE _0x204003F
0005be 6008      	ORI  R16,LOW(8)
0005bf c003      	RJMP _0x2040040
                 _0x204003F:
0005c0 37e8      	CPI  R30,LOW(0x78)
0005c1 f009      	BREQ PC+2
0005c2 c0a1      	RJMP _0x2040071
                 _0x2040040:
0005c3 e5ee      	LDI  R30,LOW(_tbl16_G102*2)
0005c4 e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
0005c5 83ee      	STD  Y+6,R30
0005c6 83ff      	STD  Y+6+1,R31
0005c7 e014      	LDI  R17,LOW(4)
                 _0x204003D:
0005c8 ff02      	SBRS R16,2
0005c9 c014      	RJMP _0x2040042
0005ca 940e 078a 	CALL SUBOPT_0x1B
0005cc 940e 07a0 	CALL SUBOPT_0x1E
0005ce 85ab      	LDD  R26,Y+11
0005cf 23aa      	TST  R26
0005d0 f43a      	BRPL _0x2040043
0005d1 85ea      	LDD  R30,Y+10
0005d2 85fb      	LDD  R31,Y+10+1
0005d3 940e 07cc 	CALL __ANEGW1
0005d5 87ea      	STD  Y+10,R30
0005d6 87fb      	STD  Y+10+1,R31
0005d7 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
0005d8 3040      	CPI  R20,0
0005d9 f011      	BREQ _0x2040044
0005da 5f1f      	SUBI R17,-LOW(1)
0005db c001      	RJMP _0x2040045
                 _0x2040044:
0005dc 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
0005dd c004      	RJMP _0x2040046
                 _0x2040042:
0005de 940e 078a 	CALL SUBOPT_0x1B
0005e0 940e 07a0 	CALL SUBOPT_0x1E
                 _0x2040046:
                 _0x2040036:
0005e2 fd00      	SBRC R16,0
0005e3 c011      	RJMP _0x2040047
                 _0x2040048:
0005e4 1715      	CP   R17,R21
0005e5 f478      	BRSH _0x204004A
0005e6 ff07      	SBRS R16,7
0005e7 c008      	RJMP _0x204004B
0005e8 ff02      	SBRS R16,2
0005e9 c004      	RJMP _0x204004C
0005ea 7f0b      	ANDI R16,LOW(251)
0005eb 2f24      	MOV  R18,R20
0005ec 5011      	SUBI R17,LOW(1)
0005ed c001      	RJMP _0x204004D
                 _0x204004C:
0005ee e320      	LDI  R18,LOW(48)
                 _0x204004D:
0005ef c001      	RJMP _0x204004E
                 _0x204004B:
0005f0 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0005f1 940e 0783 	CALL SUBOPT_0x1A
0005f3 5051      	SUBI R21,LOW(1)
0005f4 cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0005f5 2f31      	MOV  R19,R17
0005f6 ff01      	SBRS R16,1
0005f7 c017      	RJMP _0x204004F
                 _0x2040050:
0005f8 3030      	CPI  R19,0
0005f9 f0a1      	BREQ _0x2040052
0005fa ff03      	SBRS R16,3
0005fb c006      	RJMP _0x2040053
0005fc 81ee      	LDD  R30,Y+6
0005fd 81ff      	LDD  R31,Y+6+1
0005fe 9125      	LPM  R18,Z+
0005ff 83ee      	STD  Y+6,R30
000600 83ff      	STD  Y+6+1,R31
000601 c005      	RJMP _0x2040054
                 _0x2040053:
000602 81ae      	LDD  R26,Y+6
000603 81bf      	LDD  R27,Y+6+1
000604 912d      	LD   R18,X+
000605 83ae      	STD  Y+6,R26
000606 83bf      	STD  Y+6+1,R27
                 _0x2040054:
000607 940e 0783 	CALL SUBOPT_0x1A
000609 3050      	CPI  R21,0
00060a f009      	BREQ _0x2040055
00060b 5051      	SUBI R21,LOW(1)
                 _0x2040055:
00060c 5031      	SUBI R19,LOW(1)
00060d cfea      	RJMP _0x2040050
                 _0x2040052:
00060e c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
00060f e320      	LDI  R18,LOW(48)
000610 81ee      	LDD  R30,Y+6
000611 81ff      	LDD  R31,Y+6+1
000612 940e 0849 	CALL __GETW1PF
000614 87e8      	STD  Y+8,R30
000615 87f9      	STD  Y+8+1,R31
000616 81ee      	LDD  R30,Y+6
000617 81ff      	LDD  R31,Y+6+1
000618 9632      	ADIW R30,2
000619 83ee      	STD  Y+6,R30
00061a 83ff      	STD  Y+6+1,R31
                 _0x204005A:
00061b 85e8      	LDD  R30,Y+8
00061c 85f9      	LDD  R31,Y+8+1
00061d 85aa      	LDD  R26,Y+10
00061e 85bb      	LDD  R27,Y+10+1
00061f 17ae      	CP   R26,R30
000620 07bf      	CPC  R27,R31
000621 f050      	BRLO _0x204005C
000622 5f2f      	SUBI R18,-LOW(1)
000623 85a8      	LDD  R26,Y+8
000624 85b9      	LDD  R27,Y+8+1
000625 85ea      	LDD  R30,Y+10
000626 85fb      	LDD  R31,Y+10+1
000627 1bea      	SUB  R30,R26
000628 0bfb      	SBC  R31,R27
000629 87ea      	STD  Y+10,R30
00062a 87fb      	STD  Y+10+1,R31
00062b cfef      	RJMP _0x204005A
                 _0x204005C:
00062c 332a      	CPI  R18,58
00062d f028      	BRLO _0x204005D
00062e ff03      	SBRS R16,3
00062f c002      	RJMP _0x204005E
000630 5f29      	SUBI R18,-LOW(7)
000631 c001      	RJMP _0x204005F
                 _0x204005E:
000632 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
000633 fd04      	SBRC R16,4
000634 c01a      	RJMP _0x2040061
000635 3321      	CPI  R18,49
000636 f420      	BRSH _0x2040063
000637 85a8      	LDD  R26,Y+8
000638 85b9      	LDD  R27,Y+8+1
000639 9711      	SBIW R26,1
00063a f409      	BRNE _0x2040062
                 _0x2040063:
00063b c009      	RJMP _0x20400CD
                 _0x2040062:
00063c 1753      	CP   R21,R19
00063d f010      	BRLO _0x2040067
00063e ff00      	SBRS R16,0
00063f c001      	RJMP _0x2040068
                 _0x2040067:
000640 c013      	RJMP _0x2040066
                 _0x2040068:
000641 e220      	LDI  R18,LOW(32)
000642 ff07      	SBRS R16,7
000643 c00b      	RJMP _0x2040069
000644 e320      	LDI  R18,LOW(48)
                 _0x20400CD:
000645 6100      	ORI  R16,LOW(16)
000646 ff02      	SBRS R16,2
000647 c007      	RJMP _0x204006A
000648 7f0b      	ANDI R16,LOW(251)
000649 934a      	ST   -Y,R20
00064a 940e 0790 	CALL SUBOPT_0x1C
00064c 3050      	CPI  R21,0
00064d f009      	BREQ _0x204006B
00064e 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
00064f 940e 0783 	CALL SUBOPT_0x1A
000651 3050      	CPI  R21,0
000652 f009      	BREQ _0x204006C
000653 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
000654 5031      	SUBI R19,LOW(1)
000655 85a8      	LDD  R26,Y+8
000656 85b9      	LDD  R27,Y+8+1
000657 9712      	SBIW R26,2
000658 f008      	BRLO _0x2040059
000659 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
00065a ff00      	SBRS R16,0
00065b c008      	RJMP _0x204006D
                 _0x204006E:
00065c 3050      	CPI  R21,0
00065d f031      	BREQ _0x2040070
00065e 5051      	SUBI R21,LOW(1)
00065f e2e0      	LDI  R30,LOW(32)
000660 93ea      	ST   -Y,R30
000661 940e 0790 	CALL SUBOPT_0x1C
000663 cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
000664 e010      	LDI  R17,LOW(0)
                 _0x204001B:
000665 cee0      	RJMP _0x2040016
                 _0x2040018:
000666 85ac      	LDD  R26,Y+12
000667 85bd      	LDD  R27,Y+12+1
000668 940e 083a 	CALL __GETW1P
00066a 940e 0894 	CALL __LOADLOCR6
                 _0x20C0002:
00066c 9664      	ADIW R28,20
00066d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00066e 92ff      	PUSH R15
00066f 2ef8      	MOV  R15,R24
000670 9726      	SBIW R28,6
000671 940e 088f 	CALL __SAVELOCR4
000673 940e 07a8 	CALL SUBOPT_0x1F
000675 9730      	SBIW R30,0
000676 f419      	BRNE _0x2040072
000677 efef      	LDI  R30,LOW(65535)
000678 efff      	LDI  R31,HIGH(65535)
000679 c023      	RJMP _0x20C0001
                 _0x2040072:
00067a 01de      	MOVW R26,R28
00067b 9616      	ADIW R26,6
00067c 940e 07b9 	CALL __ADDW2R15
00067e 018d      	MOVW R16,R26
00067f 940e 07a8 	CALL SUBOPT_0x1F
000681 83ee      	STD  Y+6,R30
000682 83ff      	STD  Y+6+1,R31
000683 e0e0      	LDI  R30,LOW(0)
000684 87e8      	STD  Y+8,R30
000685 87e9      	STD  Y+8+1,R30
000686 01de      	MOVW R26,R28
000687 961a      	ADIW R26,10
000688 940e 07b9 	CALL __ADDW2R15
00068a 940e 083a 	CALL __GETW1P
00068c 93fa      	ST   -Y,R31
00068d 93ea      	ST   -Y,R30
00068e 931a      	ST   -Y,R17
00068f 930a      	ST   -Y,R16
000690 e0e0      	LDI  R30,LOW(_put_buff_G102)
000691 e0f5      	LDI  R31,HIGH(_put_buff_G102)
000692 93fa      	ST   -Y,R31
000693 93ea      	ST   -Y,R30
000694 01de      	MOVW R26,R28
000695 961a      	ADIW R26,10
000696 dea3      	RCALL __print_G102
000697 019f      	MOVW R18,R30
000698 81ae      	LDD  R26,Y+6
000699 81bf      	LDD  R27,Y+6+1
00069a e0e0      	LDI  R30,LOW(0)
00069b 93ec      	ST   X,R30
00069c 01f9      	MOVW R30,R18
                 _0x20C0001:
00069d 940e 0896 	CALL __LOADLOCR4
00069f 962a      	ADIW R28,10
0006a0 90ff      	POP  R15
0006a1 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0006a2 93ba      	ST   -Y,R27
0006a3 93aa      	ST   -Y,R26
0006a4 91a9          ld   r26,y+
0006a5 91b9          ld   r27,y+
0006a6 27ee          clr  r30
0006a7 27ff          clr  r31
                 strlen0:
0006a8 916d          ld   r22,x+
0006a9 2366          tst  r22
0006aa f011          breq strlen1
0006ab 9631          adiw r30,1
0006ac cffb          rjmp strlen0
                 strlen1:
0006ad 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006ae 93ba      	ST   -Y,R27
0006af 93aa      	ST   -Y,R26
0006b0 27aa          clr  r26
0006b1 27bb          clr  r27
0006b2 91e9          ld   r30,y+
0006b3 91f9          ld   r31,y+
                 strlenf0:
0006b4 9005      	lpm  r0,z+
0006b5 2000          tst  r0
0006b6 f011          breq strlenf1
0006b7 9611          adiw r26,1
0006b8 cffb          rjmp strlenf0
                 strlenf1:
0006b9 01fd          movw r30,r26
0006ba 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _decades:
0001cd           	.BYTE 0x5
                 _tenths_tab:
0001d2           	.BYTE 0x28
                 _lcdbuffer:
0001fa           	.BYTE 0x20
                 _timer_highword:
00021a           	.BYTE 0x2
                 _measure_state:
00021c           	.BYTE 0x1
                 _set_admux:
00021d           	.BYTE 0x1
                 _menu_item:
00021e           	.BYTE 0xC
                 _calib:
00022a           	.BYTE 0x8
                 _buf:
000232           	.BYTE 0x10
                 _calib_offset:
000242           	.BYTE 0x10
                 __base_y_G100:
000252           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0006bb 91ed      	LD   R30,X+
0006bc 91fd      	LD   R31,X+
0006bd 9631      	ADIW R30,1
0006be 93fe      	ST   -X,R31
0006bf 93ee      	ST   -X,R30
0006c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0006c1 2788      	CLR  R24
0006c2 2799      	CLR  R25
0006c3 85ee      	LDD  R30,Y+14
0006c4 85ff      	LDD  R31,Y+14+1
0006c5 2766      	CLR  R22
0006c6 2777      	CLR  R23
0006c7 940e 07eb 	CALL __MULD12U
0006c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
                +
0006ca 81ac     +LDD R26 , Y + 4
0006cb 81bd     +LDD R27 , Y + 4 + 1
0006cc 818e     +LDD R24 , Y + 4 + 2
0006cd 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0006ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0006cf e4e2      	LDI  R30,LOW(_calib_offset)
0006d0 e0f2      	LDI  R31,HIGH(_calib_offset)
0006d1 93fa      	ST   -Y,R31
0006d2 93ea      	ST   -Y,R30
0006d3 e0e3      	LDI  R30,LOW(3)
0006d4 e0f0      	LDI  R31,HIGH(3)
0006d5 93fa      	ST   -Y,R31
0006d6 93ea      	ST   -Y,R30
0006d7 e1a0      	LDI  R26,LOW(16)
0006d8 e0b0      	LDI  R27,0
0006d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0006da e2ea      	LDI  R30,LOW(_calib)
0006db e0f2      	LDI  R31,HIGH(_calib)
0006dc 93fa      	ST   -Y,R31
0006dd 93ea      	ST   -Y,R30
0006de e1e3      	LDI  R30,LOW(19)
0006df e0f0      	LDI  R31,HIGH(19)
0006e0 93fa      	ST   -Y,R31
0006e1 93ea      	ST   -Y,R30
0006e2 e0a8      	LDI  R26,LOW(8)
0006e3 e0b0      	LDI  R27,0
0006e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
0006e5 85a8      	LDD  R26,Y+8
0006e6 85b9      	LDD  R27,Y+8+1
0006e7 27ee      	CLR  R30
0006e8 0fa0      	ADD  R26,R16
0006e9 1fbe      	ADC  R27,R30
0006ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0006eb 2fe1      	MOV  R30,R17
0006ec eda2      	LDI  R26,LOW(_tenths_tab)
0006ed e0b1      	LDI  R27,HIGH(_tenths_tab)
0006ee e0f0      	LDI  R31,0
0006ef 940e 07dc 	CALL __LSLW2
0006f1 0fae      	ADD  R26,R30
0006f2 1fbf      	ADC  R27,R31
0006f3 940e 083e 	CALL __GETD1P
0006f5 dfd4      	RCALL SUBOPT_0x2
0006f6 940e 0888 	CALL __CPD21
0006f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:32 WORDS
                 SUBOPT_0x7:
0006f9 e0f0      	LDI  R31,0
0006fa 940e 07dc 	CALL __LSLW2
0006fc 0fae      	ADD  R26,R30
0006fd 1fbf      	ADC  R27,R31
0006fe 940e 083e 	CALL __GETD1P
000700 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000701 e0a1      	LDI  R26,LOW(1)
000702 e0b0      	LDI  R27,0
000703 940c 07af 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
000705 e0e0     +LDI R30 , LOW ( 0x0 )
000706 e0f0     +LDI R31 , HIGH ( 0x0 )
000707 e060     +LDI R22 , BYTE3 ( 0x0 )
000708 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000709 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00070a 2fe1      	MOV  R30,R17
00070b e4a2      	LDI  R26,LOW(_calib_offset)
00070c e0b2      	LDI  R27,HIGH(_calib_offset)
00070d cfeb      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
00070e e2aa      	LDI  R26,LOW(_calib)
00070f e0b2      	LDI  R27,HIGH(_calib)
000710 e0f0      	LDI  R31,0
000711 0fee      	LSL  R30
000712 1fff      	ROL  R31
000713 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
000714 0fae      	ADD  R26,R30
000715 1fbf      	ADC  R27,R31
000716 940e 083a 	CALL __GETW1P
000718 93fa      	ST   -Y,R31
000719 93ea      	ST   -Y,R30
00071a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
00071b 9724      	SBIW R28,4
00071c 931a      	ST   -Y,R17
00071d 2d15      	MOV  R17,R5
00071e 2455      	CLR  R5
00071f 940e 01f2 	CALL _measure
                +
000721 83e9     +STD Y + 1 , R30
000722 83fa     +STD Y + 1 + 1 , R31
000723 836b     +STD Y + 1 + 2 , R22
000724 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
000725 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xE:
000726 940e 01f2 	CALL _measure
                +
000728 83e9     +STD Y + 1 , R30
000729 83fa     +STD Y + 1 + 1 , R31
00072a 836b     +STD Y + 1 + 2 , R22
00072b 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
00072c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xF:
00072d 2de5      	MOV  R30,R5
00072e e4a2      	LDI  R26,LOW(_calib_offset)
00072f e0b2      	LDI  R27,HIGH(_calib_offset)
000730 e0f0      	LDI  R31,0
000731 940e 07dc 	CALL __LSLW2
000733 0fea      	ADD  R30,R26
000734 1ffb      	ADC  R31,R27
                +
000735 81a9     +LDD R26 , Y + 1
000736 81ba     +LDD R27 , Y + 1 + 1
000737 818b     +LDD R24 , Y + 1 + 2
000738 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000739 940e 0857 	CALL __PUTDZ20
00073b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x10:
00073c 2de5      	MOV  R30,R5
00073d e4a2      	LDI  R26,LOW(_calib_offset)
00073e e0b2      	LDI  R27,HIGH(_calib_offset)
00073f cfb9      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
                +
000740 81a9     +LDD R26 , Y + 1
000741 81ba     +LDD R27 , Y + 1 + 1
000742 818b     +LDD R24 , Y + 1 + 2
000743 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000744 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x12:
000745 940e 07c7 	CALL __SUBD21
                +
000747 83a9     +STD Y + 1 , R26
000748 83ba     +STD Y + 1 + 1 , R27
000749 838b     +STD Y + 1 + 2 , R24
00074a 839c     +STD Y + 1 + 3 , R25
                 	__PUTD2S 1
00074b 2de5      	MOV  R30,R5
00074c cfc1      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
00074d dff2      	RCALL SUBOPT_0x11
00074e e0e8      	LDI  R30,LOW(8)
00074f 940e 07d0 	CALL __LSRD12
                +
000751 e0a0     +LDI R26 , LOW ( 0xF424000 )
000752 e4b0     +LDI R27 , HIGH ( 0xF424000 )
000753 e482     +LDI R24 , BYTE3 ( 0xF424000 )
000754 e09f     +LDI R25 , BYTE4 ( 0xF424000 )
                 	__GETD2N 0xF424000
000755 940e 080b 	CALL __DIVD21U
000757 9631      	ADIW R30,1
000758 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000759 dfe6      	RCALL SUBOPT_0x11
00075a cfea      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x15:
                +
00075b 81e9     +LDD R30 , Y + 1
00075c 81fa     +LDD R31 , Y + 1 + 1
00075d 816b     +LDD R22 , Y + 1 + 2
00075e 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
00075f e0a0     +LDI R26 , LOW ( 0x3E80000 )
000760 e0b0     +LDI R27 , HIGH ( 0x3E80000 )
000761 ee88     +LDI R24 , BYTE3 ( 0x3E80000 )
000762 e093     +LDI R25 , BYTE4 ( 0x3E80000 )
                 	__GETD2N 0x3E80000
000763 940e 080b 	CALL __DIVD21U
000765 9631      	ADIW R30,1
000766 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000767 2fe1      	MOV  R30,R17
000768 e1ae      	LDI  R26,LOW(_menu_item)
000769 e0b2      	LDI  R27,HIGH(_menu_item)
00076a e0f0      	LDI  R31,0
00076b 0fee      	LSL  R30
00076c 1fff      	ROL  R31
00076d cfa6      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00076e 940e 0452 	CALL __lcd_write_data
000770 e0a3      	LDI  R26,LOW(3)
000771 e0b0      	LDI  R27,0
000772 940c 07af 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x18:
000774 e3a0      	LDI  R26,LOW(48)
000775 940e 043d 	CALL __lcd_write_nibble_G100
                +
000777 e184     +LDI R24 , LOW ( 276 )
000778 e091     +LDI R25 , HIGH ( 276 )
                +__DELAY_USW_LOOP :
000779 9701     +SBIW R24 , 1
00077a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 276
00077b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
00077c 81ec      	LDD  R30,Y+4
00077d 81fd      	LDD  R31,Y+4+1
00077e 9731      	SBIW R30,1
00077f 83ec      	STD  Y+4,R30
000780 83fd      	STD  Y+4+1,R31
000781 9631      	ADIW R30,1
000782 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1A:
000783 932a      	ST   -Y,R18
000784 85ad      	LDD  R26,Y+13
000785 85be      	LDD  R27,Y+13+1
000786 85ef      	LDD  R30,Y+15
000787 89f8      	LDD  R31,Y+15+1
000788 9509      	ICALL
000789 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
00078a 89e8      	LDD  R30,Y+16
00078b 89f9      	LDD  R31,Y+16+1
00078c 9734      	SBIW R30,4
00078d 8be8      	STD  Y+16,R30
00078e 8bf9      	STD  Y+16+1,R31
00078f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000790 85ad      	LDD  R26,Y+13
000791 85be      	LDD  R27,Y+13+1
000792 85ef      	LDD  R30,Y+15
000793 89f8      	LDD  R31,Y+15+1
000794 9509      	ICALL
000795 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1D:
000796 89a8      	LDD  R26,Y+16
000797 89b9      	LDD  R27,Y+16+1
000798 9614      	ADIW R26,4
000799 940e 083a 	CALL __GETW1P
00079b 83ee      	STD  Y+6,R30
00079c 83ff      	STD  Y+6+1,R31
00079d 81ae      	LDD  R26,Y+6
00079e 81bf      	LDD  R27,Y+6+1
00079f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
0007a0 89a8      	LDD  R26,Y+16
0007a1 89b9      	LDD  R27,Y+16+1
0007a2 9614      	ADIW R26,4
0007a3 940e 083a 	CALL __GETW1P
0007a5 87ea      	STD  Y+10,R30
0007a6 87fb      	STD  Y+10+1,R31
0007a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0007a8 01de      	MOVW R26,R28
0007a9 961c      	ADIW R26,12
0007aa 940e 07b9 	CALL __ADDW2R15
0007ac 940e 083a 	CALL __GETW1P
0007ae 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0007af 9610      	adiw r26,0
0007b0 f039      	breq __delay_ms1
                 __delay_ms0:
0007b1 95a8      	wdr
                +
0007b2 ec8d     +LDI R24 , LOW ( 0xACD )
0007b3 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0007b4 9701     +SBIW R24 , 1
0007b5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0007b6 9711      	sbiw r26,1
0007b7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0007b8 9508      	ret
                 
                 __ADDW2R15:
0007b9 2400      	CLR  R0
0007ba 0daf      	ADD  R26,R15
0007bb 1db0      	ADC  R27,R0
0007bc 9508      	RET
                 
                 __ADDD12:
0007bd 0fea      	ADD  R30,R26
0007be 1ffb      	ADC  R31,R27
0007bf 1f68      	ADC  R22,R24
0007c0 1f79      	ADC  R23,R25
0007c1 9508      	RET
                 
                 __SUBD12:
0007c2 1bea      	SUB  R30,R26
0007c3 0bfb      	SBC  R31,R27
0007c4 0b68      	SBC  R22,R24
0007c5 0b79      	SBC  R23,R25
0007c6 9508      	RET
                 
                 __SUBD21:
0007c7 1bae      	SUB  R26,R30
0007c8 0bbf      	SBC  R27,R31
0007c9 0b86      	SBC  R24,R22
0007ca 0b97      	SBC  R25,R23
0007cb 9508      	RET
                 
                 __ANEGW1:
0007cc 95f1      	NEG  R31
0007cd 95e1      	NEG  R30
0007ce 40f0      	SBCI R31,0
0007cf 9508      	RET
                 
                 __LSRD12:
0007d0 23ee      	TST  R30
0007d1 2e0e      	MOV  R0,R30
0007d2 01fd      	MOVW R30,R26
0007d3 01bc      	MOVW R22,R24
0007d4 f031      	BREQ __LSRD12R
                 __LSRD12L:
0007d5 9576      	LSR  R23
0007d6 9567      	ROR  R22
0007d7 95f7      	ROR  R31
0007d8 95e7      	ROR  R30
0007d9 940a      	DEC  R0
0007da f7d1      	BRNE __LSRD12L
                 __LSRD12R:
0007db 9508      	RET
                 
                 __LSLW2:
0007dc 0fee      	LSL  R30
0007dd 1fff      	ROL  R31
0007de 0fee      	LSL  R30
0007df 1fff      	ROL  R31
0007e0 9508      	RET
                 
                 __LSRD16:
0007e1 2fe6      	MOV  R30,R22
0007e2 2ff7      	MOV  R31,R23
0007e3 e060      	LDI  R22,0
0007e4 e070      	LDI  R23,0
0007e5 9508      	RET
                 
                 __LSLD16:
0007e6 2f6e      	MOV  R22,R30
0007e7 2f7f      	MOV  R23,R31
0007e8 e0e0      	LDI  R30,0
0007e9 e0f0      	LDI  R31,0
0007ea 9508      	RET
                 
                 __MULD12U:
0007eb 9f7a      	MUL  R23,R26
0007ec 2d70      	MOV  R23,R0
0007ed 9f6b      	MUL  R22,R27
0007ee 0d70      	ADD  R23,R0
0007ef 9ff8      	MUL  R31,R24
0007f0 0d70      	ADD  R23,R0
0007f1 9fe9      	MUL  R30,R25
0007f2 0d70      	ADD  R23,R0
0007f3 9f6a      	MUL  R22,R26
0007f4 2d60      	MOV  R22,R0
0007f5 0d71      	ADD  R23,R1
0007f6 9ffb      	MUL  R31,R27
0007f7 0d60      	ADD  R22,R0
0007f8 1d71      	ADC  R23,R1
0007f9 9fe8      	MUL  R30,R24
0007fa 0d60      	ADD  R22,R0
0007fb 1d71      	ADC  R23,R1
0007fc 2788      	CLR  R24
0007fd 9ffa      	MUL  R31,R26
0007fe 2df0      	MOV  R31,R0
0007ff 0d61      	ADD  R22,R1
000800 1f78      	ADC  R23,R24
000801 9feb      	MUL  R30,R27
000802 0df0      	ADD  R31,R0
000803 1d61      	ADC  R22,R1
000804 1f78      	ADC  R23,R24
000805 9fea      	MUL  R30,R26
000806 2de0      	MOV  R30,R0
000807 0df1      	ADD  R31,R1
000808 1f68      	ADC  R22,R24
000809 1f78      	ADC  R23,R24
00080a 9508      	RET
                 
                 __DIVD21U:
00080b 933f      	PUSH R19
00080c 934f      	PUSH R20
00080d 935f      	PUSH R21
00080e 2400      	CLR  R0
00080f 2411      	CLR  R1
000810 2744      	CLR  R20
000811 2755      	CLR  R21
000812 e230      	LDI  R19,32
                 __DIVD21U1:
000813 0faa      	LSL  R26
000814 1fbb      	ROL  R27
000815 1f88      	ROL  R24
000816 1f99      	ROL  R25
000817 1c00      	ROL  R0
000818 1c11      	ROL  R1
000819 1f44      	ROL  R20
00081a 1f55      	ROL  R21
00081b 1a0e      	SUB  R0,R30
00081c 0a1f      	SBC  R1,R31
00081d 0b46      	SBC  R20,R22
00081e 0b57      	SBC  R21,R23
00081f f428      	BRCC __DIVD21U2
000820 0e0e      	ADD  R0,R30
000821 1e1f      	ADC  R1,R31
000822 1f46      	ADC  R20,R22
000823 1f57      	ADC  R21,R23
000824 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000825 60a1      	SBR  R26,1
                 __DIVD21U3:
000826 953a      	DEC  R19
000827 f759      	BRNE __DIVD21U1
000828 01fd      	MOVW R30,R26
000829 01bc      	MOVW R22,R24
00082a 01d0      	MOVW R26,R0
00082b 01ca      	MOVW R24,R20
00082c 915f      	POP  R21
00082d 914f      	POP  R20
00082e 913f      	POP  R19
00082f 9508      	RET
                 
                 __MANDW12:
000830 94e8      	CLT
000831 fff7      	SBRS R31,7
000832 c002      	RJMP __MANDW121
000833 df98      	RCALL __ANEGW1
000834 9468      	SET
                 __MANDW121:
000835 23ea      	AND  R30,R26
000836 23fb      	AND  R31,R27
000837 f40e      	BRTC __MANDW122
000838 df93      	RCALL __ANEGW1
                 __MANDW122:
000839 9508      	RET
                 
                 __GETW1P:
00083a 91ed      	LD   R30,X+
00083b 91fc      	LD   R31,X
00083c 9711      	SBIW R26,1
00083d 9508      	RET
                 
                 __GETD1P:
00083e 91ed      	LD   R30,X+
00083f 91fd      	LD   R31,X+
000840 916d      	LD   R22,X+
000841 917c      	LD   R23,X
000842 9713      	SBIW R26,3
000843 9508      	RET
                 
                 __PUTDP1:
000844 93ed      	ST   X+,R30
000845 93fd      	ST   X+,R31
000846 936d      	ST   X+,R22
000847 937c      	ST   X,R23
000848 9508      	RET
                 
                 __GETW1PF:
000849 9005      	LPM  R0,Z+
00084a 91f4      	LPM  R31,Z
00084b 2de0      	MOV  R30,R0
00084c 9508      	RET
                 
                 __GETD2S0:
00084d 81a8      	LD   R26,Y
00084e 81b9      	LDD  R27,Y+1
00084f 818a      	LDD  R24,Y+2
000850 819b      	LDD  R25,Y+3
000851 9508      	RET
                 
                 __PUTD1S0:
000852 83e8      	ST   Y,R30
000853 83f9      	STD  Y+1,R31
000854 836a      	STD  Y+2,R22
000855 837b      	STD  Y+3,R23
000856 9508      	RET
                 
                 __PUTDZ20:
000857 83a0      	ST   Z,R26
000858 83b1      	STD  Z+1,R27
000859 8382      	STD  Z+2,R24
00085a 8393      	STD  Z+3,R25
00085b 9508      	RET
                 
                 __PUTPARD1:
00085c 937a      	ST   -Y,R23
00085d 936a      	ST   -Y,R22
00085e 93fa      	ST   -Y,R31
00085f 93ea      	ST   -Y,R30
000860 9508      	RET
                 
                 __PUTPARD2:
000861 939a      	ST   -Y,R25
000862 938a      	ST   -Y,R24
000863 93ba      	ST   -Y,R27
000864 93aa      	ST   -Y,R26
000865 9508      	RET
                 
                 __EEPROMRDB:
000866 99e1      	SBIC EECR,EEWE
000867 cffe      	RJMP __EEPROMRDB
000868 93ff      	PUSH R31
000869 b7ff      	IN   R31,SREG
00086a 94f8      	CLI
00086b bbae      	OUT  EEARL,R26
00086c bbbf      	OUT  EEARH,R27
00086d 9ae0      	SBI  EECR,EERE
00086e b3ed      	IN   R30,EEDR
00086f bfff      	OUT  SREG,R31
000870 91ff      	POP  R31
000871 9508      	RET
                 
                 __EEPROMWRB:
000872 9be1      	SBIS EECR,EEWE
000873 c002      	RJMP __EEPROMWRB1
000874 95a8      	WDR
000875 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000876 b79f      	IN   R25,SREG
000877 94f8      	CLI
000878 bbae      	OUT  EEARL,R26
000879 bbbf      	OUT  EEARH,R27
00087a 9ae0      	SBI  EECR,EERE
00087b b38d      	IN   R24,EEDR
00087c 17e8      	CP   R30,R24
00087d f019      	BREQ __EEPROMWRB0
00087e bbed      	OUT  EEDR,R30
00087f 9ae2      	SBI  EECR,EEMWE
000880 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000881 bf9f      	OUT  SREG,R25
000882 9508      	RET
                 
                 __CPD12:
000883 17ea      	CP   R30,R26
000884 07fb      	CPC  R31,R27
000885 0768      	CPC  R22,R24
000886 0779      	CPC  R23,R25
000887 9508      	RET
                 
                 __CPD21:
000888 17ae      	CP   R26,R30
000889 07bf      	CPC  R27,R31
00088a 0786      	CPC  R24,R22
00088b 0797      	CPC  R25,R23
00088c 9508      	RET
                 
                 __SAVELOCR6:
00088d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00088e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00088f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000890 932a      	ST   -Y,R18
                 __SAVELOCR2:
000891 931a      	ST   -Y,R17
000892 930a      	ST   -Y,R16
000893 9508      	RET
                 
                 __LOADLOCR6:
000894 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000895 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000896 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000897 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000898 8119      	LDD  R17,Y+1
000899 8108      	LD   R16,Y
00089a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16A register use summary:
r0 :  28 r1 :  11 r2 :   0 r3 :   0 r4 :   4 r5 :  30 r6 :   2 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  61 r17:  71 r18:  42 r19:  20 r20:  16 r21:  23 r22:  46 r23:  41 
r24:  58 r25:  29 r26: 215 r27: 109 r28:  21 r29:   1 r30: 443 r31: 158 
x  :  43 y  : 338 z  :  20 
Registers used: 26 out of 35 (74.3%)

ATmega16A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  23 
adiw  :  31 and   :   6 andi  :   7 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  27 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   0 brmi  :   1 brne  :  46 brpl  :   1 brsh  :   6 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 163 
cbi   :  17 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  22 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :  14 cpi   :  61 cpse  :   0 dec   :   7 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  11 inc   :   2 jmp   :  29 ld    :  42 ldd   : 153 ldi   : 258 
lds   :   8 lpm   :  14 lsl   :   5 lsr   :   1 mov   :  53 movw  :  35 
mul   :  11 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   8 out   :  65 pop   :  17 push  :  17 rcall :  40 ret   :  71 
reti  :   2 rjmp  : 121 rol   :  11 ror   :   3 sbc   :  10 sbci  :   7 
sbi   :  23 sbic  :   6 sbis  :   4 sbiw  :  25 sbr   :   1 sbrc  :   3 
sbrs  :  18 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 123 std   :  71 sts   :  23 sub   :   4 subi  :  32 swap  :   2 
tst   :   5 wdr   :   2 
Instructions used: 68 out of 116 (58.6%)

ATmega16A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001136   4104    302   4406   16384  26.9%
[.dseg] 0x000060 0x000256      0    246    246    1024  24.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
