;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;unsigned char volatile measure_state;
;unsigned char rangemode = RANGE_AUTO;
;char *menu_item[MENU_ITEMS] = {"Range: Auto", "Range: Low ", "Range: High", "Cal ...
_0x5:
	.BYTE 0x55
;unsigned short calib[4] = {21430, 9308, 19423, 8437};
;unsigned long calib_offset[4] = {0, 0, 0, 0};
; 0000 0081 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0082 if (measure_state == STATE_LOW_THRESH)
;PCODE: $0000000F VOL: 1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0083 {
; 0000 0084 /* We just got low threshold interrupt, start timer and set high threshold */
; 0000 0085 TIMER_START;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0086 ADMUX = set_admux;
;PCODE: $00000014 VOL: 1
;PCODE: $00000015 VOL: 0
; 0000 0087 measure_state = STATE_HIGH_THRESH;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 1
; 0000 0088 }
; 0000 0089 else if (measure_state == STATE_HIGH_THRESH)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 1
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 008A {
; 0000 008B /* High threshold interrupt, verify it, then stop timer */
; 0000 008C if (ACSR & (1 << ACO))
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 008D {
; 0000 008E TIMER_STOP;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 008F measure_state = STATE_DONE;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 1
; 0000 0090 }
; 0000 0091 }
;PCODE: $00000024 VOL: 0
; 0000 0092 }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0096 {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0097 /* Timer 1 counts the low 16 bits, this interrupt updates the high 16 bits */
; 0000 0098 timer_highword++;
;PCODE: $0000002C VOL: 1
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0099 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;void MUL_LONG_SHORT_S2(uint32_t x, uint16_t y, uint32_t *result)
; 0000 00B3 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00B4 // int16_t x_high = x >> 16;              // Integer part (signed)
; 0000 00B5 // uint16_t x_low = x & 0xFFFF;           // Fractional part (unsigned)
; 0000 00B6 
; 0000 00B7 // int32_t part1 = (int32_t)x_high * y;   // Signed mult: integer part
; 0000 00B8 // int32_t part2 = ((int32_t)x_low * y + 0x8000) >> 16; // Rounded fractional pa ...
; 0000 00B9 
; 0000 00BA // int32_t combined = part1 + part2;
; 0000 00BB 
; 0000 00BC //*result = (uint32_t)combined;          // Cast final signed result to unsigned
; 0000 00BD uint16_t x_frac = x & 0xFFFF;
; 0000 00BE uint16_t x_int = x >> 16;
; 0000 00BF 
; 0000 00C0 uint32_t part1 = ((uint32_t)x_frac * y) >> 16;
; 0000 00C1 uint32_t part2 = (uint32_t)x_int * y;
; 0000 00C2 *result = (part2) + part1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;	x -> Y+16
;	y -> Y+14
;	*result -> Y+12
;	x_frac -> R16,R17
;	x_int -> R18,R19
;	part1 -> Y+8
;	part2 -> Y+4
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00C3 // return result;
; 0000 00C4 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;void eeprom_read(void)
; 0000 00CF {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00D0 if (eeprom_read_byte((void *)EEPROM_HEADER) != 'C')
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00D1 return;
;PCODE: $0000005A VOL: 0
; 0000 00D2 
; 0000 00D3 if (eeprom_read_byte((void *)(EEPROM_HEADER + 1)) != 'D')
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00D4 return;
;PCODE: $00000060 VOL: 0
; 0000 00D5 
; 0000 00D6 eeprom_read_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET) ...
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00D7 eeprom_read_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFFS ...
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00D8 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;void eeprom_write(void)
; 0000 00DB {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00DC eeprom_write_byte((void *)EEPROM_HEADER, 'C');
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00DD eeprom_write_byte((void *)(EEPROM_HEADER + 1), 'D');
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00DE 
; 0000 00DF eeprom_write_block(calib_offset, (eeprom void *)EEPROM_DATA, SIZE_OF_CALIBOFFSET ...
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00E0 eeprom_write_block(calib, (eeprom void *)((char *)EEPROM_DATA + SIZE_OF_CALIBOFF ...
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00E1 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;void lcd_string(const char *str, unsigned char pos)
; 0000 00E4 {
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00E5 unsigned char row = (pos >= 16) ? 1 : 0;
; 0000 00E6 unsigned char col = (pos % 16);
; 0000 00E7 lcd_gotoxy(col, row);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;	*str -> Y+3
;	pos -> Y+2
;	row -> R17
;	col -> R16
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00E8 lcd_puts(str);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E9 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;char long2ascii(char *target, unsigned long value)
; 0000 00F2 {
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00F3 unsigned char p, pos=0;
; 0000 00F4 unsigned char numbernow=0;
; 0000 00F5 char ret=0;
; 0000 00F6 
; 0000 00F7 for (p=0;(p<10) && (pos<5);p++) {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;	*target -> Y+8
;	value -> Y+4
;	p -> R17
;	pos -> R16
;	numbernow -> R19
;	ret -> R18
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00F8 
; 0000 00F9 if (numbernow) {
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00FA /* Eventually place dot */
; 0000 00FB /* Notice the nice fallthrough construction. */
; 0000 00FC switch(p) {
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00FD case 1:
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00FE ret++;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00FF case 4:
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0100 ret++;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0101 case 7:
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0102 ret++;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0103 target[pos] = '.';
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0104 pos++;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0105 }
;PCODE: $000000E3 VOL: 0
; 0000 0106 }
; 0000 0107 
; 0000 0108 if (value < tenths_tab[p]) {
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0109 if (numbernow) {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 010A /* Inside number, put a zero */
; 0000 010B target[pos] = '0';
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 010C pos++;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 010D }
; 0000 010E else {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 010F /* Check if we need to pad with spaces */
; 0000 0110 if (p>=6) {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0111 target[pos] = ' ';
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0112 pos++;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0113 }
; 0000 0114 
; 0000 0115 if (p==6) {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0116 /* We also need to place a space instead of . */
; 0000 0117 target[pos] = ' ';
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0118 pos++;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0119 }
; 0000 011A }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 011B }
; 0000 011C else {
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 011D target[pos] = '0';
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 011E while (value >= tenths_tab[p]) {
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 011F target[pos]++;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0120 value -= tenths_tab[p];
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0121 }
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 0122 pos++;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0123 numbernow = 1;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0124 }
;PCODE: $00000131 VOL: 0
; 0000 0125 }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0126 
; 0000 0127 return ret;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0128 }
;PCODE: $0000013B VOL: 0
;long measure(void)
; 0000 012B {
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 012C unsigned short i;
; 0000 012D 
; 0000 012E measure_state = STATE_IDLE;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;	i -> R16,R17
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 1
; 0000 012F 
; 0000 0130 /* Discharge cap until below low threshold + some extra */
; 0000 0131 ADMUX = ADMUX_LOW;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0132 PULLDOWN_RANGE; /* Use range signal as pull down */
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0133 
; 0000 0134 while (1)
;PCODE: $00000148 VOL: 0
; 0000 0135 {
; 0000 0136 /* Enable comperator and check value */
; 0000 0137 DISCHARGE_OFF;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0138 delay_ms(1);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0139 
; 0000 013A /* This value must be checked in every loop */
; 0000 013B if (BUTTON_PUSHED)
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 013C return 0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 013D 
; 0000 013E if (!(ACSR & (1 << ACO)))
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 013F break;
;PCODE: $00000158 VOL: 0
; 0000 0140 
; 0000 0141 /* Discharge for a while */
; 0000 0142 DISCHARGE_ON;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0143 delay_ms(10);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0144 }
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0145 
; 0000 0146 DISCHARGE_ON;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0147 delay_ms(EXTRA_DISCHARGE_MS);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0148 
; 0000 0149 /* Prepare: reset timer, low range */
; 0000 014A TIMER_STOP;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 014B TIMER_VALUE = 0;
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 014C timer_highword = 0;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 1
; 0000 014D 
; 0000 014E LOW_RANGE;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 014F 
; 0000 0150 measure_state = STATE_LOW_THRESH;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 1
; 0000 0151 
; 0000 0152 /* High or medium threshold */
; 0000 0153 if (rangemode & RANGE_HIGH_THRESH)
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 0154 set_admux = ADMUX_HIGH;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 1
; 0000 0155 else
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 0156 set_admux = ADMUX_MEDIUM;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 1
; 0000 0157 
; 0000 0158 /* Apply step */
; 0000 0159 LED_ON;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 015A DISCHARGE_OFF;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 015B 
; 0000 015C if (rangemode & RANGE_AUTO)
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 015D {
; 0000 015E 
; 0000 015F /* Autorange: See if low range produces something before LOW_RANGE_TIMEOUT ms */
; 0000 0160 i = 0;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0161 while ((measure_state == STATE_LOW_THRESH) && (++i < LOW_RANGE_TIMEOUT))
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 1
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0162 {
; 0000 0163 delay_ms(1);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0164 
; 0000 0165 /* This value must be checked in every loop */
; 0000 0166 if (BUTTON_PUSHED)
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 0167 return 0;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0168 }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0169 
; 0000 016A if (i >= LOW_RANGE_TIMEOUT)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 016B {
; 0000 016C /* low range timeout, go to high range (better discharge a little first) */
; 0000 016D DISCHARGE_ON;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 016E delay_ms(EXTRA_DISCHARGE_MS);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 016F DISCHARGE_OFF;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0170 HIGH_RANGE;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0171 rangemode |= RANGE_HIGH;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0172 }
; 0000 0173 else
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0174 {
; 0000 0175 /* low range was ok, set flag accordingly */
; 0000 0176 rangemode &= ~RANGE_HIGH;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0177 }
;PCODE: $000001B4 VOL: 0
; 0000 0178 }
; 0000 0179 else if (rangemode & RANGE_HIGH)
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 017A {
; 0000 017B HIGH_RANGE;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 017C }
; 0000 017D 
; 0000 017E /* Wait for completion, timing out after HIGH_RANGE_TIMEOUT */
; 0000 017F i = 0;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0180 while ((measure_state != STATE_DONE) && (++i < HIGH_RANGE_TIMEOUT))
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 1
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0181 {
; 0000 0182 delay_ms(1);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0183 
; 0000 0184 /* This value must be checked in every loop */
; 0000 0185 if (BUTTON_PUSHED)
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0186 return 0;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0187 }
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0188 
; 0000 0189 /* Done, discharge cap now */
; 0000 018A LOW_RANGE;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 018B DISCHARGE_ON;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 018C LED_OFF;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 018D 
; 0000 018E if (measure_state != STATE_DONE)
;PCODE: $000001E3 VOL: 1
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 018F rangemode |= RANGE_OVERFLOW;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0190 else
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0191 rangemode &= ~RANGE_OVERFLOW;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0192 
; 0000 0193 measure_state = STATE_IDLE;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 1
; 0000 0194 
; 0000 0195 return ((unsigned long)timer_highword << 16) + TIMER_VALUE;
;PCODE: $000001F1 VOL: 1
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0196 }
;PCODE: $000001FA VOL: 0
;void calc_and_show(long value)
; 0000 01A2 {
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 01A3 unsigned char b;
; 0000 01A4 unsigned long l;
; 0000 01A5 
; 0000 01A6 if (rangemode & RANGE_AUTO)
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;	value -> Y+5
;	b -> R17
;	l -> Y+1
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 01A7 lcd_string("Auto ", 0);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 01A8 else
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 01A9 lcd_string("Force", 0);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 01AA 
; 0000 01AB if (rangemode & RANGE_HIGH)
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 01AC lcd_string(" high", 16);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 01AD else
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 01AE lcd_string(" low ", 16);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 01AF 
; 0000 01B0 if (rangemode & RANGE_OVERFLOW)
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 01B1 {
; 0000 01B2 /* Todo - this smarter */
; 0000 01B3 lcdbuffer[0] = ' ';
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 01B4 lcdbuffer[1] = ' ';
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 01B5 lcdbuffer[2] = ' ';
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 01B6 lcdbuffer[3] = 'E';
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 01B7 lcdbuffer[4] = 'r';
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01B8 lcdbuffer[5] = 'r';
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 01B9 lcdbuffer[6] = 'o';
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01BA lcdbuffer[7] = 'r';
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 01BB lcdbuffer[8] = ' ';
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01BC lcdbuffer[9] = 0;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 01BD }
; 0000 01BE else
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 01BF {
; 0000 01C0 /* Select calibration value */
; 0000 01C1 b = rangemode & 3;
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01C2 
; 0000 01C3 if (calib_offset[b] > value)
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01C4 {
; 0000 01C5 lcdbuffer[0] = '-';
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01C6 value = calib_offset[b] - value;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 01C7 }
; 0000 01C8 else
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01C9 {
; 0000 01CA lcdbuffer[0] = ' ';
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01CB value = value - calib_offset[b];
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 01CC }
;PCODE: $00000267 VOL: 0
; 0000 01CD // sprintf(buf, "before mul : %u", 2);  // or whatever variable
; 0000 01CE // lcd_string(buf,0);
; 0000 01CF // delay_ms(1000);
; 0000 01D0 MUL_LONG_SHORT_S2(value, calib[b], &l);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 01D1 // sprintf(buf, "after mul: %u", l);  // or whatever variable
; 0000 01D2 // lcd_string(buf,0);
; 0000 01D3 // delay_ms(1000);
; 0000 01D4 b = long2ascii(lcdbuffer + 1, l);
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01D5 
; 0000 01D6 /* High range shifts 1E3 */
; 0000 01D7 if (rangemode & RANGE_HIGH)
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 01D8 b++;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 01D9 
; 0000 01DA lcdbuffer[6] = ' ';
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 01DB lcdbuffer[7] = decades[b]; /* range = 1 shifts 1E3 */
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 01DC lcdbuffer[8] = 'F';
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01DD lcdbuffer[9] = 0;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 01DE }
;PCODE: $0000028E VOL: 0
; 0000 01DF // sprintf(buf, "after ascii: %u", decades[b]); // or whatever variable
; 0000 01E0 //lcd_string(buf, 0);
; 0000 01E1 //delay_ms(1000);
; 0000 01E2 /* Write high threshold in first line, low threshold in second */
; 0000 01E3 if (rangemode & RANGE_HIGH_THRESH)
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01E4 b = 7;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 01E5 else
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 01E6 b = 23;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01E7 // sprintf(buf, "%u", lcdbuffer);  // or whatever variable
; 0000 01E8 //lcd_string(buf,b);
; 0000 01E9 lcd_string(lcdbuffer, b);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 01EA 
; 0000 01EB }
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0

	.DSEG
_0x43:
	.BYTE 0x18
;void calibrate_zero(void)
; 0000 01EE {

	.CSEG
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 01EF char oldrange = rangemode;
; 0000 01F0 unsigned long l;
; 0000 01F1 
; 0000 01F2 rangemode = 0;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;	oldrange -> R17
;	l -> Y+1
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 01F3 
; 0000 01F4 l = measure();
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01F5 l = measure();
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 01F6 
; 0000 01F7 calib_offset[rangemode] = l;
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 01F8 
; 0000 01F9 rangemode = RANGE_HIGH_THRESH;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01FA 
; 0000 01FB l = measure();
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01FC l = measure();
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 01FD 
; 0000 01FE calib_offset[rangemode] = l;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 01FF 
; 0000 0200 rangemode = oldrange;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0201 }
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;void calibrate(void)
; 0000 0204 {
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0205 char oldrange = rangemode;
; 0000 0206 unsigned long value;
; 0000 0207 
; 0000 0208 rangemode = 0;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;	oldrange -> R17
;	value -> Y+1
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0209 value = measure();
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 020A value -= calib_offset[rangemode];
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 020B calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 020C 
; 0000 020D rangemode = RANGE_HIGH_THRESH;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 020E value = measure();
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 020F value -= calib_offset[rangemode];
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0210 calib[rangemode] = CALIB_LOW / (value >> 8) + 1;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0211 
; 0000 0212 rangemode = RANGE_HIGH;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0213 value = measure();
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
; 0000 0214 value -= calib_offset[rangemode];
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0215 calib[rangemode] = CALIB_HIGH / value + 1;
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 0216 
; 0000 0217 rangemode = RANGE_HIGH | RANGE_HIGH_THRESH;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0218 value = measure();
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 0219 value -= calib_offset[rangemode];
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 021A calib[rangemode] = CALIB_HIGH / value + 1;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 021B 
; 0000 021C rangemode = oldrange;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 021D }
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 0222 {
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 0223 unsigned char i;
; 0000 0224 
; 0000 0225 lcd_clear();
;PCODE: $0000033E VOL: 0
;	i -> R17
;PCODE: $0000033F VOL: 0
; 0000 0226 
; 0000 0227 for (i = 0; i < MENU_ITEMS; i++)
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0228 {
; 0000 0229 lcd_string(menu_item[i], 0);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 022A delay_ms(MENU_SPEED);
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
; 0000 022B 
; 0000 022C if (!BUTTON_PUSHED)
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 022D break;
;PCODE: $00000357 VOL: 0
; 0000 022E }
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 022F 
; 0000 0230 if (i == MENU_ITEMS)
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 0231 {
; 0000 0232 /* Just clear display, if user went out of menu */
; 0000 0233 lcd_clear();
;PCODE: $00000361 VOL: 0
; 0000 0234 
; 0000 0235 /* Wait for release of button */
; 0000 0236 while (BUTTON_PUSHED)
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 0237 ;
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 0238 delay_ms(10);
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0239 }
; 0000 023A else
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 023B {
; 0000 023C /* Flash selected item */
; 0000 023D lcd_clear();
;PCODE: $0000036D VOL: 0
; 0000 023E delay_ms(MENU_SPEED >> 2);
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 023F lcd_string(menu_item[i], 0);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 0240 delay_ms(MENU_SPEED >> 1);
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 0241 lcd_clear();
;PCODE: $0000037C VOL: 0
; 0000 0242 delay_ms(MENU_SPEED >> 2);
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0243 }
;PCODE: $00000380 VOL: 0
; 0000 0244 
; 0000 0245 return i;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0246 }
;PCODE: $00000384 VOL: 0
; 0000 0249 {
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 024A /* Set datadirections */
; 0000 024B DDRB = (1 << 0);    /* led output, rest input */
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 024C PORTB &= ~(1 << 2); /* AIN0 port must be 0 */
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 024D 
; 0000 024E /* Enable button pull up resistor */
; 0000 024F PORTD |= (1 << 2);
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 0250 
; 0000 0251 /* Setup timer1 to normal operation */
; 0000 0252 TCCR1A = 0;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 0253 TCCR1B = 0;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 0254 TIMSK = (1 << TOIE1); //(mega8)
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0255 // TIMSK1 = (1<<TOIE1); //(mega48/88/168)
; 0000 0256 
; 0000 0257 /* Setup analog comperator to generate rising edge interrupt */
; 0000 0258 ACSR = (1 << ACIS0) | (1 << ACIS1) | (1 << ACIE);
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0259 
; 0000 025A /* Setup analog comperator to use ADMUX */
; 0000 025B ADMUX = ADMUX_LOW;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 025C SFIOR |= (1 << ACME);
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 025D // ADCSRB |= (1<<ACME);
; 0000 025E // DIDR1 |= (1<<AIN1D)|(1<<AIN0D);
; 0000 025F 
; 0000 0260 
; 0000 0261 }
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 0266 {
;PCODE: $0000039C VOL: 0
; 0000 0267 unsigned long l;
; 0000 0268 // Declare your local variables here
; 0000 0269 
; 0000 026A // Input/Output Ports initialization
; 0000 026B // Port A initialization
; 0000 026C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 026D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
;PCODE: $0000039D VOL: 0
;	l -> Y+0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 026E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 026F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
; 0000 0270 
; 0000 0271 // Port B initialization
; 0000 0272 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0273 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 0274 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0275 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 0276 
; 0000 0277 // Port C initialization
; 0000 0278 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
; 0000 0279 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 027A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 027B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 027C 
; 0000 027D // Port D initialization
; 0000 027E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 027F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0280 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0281 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0282 
; 0000 0283 // Timer/Counter 0 initialization
; 0000 0284 // Clock source: System Clock
; 0000 0285 // Clock value: Timer 0 Stopped
; 0000 0286 // Mode: Normal top=0xFF
; 0000 0287 // OC0 output: Disconnected
; 0000 0288 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01)  ...
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 0289 TCNT0=0x00;
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 028A OCR0=0x00;
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 028B 
; 0000 028C // Timer/Counter 1 initialization
; 0000 028D // Clock source: System Clock
; 0000 028E // Clock value: Timer1 Stopped
; 0000 028F // Mode: Normal top=0xFFFF
; 0000 0290 // OC1A output: Disconnected
; 0000 0291 // OC1B output: Disconnected
; 0000 0292 // Noise Canceler: Off
; 0000 0293 // Input Capture on Falling Edge
; 0000 0294 // Timer1 Overflow Interrupt: Off
; 0000 0295 // Input Capture Interrupt: Off
; 0000 0296 // Compare A Match Interrupt: Off
; 0000 0297 // Compare B Match Interrupt: Off
; 0000 0298 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 0299 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 029A TCNT1H=0x00;
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 029B TCNT1L=0x00;
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
; 0000 029C ICR1H=0x00;
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 029D ICR1L=0x00;
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 029E OCR1AH=0x00;
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 029F OCR1AL=0x00;
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 02A0 OCR1BH=0x00;
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 02A1 OCR1BL=0x00;
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
; 0000 02A2 
; 0000 02A3 // Timer/Counter 2 initialization
; 0000 02A4 // Clock source: System Clock
; 0000 02A5 // Clock value: Timer2 Stopped
; 0000 02A6 // Mode: Normal top=0xFF
; 0000 02A7 // OC2 output: Disconnected
; 0000 02A8 ASSR=0<<AS2;
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 02A9 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 02AA TCNT2=0x00;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 02AB OCR2=0x00;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 02AC 
; 0000 02AD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 02AE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
; 0000 02AF 
; 0000 02B0 // External Interrupt(s) initialization
; 0000 02B1 // INT0: Off
; 0000 02B2 // INT1: Off
; 0000 02B3 // INT2: Off
; 0000 02B4 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 02B5 MCUCSR=(0<<ISC2);
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 02B6 
; 0000 02B7 // USART initialization
; 0000 02B8 // USART disabled
; 0000 02B9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 02BA 
; 0000 02BB // Analog Comparator initialization
; 0000 02BC // Analog Comparator: Off
; 0000 02BD // The Analog Comparator's positive input is
; 0000 02BE // connected to the AIN0 pin
; 0000 02BF // The Analog Comparator's negative input is
; 0000 02C0 // connected to the AIN1 pin
; 0000 02C1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 02C2 SFIOR=(0<<ACME);
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 02C3 
; 0000 02C4 // ADC initialization
; 0000 02C5 // ADC disabled
; 0000 02C6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
; 0000 02C7 
; 0000 02C8 // SPI initialization
; 0000 02C9 // SPI disabled
; 0000 02CA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 02CB 
; 0000 02CC // TWI initialization
; 0000 02CD // TWI disabled
; 0000 02CE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 02CF 
; 0000 02D0 // Alphanumeric LCD initialization
; 0000 02D1 // Connections are specified in the
; 0000 02D2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 02D3 // RS - PORTC Bit 5
; 0000 02D4 // RD - PORTC Bit 6
; 0000 02D5 // EN - PORTC Bit 4
; 0000 02D6 // D4 - PORTC Bit 0
; 0000 02D7 // D5 - PORTC Bit 1
; 0000 02D8 // D6 - PORTC Bit 2
; 0000 02D9 // D7 - PORTC Bit 3
; 0000 02DA // Characters/line: 16
; 0000 02DB lcd_init(16);
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 02DC init(); // init peripherals/adc/timers/etc..
;PCODE: $000003E4 VOL: 0
; 0000 02DD 
; 0000 02DE eeprom_read(); // reads calibration values or settings from EEPROM.
;PCODE: $000003E5 VOL: 0
; 0000 02DF 
; 0000 02E0 #asm("sei"); // enables global interrupts
;PCODE: $000003E6 VOL: 0
; 0000 02E1 
; 0000 02E2 LED_OFF; // turns off an LED (probably an indicator for measurement status).
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 02E3 
; 0000 02E4 rangemode = RANGE_AUTO; // setting Up the Measurement Mode
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 02E5 
; 0000 02E6 while (1)
;PCODE: $000003EB VOL: 0
; 0000 02E7 {
; 0000 02E8 /* Toggle high/low threshold */
; 0000 02E9 rangemode ^= RANGE_HIGH_THRESH;
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
; 0000 02EA l = measure();
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 02EB 
; 0000 02EC // sprintf(buf, "ADC: %u", l);  // or whatever variable
; 0000 02ED // lcd_string(buf,0);
; 0000 02EE // delay_ms(1000);
; 0000 02EF if (BUTTON_PUSHED)
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
; 0000 02F0 {
; 0000 02F1 /* Stop any cap. charging */
; 0000 02F2 LED_OFF;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 02F3 LOW_RANGE;
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 02F4 DISCHARGE_ON;
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
; 0000 02F5 
; 0000 02F6 /* Menu implementation */
; 0000 02F7 switch (menu())
;PCODE: $000003FC VOL: 0
; 0000 02F8 {
; 0000 02F9 case 0: /* auto range */
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 02FA rangemode |= RANGE_AUTO;
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 02FB break;
;PCODE: $00000402 VOL: 0
; 0000 02FC case 1: /* low range */
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
; 0000 02FD rangemode &= ~(RANGE_AUTO | RANGE_HIGH);
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 02FE break;
;PCODE: $00000409 VOL: 0
; 0000 02FF case 2: /* high range */
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 0300 rangemode &= ~RANGE_AUTO;
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 0301 rangemode |= RANGE_HIGH;
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 0302 break;
;PCODE: $00000413 VOL: 0
; 0000 0303 case 3:
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 0304 calibrate_zero();
;PCODE: $00000417 VOL: 0
; 0000 0305 break;
;PCODE: $00000418 VOL: 0
; 0000 0306 case 4:
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 0307 calibrate();
;PCODE: $0000041C VOL: 0
; 0000 0308 break;
;PCODE: $0000041D VOL: 0
; 0000 0309 case 5:
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 030A eeprom_write();
;PCODE: $00000421 VOL: 0
; 0000 030B break;
;PCODE: $00000422 VOL: 0
; 0000 030C }
;PCODE: $00000423 VOL: 0
; 0000 030D }
; 0000 030E else
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 030F calc_and_show(l);
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
; 0000 0310 }
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
; 0000 0311 }
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
